<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Cloudflare+Github图床</title>
    <link href="/2025/site-image-host/"/>
    <url>/2025/site-image-host/</url>
    
    <content type="html"><![CDATA[<h2 id="旧图床">旧图床</h2><p>之前网站使用的图床是用 Github 仓库 + jsDelivr 的 cdn ，但是jsDelivr 在国内的备案早就被吊销了，<s>据说是因为被很多人用来传涩图</s>，所以使用起来加载速度有时候会特别慢，~~而且图床这么大的流量用 cdn 疑似有点不道德，~~就打算换一个新的。</p><p>恰好现在有了 Cloudflare ，那就薅它的吧。</p><h2 id="Cloudflare-图床">Cloudflare 图床</h2><p>因为博主的图片是放在 Github 的仓库里面的，嫌麻烦不想转到 Cloudflare 的容器里面，所以就在 Cloudflare 新建了一个项目页面 <code>images.kisechan.space/</code> ，对接这个图床的仓库。同时，这个仓库就可以设置成私有了，之前使用公用 cdn 仓库就必须是公开的，让博主有些不舒服。</p><p>加载图片测试：</p><p><img src="https://images.kisechan.space/img/site-image-host-index.jpg" alt="测试图片：https://images.kisechan.space/img/site-image-host-index.jpg"></p><h2 id="更新图片的链接">更新图片的链接</h2><p>既然换了图床，那么曾经的图片链接就作废了，就得一个一个把它们的链接换成新的。</p><p>对我来说就是将原来链接的 <code>https://cdn.jsdelivr.net/gh/用户名/仓库名@分支/文件名</code> 前面的部分改成新的，就可以用脚本来实现了：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> re<br><br>old_pattern = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r'https://cdn\.jsdelivr\.net/gh/Github 用户名/仓库名@分支/路径/(.*?\.(?:jpg|png|gif))'</span>)<br><br>new_url = <span class="hljs-string">'https://images.kisechan.space/'</span><br><br><span class="hljs-keyword">for</span> root, dirs, files <span class="hljs-keyword">in</span> os.walk(<span class="hljs-string">'./'</span>):<br>    <span class="hljs-keyword">for</span> file <span class="hljs-keyword">in</span> files:<br>        <span class="hljs-keyword">if</span> file.endswith(<span class="hljs-string">'.md'</span>):<br>            file_path = os.path.join(root, file)<br>            <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(file_path, <span class="hljs-string">'r'</span>, encoding=<span class="hljs-string">'utf-8'</span>) <span class="hljs-keyword">as</span> f:<br>                content = f.read()<br>            <br>            new_content = re.sub(old_pattern, <span class="hljs-keyword">lambda</span> <span class="hljs-keyword">match</span>: new_url + <span class="hljs-keyword">match</span>.group(<span class="hljs-number">1</span>), content)<br>            <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(file_path, <span class="hljs-string">'w'</span>, encoding=<span class="hljs-string">'utf-8'</span>) <span class="hljs-keyword">as</span> f:<br>                f.write(new_content)<br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <categories>
      
      <category>网站维护</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>网站域名变更所做的工作</title>
    <link href="/2025/site-domain/"/>
    <url>/2025/site-domain/</url>
    
    <content type="html"><![CDATA[<div class="note note-primary">            <p>从现在开始，本站域名便从 <strong><a href="http://kisechan.github.io">kisechan.github.io</a></strong> 正式迁移到 <strong>blog.kisechan.space</strong> 了！</p>          </div><h2 id="购买、配置域名">购买、配置域名</h2><p>博主一直使用的是由 Github Page 提供的免费二级域名 <a href="http://kisechan.github.io">kisechan.github.io</a> ，最近想换成自由一些的新域名，于是在阿里云买了十年的 kisechan.space 域名。</p><blockquote><p>对于我来说原本的备选除了 .space 其实还有 .site、 .top、 .fun、 .host 这样的域名，最中意的选项也是第一个，但就在博主正准备买的时候 .site 和 .fun 突然从230/10年涨到800多，就放弃了。 .top 倒是一直很便宜，就是风评比较差，例如这里<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="https://blog.liushen.fun/posts/260f4f9a/#逐渐黑产化">[1]</span></a></sup>。所以就选了现在的这个顶级域名。</p></blockquote><p>有了域名以后就可以把原本部署到 Github Page 的博客绑定到域名上了，主要的流程是：</p><ul><li>在域名注册商的网站打开后台，增添 DNS 解析，添加一个 CNAME 记录（别名记录，只能解析到一个域名，如果是 A 记录，也就是地址/ Address 记录那就只能解析到 IP 地址），给子域名 blog.kisechan.space 解析到 Github Page 的 <a href="http://kisechan.github.io">kisechan.github.io</a>。</li><li>在 Github Page 的仓库 Settings 中的 Page 选项中，在 Custom domain 下添加自定义域名，进行好 DNS 解析以后就是把域名绑定到博客了。</li><li>勾选强制 HTTPS 。</li></ul><div class="note note-warning">            <p><strong>注意</strong></p><p>在这个时候要在博客根目录（不是 <code>theme/</code> ）下的 <code>source/</code> 文件夹内新建一个 <code>CNAME</code> 文件，里面写上需要绑定的自定义域名。</p><p>而且， <code>CNAME</code> 内填写的域名<strong>不能包含有<a href="https://xn--v6qq2wsq0a">https://等内容</a></strong><sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="https://liunwcj.cn/2022/02/11/hexo-gh-host-bug/">[2]</span></a></sup>，就是一个单纯的域名，否则在每次使用 <code>hexo d</code> 进行部署的时候，都会把 Github Page 仓库里配置好了的域名给刷新掉，访问就会 404 。</p>          </div><h2 id="域名解析到-Cloudflare">域名解析到 Cloudflare</h2><p>关键点是把域名的 <strong>DNS 服务器</strong>从注册商给的域名改成 Cloudflare 提供的那两个域名，随后点击检测，待检测完毕就相当于解析到 Cloudflare 了。</p><p>解析完毕以后，博主发现访问本站时，会出现重定向过多网站进不去，是因为解析到 Cloudflare 后， Cloudflare 的 SSL 证书默认选择的是<strong>灵活 SSL</strong> ，强制通过未加密的 HTTP 连接到源 Web 服务器，然而 Web 服务器只能以 HTTPS 的方式进行访问，所以无法访问。解决方案就是将 SSL 方式选择为<strong>完全 SSL</strong> 。<sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="https://blog.csdn.net/qq_21405949/article/details/144277026?spm=1001.2101.3001.6661.1&amp;utm_medium=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7EYuanLiJiHua%7EPaidSort-1-144277026-blog-112727903.235%5Ev43%5Epc_blog_bottom_relevance_base6&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7EYuanLiJiHua%7EPaidSort-1-144277026-blog-112727903.235%5Ev43%5Epc_blog_bottom_relevance_base6&amp;utm_relevant_index=1">[3]</span></a></sup></p><hr><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://blog.liushen.fun/posts/260f4f9a/#%E9%80%90%E6%B8%90%E9%BB%91%E4%BA%A7%E5%8C%96">https://blog.liushen.fun/posts/260f4f9a/#逐渐黑产化</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://liunwcj.cn/2022/02/11/hexo-gh-host-bug/">https://liunwcj.cn/2022/02/11/hexo-gh-host-bug/</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://blog.csdn.net/qq_21405949/article/details/144277026?spm=1001.2101.3001.6661.1&amp;utm_medium=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7EYuanLiJiHua%7EPaidSort-1-144277026-blog-112727903.235%5Ev43%5Epc_blog_bottom_relevance_base6&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7EYuanLiJiHua%7EPaidSort-1-144277026-blog-112727903.235%5Ev43%5Epc_blog_bottom_relevance_base6&amp;utm_relevant_index=1">https://blog.csdn.net/qq_21405949/article/details/144277026?spm=1001.2101.3001.6661.1&amp;utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~YuanLiJiHua~PaidSort-1-144277026-blog-112727903.235^v43^pc_blog_bottom_relevance_base6&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~YuanLiJiHua~PaidSort-1-144277026-blog-112727903.235^v43^pc_blog_bottom_relevance_base6&amp;utm_relevant_index=1</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>网站维护</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>单调队列优化 dp</title>
    <link href="/2025/monotonic-queue-dp/"/>
    <url>/2025/monotonic-queue-dp/</url>
    
    <content type="html"><![CDATA[<h2 id="单调队列">单调队列</h2><p>想要<strong>在一个固定区间内维护最大/最小值</strong>，就可以考虑用单调队列实现。</p><p><strong><a href="https://www.luogu.com.cn/problem/P1886">Luogu P1886 滑动窗口 /【模板】单调队列</a></strong></p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> endl <span class="hljs-string">'\n'</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">1e6</span>+<span class="hljs-number">5</span>;<br><span class="hljs-type">int</span> n,k;<br><span class="hljs-type">int</span> a[N];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>{<br>ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>),cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>),cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    cin&gt;&gt;n&gt;&gt;k;<br>    deque&lt;<span class="hljs-type">int</span>&gt;q1,q2;<span class="hljs-comment">// 一个单调增，一个单调减</span><br>    vector&lt;<span class="hljs-type">int</span>&gt;v1,v2;<span class="hljs-comment">// 存答案</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>{<br><span class="hljs-keyword">while</span>(!q1.<span class="hljs-built_in">empty</span>()&amp;&amp;q1.<span class="hljs-built_in">front</span>()&lt;i-k+<span class="hljs-number">1</span>) q1.<span class="hljs-built_in">pop_front</span>();<br><span class="hljs-keyword">while</span>(!q2.<span class="hljs-built_in">empty</span>()&amp;&amp;q2.<span class="hljs-built_in">front</span>()&lt;i-k+<span class="hljs-number">1</span>) q2.<span class="hljs-built_in">pop_front</span>();<br>cin&gt;&gt;a[i];<br><span class="hljs-keyword">while</span>(!q1.<span class="hljs-built_in">empty</span>()&amp;&amp;a[q1.<span class="hljs-built_in">back</span>()]&gt;a[i]) q1.<span class="hljs-built_in">pop_back</span>();<br>q1.<span class="hljs-built_in">push_back</span>(i);<br><span class="hljs-keyword">if</span>(i&gt;k<span class="hljs-number">-2</span>) v1.<span class="hljs-built_in">push_back</span>(a[q1.<span class="hljs-built_in">front</span>()]);<br><span class="hljs-keyword">while</span>(!q2.<span class="hljs-built_in">empty</span>()&amp;&amp;a[q2.<span class="hljs-built_in">back</span>()]&lt;a[i]) q2.<span class="hljs-built_in">pop_back</span>();<br>q2.<span class="hljs-built_in">push_back</span>(i);<br><span class="hljs-keyword">if</span>(i&gt;k<span class="hljs-number">-2</span>) v2.<span class="hljs-built_in">push_back</span>(a[q2.<span class="hljs-built_in">front</span>()]);<br>}<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> i:v1) cout&lt;&lt;i&lt;&lt;<span class="hljs-string">' '</span>;<br>cout&lt;&lt;endl;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> i:v2) cout&lt;&lt;i&lt;&lt;<span class="hljs-string">' '</span>;<br>cout&lt;&lt;endl;<br>}<br></code></pre></td></tr></tbody></table></figure><p>主要注意点：</p><ul><li>存储的是<strong>坐标</strong>而不是值</li><li>先把区间以外的坐标筛掉，再把不单调的元素删掉</li></ul><h2 id="单调队列优化的-dp">单调队列优化的 dp</h2><p><a href="https://www.luogu.com.cn/problem/P1725"><strong>Luogu P1725 琪露诺</strong></a></p><p>显然本题是一个 dp ：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mi>max</mi><mo>⁡</mo><mo stretchy="false">{</mo><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo>−</mo><mi>r</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo>−</mo><mi>r</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo>−</mo><mi>l</mi><mo stretchy="false">)</mo><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">f(x)=\max\{f(x-r),f(x-r+1),...,f(x-l)\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop">max</span><span class="mopen">{</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">...</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mclose">)}</span></span></span></span>，但是它的状态转移是在区间里面的，如果要在区间里面每个元素都遍历一遍，那么复杂度就会变成<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>。</p><p>但是，对于一个点<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6595em;"></span><span class="mord mathnormal">i</span></span></span></span>，如果能够用单调队列维护这个区间<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>∈</mo><mo stretchy="false">[</mo><mi>i</mi><mo>−</mo><mi>r</mi><mo separator="true">,</mo><mi>i</mi><mo>−</mo><mi>l</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">x\in[i-r,i-l]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.854em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mclose">]</span></span></span></span>内<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span>的最大值，那么复杂度就会降至<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>，不需要遍历区间内的所有元素。</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> endl <span class="hljs-string">'\n'</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">2e5</span>+<span class="hljs-number">5</span>;<br><span class="hljs-type">int</span> n,l,r;<br><span class="hljs-type">int</span> a[N],f[N];<br><span class="hljs-type">int</span> ans=<span class="hljs-number">-0x3f3f3f</span>;<br>deque&lt;<span class="hljs-type">int</span>&gt;q;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>{<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>),cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>),cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    cin&gt;&gt;n&gt;&gt;l&gt;&gt;r;<br>    <span class="hljs-built_in">memset</span>(f,<span class="hljs-number">-0x3f3f3f</span>,<span class="hljs-built_in">sizeof</span>(a));<br>    <span class="hljs-comment">// 设为128=2^8也可以，每个字节自然溢出成为负的极大值</span><br>    f[<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;=n;i++) cin&gt;&gt;a[i];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=l;i&lt;=n;i++)<br>    <span class="hljs-comment">// 从l开始，因为0不能跳到1~l-1的地方</span><br>{<br>    <span class="hljs-keyword">while</span>(!q.<span class="hljs-built_in">empty</span>()&amp;&amp;q.<span class="hljs-built_in">front</span>()&lt;i-r) q.<span class="hljs-built_in">pop_front</span>();<br><span class="hljs-keyword">while</span>(!q.<span class="hljs-built_in">empty</span>()&amp;&amp;f[q.<span class="hljs-built_in">front</span>()]&lt;f[i-l]) q.<span class="hljs-built_in">pop_back</span>();<br>q.<span class="hljs-built_in">push_back</span>(i-l);<br>    f[i]=<span class="hljs-built_in">max</span>(f[i],f[q.<span class="hljs-built_in">front</span>()]+a[i]);<br>    <span class="hljs-keyword">if</span>(i+r&gt;n) ans=<span class="hljs-built_in">max</span>(ans,f[i]);<br>    }<br>    cout&lt;&lt;ans&lt;&lt;endl;<br>}<br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>dp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>用AstrBot框架搭建一个qq机器人</title>
    <link href="/2025/qqbot-astrbot/"/>
    <url>/2025/qqbot-astrbot/</url>
    
    <content type="html"><![CDATA[<h2 id="部署框架">部署框架</h2><p><strong>框架</strong>提供的是机器人的基础功能，简化开发流程。</p><p>AstrBot 官方文档：<a href="https://astrbot.app/">https://astrbot.app/</a></p><p>博主使用的是官方提供的一键安装器部署<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="https://astrbot.app/deploy/astrbot/windows.html">[1]</span></a></sup>，也可以使用 Docker <sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="https://astrbot.app/deploy/astrbot/docker.html">[2]</span></a></sup>。</p><p>安装完毕后就可以按照命令行的输出打开控制面板了。</p><h2 id="部署协议端">部署协议端</h2><p><strong>协议端</strong>负责用 Websocket 等协议和聊天软件的服务器通信，并处理收发信息逻辑。</p><h3 id="Napcat-sup-id-fnref-3-class-footnote-ref-a-href-fn-3-rel-footnote-span-class-hint-top-hint-rounded-aria-label-https-napneko-github-io-3-span-a-sup">Napcat<sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="https://napneko.github.io/">[3]</span></a></sup></h3><p>博主尝试过部署 Napcat ，但是在唤起 QQ 客户端时， QQ 会直接崩溃，需要解决方案。</p><h3 id="Lagrange-sup-id-fnref-4-class-footnote-ref-a-href-fn-4-rel-footnote-span-class-hint-top-hint-rounded-aria-label-https-lagrangedev-github-io-Lagrange-Doc-4-span-a-sup">Lagrange<sup id="fnref:4" class="footnote-ref"><a href="#fn:4" rel="footnote"><span class="hint--top hint--rounded" aria-label="https://lagrangedev.github.io/Lagrange.Doc/">[4]</span></a></sup></h3><p>根据文档配置好 <code>appsettings.json</code> 后，就可以扫描二维码登录 QQ ，就算是连接上机器人了。</p><h2 id="部署完成">部署完成</h2><p>效果如图：</p><p><img src="https://images.kisechan.space/astrbot-showtime.png" alt="部署完成后的仪表盘"></p><hr><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://astrbot.app/deploy/astrbot/windows.html">https://astrbot.app/deploy/astrbot/windows.html</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://astrbot.app/deploy/astrbot/docker.html">https://astrbot.app/deploy/astrbot/docker.html</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://napneko.github.io/">https://napneko.github.io/</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:4" class="footnote-text"><span><a href="https://lagrangedev.github.io/Lagrange.Doc/">https://lagrangedev.github.io/Lagrange.Doc/</a><a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    
    <tags>
      
      <tag>QQBot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>把 Docker 安装到别的磁盘</title>
    <link href="/2025/docker-anotherdisk/"/>
    <url>/2025/docker-anotherdisk/</url>
    
    <content type="html"><![CDATA[<h2 id="安装">安装</h2><p>博主把 Docker 安装到 C 盘导致 C 盘爆炸，需要把它挪个地方。</p><p>以管理员模式打开 cmd 对 <code>Docker Desktop Installer.exe</code> 执行：</p><figure class="highlight cmd"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">"Docker Desktop Installer.exe" install --installation-<span class="hljs-built_in">dir</span>="[目标路径]"<br></code></pre></td></tr></tbody></table></figure><div class="note note-warning">            <p>如果用 powershell 的话，因为 powershell 语法比较严格，所以命令最前面就必须加上<code>&amp;</code>。否则 powershell 就会把安装程序的名字解析成一个字符串，而不是一个可执行程序。</p>          </div><p>部署 wsl2 的时候也可以用类似的方法把它安装到别的盘符。</p>]]></content>
    
    
    <categories>
      
      <category>CS 杂谈</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>给 Typora 主题 Purple 加上背景图片</title>
    <link href="/2025/typora-purple/"/>
    <url>/2025/typora-purple/</url>
    
    <content type="html"><![CDATA[<h1>Purple 修改</h1><p><a href="https://github.com/hliu202/typora-purple-theme">Typora-Theme-Purple</a> 是一款简洁、优美的 Typora 主题。</p><p>博主主要的修改点在背景和字体上面。在 css 文件中加入：</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-id">#write</span>{<br>    <span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">.[图片路径]</span>);<br>    <span class="hljs-attribute">background-size</span>: <span class="hljs-number">30%</span>;<br>    <span class="hljs-attribute">background-repeat</span>: no-repeat;<br>    <span class="hljs-attribute">background-position</span>: right bottom;<br>}<br></code></pre></td></tr></tbody></table></figure><p>就可以给背景加上图片。</p><p>字体方面就只直接需要修改原文件的<code>font-family</code>属性就可以了。</p><p>主要参考：<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="https://github.com/hliu202/typora-purple-theme/issues/38">[1]</span></a></sup><sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="https://blog.csdn.net/lihuadaiyuoo/article/details/110677297">[2]</span></a></sup></p><h1>效果展示</h1><p>如图：</p><p><img src="https://images.kisechan.space/typora-purple-reviseshowtime.png" alt="修改效果展示"></p><hr><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://github.com/hliu202/typora-purple-theme/issues/38">https://github.com/hliu202/typora-purple-theme/issues/38</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://blog.csdn.net/lihuadaiyuoo/article/details/110677297">https://blog.csdn.net/lihuadaiyuoo/article/details/110677297</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>CS 杂谈</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Typora</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>让Hexo博客支持Emoji表情</title>
    <link href="/2025/hexo-emoji/"/>
    <url>/2025/hexo-emoji/</url>
    
    <content type="html"><![CDATA[<h1>安装</h1><p><a href="http://github.com/arturi/hexo-filter-github-emojis">hexo-filter-github-emojis</a> 是一个使用 Github Emojis API 来添加 Emoji表情的 Hexo 插件。</p><p>安装插件：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-filter-github-emojis --save<br></code></pre></td></tr></tbody></table></figure><h1>配置</h1><p>在<code>_config.yml</code>中配置：</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">githubEmojis:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">className:</span> <span class="hljs-string">github-emoji</span><br>  <span class="hljs-attr">inject:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">styles:</span><br>  <span class="hljs-attr">customEmojis:</span><br></code></pre></td></tr></tbody></table></figure><h1>示例</h1><p>例如：</p><figure class="highlight md"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs md">:smile:<br></code></pre></td></tr></tbody></table></figure><p>渲染为：</p><p><span class="github-emoji"><span>😄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><p>支持的所有符号可以参考：<a href="https://www.webfx.com/tools/emoji-cheat-sheet/">https://www.webfx.com/tools/emoji-cheat-sheet/</a></p>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>给Hexo博客文章加密—— hexo-blog-encrypt</title>
    <link href="/2025/hexo-encrypt/"/>
    <url>/2025/hexo-encrypt/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="笨蛋，这个都能输错qwq" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="7e1f6d53a9ed260f02952a4564ac19519a99029606356c70f0bb8ee19fba67a1">bd25ed9264b080267271e137e33d0ce1cae785e7b35dbab5499003599dce1f15376537b783d36880c1dc6f395116a8c8d12f352c4a57bed3cf1277a472399ad4d5718a3fe53caa48a646ce3975fd14e61adf4a940f67399f8c488fbe486ab1ba69f1a8915876e0095b2f94b9c2106cbbfd2918d622de9cde7162e558f2953afd6ad46558935b153021ebe874d4e89468acd6a0888768388dfff38d836cb5bc808e940d65c25756293b2966503328daa85b149422143e3799cff30ab07973c0b3d28dbf8ed67bb7d9b82e064fec2e0ab56bca37e09ba7a9fd34f8b8d798d1378d728b94020081ca676b7e0e02e1ce031b3fc2c498475c634157a36090af28c0e800577aac37e0655dfcb76ac2af52f99baca06135a7be6b9a38ddb0919f6663eb904d9b76a5ab81b663fbb4c6a3f2f280e981cbc219862aa360986180eb9d656ea093ecdfdb727a63d68d6f1107324d6255b121a914fd87ca6eff7b039833ec2b948a0bae704874e9baaae22207778d7efce18d07e00950d2b9de79e11c8aa031a1d20fed821c64cf94e40963a8ecb40b1e215f5a8c16b93c1a81bf3fe0b9c7c09dc47222ab2b43396f2edbbccab4bac6f40f4ffbe4ee31de46b5c35cc3dc174bc77ba5ea67a2d88d50ad7f063e5906232c2de25939ed791ec55c0986b857969b7bcba8314ed20bf81e4092083ed82e0190b5d0156e2ee5e2388939216be2f606f7c3438592ad55637f36fd2885f0558a682a4043f7dcdb5e34e09d2999005979bbb3dc2fe9d070e899756677921e82224462b59572c1b0b4165b60c8b6dd36f7ec97967995152eae558a8e752151539714b66b7e17ecba3ae5026f0e9e51e74a50039bea908b55633be134a8624601c6d060c128993be96cb6a0804cddf97316e9aa0c4588ff6e481d18a7cab6590d4158df115be52ecfd39c7d6da97a317544fc5937774e74437ddbaf156253c368e2133ca4f301d06c1ef228628b0652aabd79c48f8c94e2c17ac79933ef66df5f9d4a6b8af2617fb537204042d2cc19f0632d616fdc202fe8d7d18b9341c3d0060016b7997070ec71c27c5d5255036996f38f8c7b8e263902af99ef4b1bc8dfbd81fb2da46b828edc0a3158a47f74f010ad0c43b01b90475c0b62dbe354ebb1c7b436564e4a4586ed00e76ef127a7c31b96844eeef8588945cd4aa3184278bace867c8b229280b68a6e81e880fa0a7aea62b8daad1cf649fd96fedb2b42b864cdd2b716f61db1298ab8dd0a4a4dad662d923beb578c6803a809626a22155502c367508bf572a1c91bf222b84b6726c3eaf16673d6e2c5f3b86dd5d854e3cf57a613e22f686c2b7283e76ebf55e0569ff0e219c77606d18be9257271b7e27bf5f94e94726c9676d78775310af7c430da5eee522f985ee3c563f1f48a09994bd04bc155d6381e4ee4a34cb78b81e60a5220c2dfd2814abf4297c2ee07884005793939b7159436c258319736df230e5cbb18bd0ce16572aa146909946a48af8a857d868a72fc9af4e996c7ca0e8f1170016c27f7af69f5b3b9ba504def3633c9ff70aae424a97a7159a6214c875d8703906fad944a61ed06c8fd4aec599b3321966268f92f8528f2e784465372fa9893a670d36119a9272df440b34a05ba88ea71f92a31263f57123e3c37b9df3b3e9abe10403fa4913f7470864e0be86a05ac51dad4745ffb7d22639f9aa038190f3dbbcd1b12620e0343f9c3d4a9098e35485e607368948135adcf286a462c4cd614f623b26c649e0f3488f9a3fd4a953ae8524be0c95ce690ae8f2abe3df32552b352e1953f3888c72e8a896343da8ec19e7a893f0610c79e0cf50c09c83d00898dc6514a5a30baf0a1c8bbb73edbe19514d289d3317c9e6bc7f6d85b71504c9ff3f9d7532a8a180b22fa10c060d966034cce80332fd58187718fb7d67a8e50aefdd1b91fdfaf4d7fae93a3c59ebdb4eb3ef2db60793af801a1f26d98eebd9e5cbe3c94ba58189f2a67cda4488279b66ce5cd355cc027fc776ccc277248073d3e82746376344dd4d65cacbceb64638ee01d5e1e973164c445e5de0180a1edf73cf4b657f348d31ea14bd2d50f17e9d9cd9b54ff466a4d669d4c93f021bd9d7d0ff94483e27a1b4fd6ee406a8423398915f6431b0518ca93422a7ecfe7cf4aa6414f93f68517708ed5422d2b7acbc6294ae83235792b0d953c96b096aaff8878355dd6ceacd6ddfe8b25db7a27b86fb6a8ac310c7981b48e6b08f5ea00e0e311d0e5995aed3a208b83942450db4b9671427ee5dfb27ca8d7a8bdcd6aae599413d44a9657f754ddd8688dcebe0b43e532ad8a7df8753a727417190f36b6431a9f190bf08b1d6ba99f7d90cd0c8e96512dcf1bfb2cc2d64af9ba42f84a3853e16fbfbf7440307b2fd2cbd51a42a3b1c0572197499efdd9adedf8f114b1b4a960771554e5a0006680102f778b0eddad5b1f35426855709773cb91d29761f47c9f41c8e26e9cc0a56020afeb55b4a1bff86f90f9d4f6eef23175676000933f053832f9b3191c1240a6ac3f06e56e886ea8eab53a7d342ba30bcabf8108620c071eb349fe70592584df17cc6260e481d40a459d208bec0470931e792e02fd8ef39bd91d76e3ab3b7b8cff7c5ff6241ebca5aae064125227fcebe347ce42ad3810ea0bdbfaf3eeae48a883f7462ab918586a4286423599ef640fbb0d84fb4bb68ed3d348422b3efcae543a74f2fdfd969cff97d91e3597be8d70d463c6214df836b1b78520fe6ed3ec1cb2e4dfb2027fa9953553471b79f93151fa26d40f0bc40670880e6d723b3d3121c9054663edf08885bc0a6c5823da48aec415b4473f81d7dc06ed7cfaaf6d4440f0880c1232da42b939a05e4c31a86d7ddd3dbcf08dd24d5ac75b5918e5a7901df88a8bc2f826cc94faeff73b19fd9350f9970553de888f0aef993a5dffbb97c27daae56531bef89a2cfa78908e9e8093f7704c5c0572c1857c3896e29676bbdced3af1c6eaa8790754ea61f69cb4007dae6bebbf1694f79078c2ed30bc76044cc399c5e5b80770af29ff83636163db5a2d8d7a0bcafc438ea70143352b0d2b57f70735231e2bee23ccd9b5f1af48d47c652155c974b3f4c5b84a0bbd7c2ced7ad39db96b15f00ebb6fd32795ac96220daa87e1a0e074cc00f1092f5cea453d0e620d10dd678445e2a4ff42d9559b91cc83375ef11141b61fd5677b2dc4c54c8774e7bd03783bc2db0629ff60c372ca84c9eaf450b02c12eaee2f8fe34171cd78d82ffae4aad6723feb032666dba305ae1cf9f1f06649996e257b88a04d0e3da369ac171ee5c460e7156110757c26548b606a7ef66403035454c72b0ff1e186df21dddd5850b16e3713d11a4609be6c072fb6ae7d1e19c3950b8f1a321409</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">文章密码是test</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>给Fluid主题引入外部图标CSS</title>
    <link href="/2025/hexo-icons/"/>
    <url>/2025/hexo-icons/</url>
    
    <content type="html"><![CDATA[<h1>图标库</h1><p>准备增加的是 <strong>FontAwesome 4.7.0 中完整的675个图标样式CSS</strong>，链接可以参考：<a href="https://9iphp.com/fa-icons">https://9iphp.com/fa-icons</a></p><h1>添加</h1><p>博主尝试过在<code>_config.fluid.yml</code>的<code>custom_css</code>下和新定义一个<code>fa</code>引入 CSS ，但是都不起效，查了文档<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="https://hexo.fluid-dev.com/docs/icon/#%E5%86%85%E7%BD%AE%E7%A4%BE%E4%BA%A4%E5%9B%BE%E6%A0%87">[1]</span></a></sup><sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="https://hexo.fluid-dev.com/docs/guide/#%E4%BA%8C%E7%BA%A7%E7%AB%99%E7%82%B9%E8%B7%AF%E5%BE%84">[2]</span></a></sup>发现可以直接自定义网页<code>&lt;head&gt;</code>元素里面的内容，那就好办了，在<code>_config.fluid.yml</code>下直接引入：</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">custom_head:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&lt;link</span> <span class="hljs-string">href="https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css"</span> <span class="hljs-string">rel="stylesheet"&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>配置文件里的图标可以命名成<code>fa fa-xxx</code>的形式引入，例如：</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">icon:</span> <span class="hljs-string">"fa fa-archive"</span><br></code></pre></td></tr></tbody></table></figure><hr><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://hexo.fluid-dev.com/docs/icon/#%E5%86%85%E7%BD%AE%E7%A4%BE%E4%BA%A4%E5%9B%BE%E6%A0%87">https://hexo.fluid-dev.com/docs/icon/#内置社交图标</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://hexo.fluid-dev.com/docs/guide/#%E4%BA%8C%E7%BA%A7%E7%AB%99%E7%82%B9%E8%B7%AF%E5%BE%84">https://hexo.fluid-dev.com/docs/guide/#二级站点路径</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Web编程学习笔记3：JS入门</title>
    <link href="/2025/web3/"/>
    <url>/2025/web3/</url>
    
    <content type="html"><![CDATA[<div class="note note-primary">            <p>本笔记主要依据MDN Web Docs：<a href="https://developer.mozilla.org/zh-CN/">https://developer.mozilla.org/zh-CN/</a></p>          </div><h1>基本语法</h1><p>JavaScript 是一种轻量级的<strong>动态类型解释型语言</strong>。JS 语法风格类似于 C 语言家族：</p><ul><li><strong>分号</strong>：语句以分号 <code>;</code> 结尾（可选，但推荐使用）</li><li><strong>花括号</strong>：代码块用 <code>{}</code> 包裹</li><li><strong>控制结构</strong>：<code>if</code>、<code>else</code>、<code>for</code>、<code>while</code>、<code>switch</code> 等与 C 语言几乎一致</li><li><strong>运算符</strong>和 C 语言家族几乎完全一样</li></ul><p>但是特性类似于 Python：</p><ul><li>用<code>function</code>关键字定义函数</li><li>动态类型</li><li>数组和对象用法类似于 Py</li><li>支持将函数作为参数，或者把函数作为返回值</li></ul><h2 id="变量声明">变量声明</h2><p>JavaScript 使用 <code>var</code>、<code>let</code> 或 <code>const</code> 来声明变量：</p><ul><li><code>var</code>：函数作用域，传统方式（不推荐使用）</li><li><code>let</code>：块级作用域，可以重新赋值</li><li><code>const</code>：块级作用域，声明后不能重新赋值（常量）</li></ul><blockquote><p><strong>块级作用域</strong>：一个<code>{}</code>包裹的区域有效</p><p><strong>函数作用域</strong>：在一个函数里就有效：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">example</span>(<span class="hljs-params"></span>) {<br> <span class="hljs-keyword">if</span> (<span class="hljs-literal">true</span>) {<br>     <span class="hljs-keyword">var</span> x = <span class="hljs-number">10</span>; <span class="hljs-comment">// 函数作用域变量</span><br> }<br> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(x); <span class="hljs-comment">// 输出 10</span><br>}<br><span class="hljs-title function_">example</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(x); <span class="hljs-comment">// 报错：x is not defined</span><br></code></pre></td></tr></tbody></table></figure></blockquote><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> name = <span class="hljs-string">"Alice"</span>; <span class="hljs-comment">// 声明一个变量</span><br><span class="hljs-keyword">const</span> age = <span class="hljs-number">25</span>;      <span class="hljs-comment">// 声明一个常量</span><br>name = <span class="hljs-string">"Bob"</span>;        <span class="hljs-comment">// 可以修改</span><br><span class="hljs-comment">// age = 30;         // 报错，const 不能重新赋值</span><br></code></pre></td></tr></tbody></table></figure><div class="note note-warning">            <p>另外，变量<strong>可以</strong>在没有 <code>let</code>、<code>const</code> 或 <code>var</code> 声明的情况下直接使用，但这会导致变量成为<strong>全局变量</strong>（在非严格模式下），或者<strong>报错</strong>（在严格模式下）。这种行为通常是不推荐的，因为它可能导致意外的全局变量污染和难以调试的问题。</p>          </div><blockquote><p><strong>严格模式</strong>（Strict Mode）和<strong>非严格模式</strong>（Sloppy Mode）是 JavaScript 的两种运行模式。严格模式是 ES5（ECMAScript 5）引入的特性，旨在帮助开发者避免一些常见的错误和不规范的写法。</p><p>在脚本或函数的顶部添加 <code>"use strict";</code> 即可启用严格模式。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-meta">"use strict"</span>; <span class="hljs-comment">// 启用严格模式</span><br>x = <span class="hljs-number">10</span>; <span class="hljs-comment">// 报错：x is not defined</span><br></code></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">strictFunction</span>(<span class="hljs-params"></span>) {<br>    <span class="hljs-string">"use strict"</span>; <span class="hljs-comment">// 局部严格模式</span><br>    y = <span class="hljs-number">20</span>; <span class="hljs-comment">// 报错：y is not defined</span><br>}<br></code></pre></td></tr></tbody></table></figure><p>在严格模式下，<strong>使用未声明的变量</strong>、<strong>删除（<code>delete</code>）变量</strong>，以及**在函数参数中使用两个名字一样的变量（比如<code>function example(a,a)</code>）**等方面都会报错。</p></blockquote><h2 id="数据类型">数据类型</h2><p>JavaScript 是动态类型语言，常见的数据类型包括：</p><ul><li><strong>基本类型</strong>：<code>string</code>、<code>number</code>、<code>boolean</code>、<code>null</code>、<code>undefined</code>、<code>symbol</code>。</li><li><strong>引用类型</strong>：<code>object</code>、<code>array</code>、<code>function</code>。</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> str = <span class="hljs-string">"Hello"</span>;       <span class="hljs-comment">// 字符串</span><br><span class="hljs-keyword">let</span> num = <span class="hljs-number">123</span>;           <span class="hljs-comment">// 数字</span><br><span class="hljs-keyword">let</span> isTrue = <span class="hljs-literal">true</span>;       <span class="hljs-comment">// 布尔值</span><br><span class="hljs-keyword">let</span> obj = { <span class="hljs-attr">name</span>: <span class="hljs-string">"Alice"</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">25</span> }; <span class="hljs-comment">// 对象</span><br><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];     <span class="hljs-comment">// 数组</span><br><span class="hljs-keyword">let</span> func = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) {  <span class="hljs-comment">// 函数</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">"Hello!"</span>);<br>};<br></code></pre></td></tr></tbody></table></figure><h2 id="运算符">运算符</h2><ul><li>算术运算符：<code>+</code>、<code>-</code>、<code>*</code>、<code>/</code>、<code>%</code>。</li><li>比较运算符：<code>==</code>、<code>===</code>、<code>!=</code>、<code>!==</code>、<code>&gt;</code>、<code>&lt;</code>。</li><li>逻辑运算符：<code>&amp;&amp;</code>、<code>||</code>、<code>!</code>。</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">let</span> b = <span class="hljs-number">5</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a + b); <span class="hljs-comment">// 15</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a === b); <span class="hljs-comment">// false</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a &gt; <span class="hljs-number">5</span> &amp;&amp; b &lt; <span class="hljs-number">10</span>); <span class="hljs-comment">// true</span><br></code></pre></td></tr></tbody></table></figure><p><code>==</code>和<code>===</code>的区别主要在于是否为<strong>严格相等</strong>。前者在比较的时候会进行隐式类型转换，并且会运用<code>valueOf</code>或者<code>toString</code>等方法。所以更推荐使用<code>===</code>和<code>!==</code>。</p><h2 id="条件语句">条件语句</h2><ul><li><code>if...else</code>：根据条件执行代码。</li><li><code>switch</code>：多条件分支。</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> age = <span class="hljs-number">18</span>;<br><span class="hljs-keyword">if</span> (age &gt;= <span class="hljs-number">18</span>) {<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">"成年人"</span>);<br>} <span class="hljs-keyword">else</span> {<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">"未成年人"</span>);<br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="循环">循环</h2><ul><li><code>for</code>：遍历数组或执行固定次数的循环。</li><li><code>while</code>：条件为真时执行循环。</li><li><code>for...of</code>：遍历可迭代对象（如数组）</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) {<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i); <span class="hljs-comment">// 输出 0 到 4</span><br>}<br><br><span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (i &lt; <span class="hljs-number">5</span>) {<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i); <span class="hljs-comment">// 输出 0, 1, 2, 3, 4</span><br>    i++;<br>}<br><br><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> num <span class="hljs-keyword">of</span> arr) {<br>    <span class="hljs-comment">// 用于遍历可迭代对象（如数组、字符串、Map、Set 等</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num); <span class="hljs-comment">// 输出 1, 2, 3</span><br>}<br><br><span class="hljs-keyword">let</span> obj = { <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">c</span>: <span class="hljs-number">3</span> };<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> obj) {<br>    <span class="hljs-comment">// 用于遍历对象的可枚举属性（如对象的键）</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(key, obj[key]); <span class="hljs-comment">// 输出 a 1, b 2, c 3</span><br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="函数">函数</h2><p>函数是 JavaScript 的核心，用于封装可重复使用的代码。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">greet</span>(<span class="hljs-params">name</span>) {<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">"Hello, "</span> + name;<br>}<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">greet</span>(<span class="hljs-string">"Alice"</span>)); <span class="hljs-comment">// 输出 "Hello, Alice"</span><br></code></pre></td></tr></tbody></table></figure><h3 id="默认参数">默认参数</h3><p>在参数名称后添加 <code>= 默认值</code>，来指定默认值：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">hello</span>(<span class="hljs-params">name = <span class="hljs-string">"克里斯"</span></span>) {<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`你好，<span class="hljs-subst">${name}</span>！`</span>);<br>}<br><br><span class="hljs-title function_">hello</span>(<span class="hljs-string">"阿里"</span>); <span class="hljs-comment">// 你好，阿里！</span><br><span class="hljs-title function_">hello</span>(); <span class="hljs-comment">// 你好，克里斯！</span><br></code></pre></td></tr></tbody></table></figure><h3 id="匿名函数和箭头函数">匿名函数和箭头函数</h3><p>把函数作为参数传递时，可以使用匿名函数，例如：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">textBox.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">"keydown"</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) {<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`You pressed "<span class="hljs-subst">${event.key}</span>".`</span>);<br>});<br></code></pre></td></tr></tbody></table></figure><p>也可以用 <code>(event) =&gt;</code> 来代替 <code>function(event)</code>：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">textBox.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">"keydown"</span>, <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> {<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`You pressed "<span class="hljs-subst">${event.key}</span>".`</span>);<br>});<br></code></pre></td></tr></tbody></table></figure><p>如果函数只含有一个参数，那就可以省略掉括号：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">textBox.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">"keydown"</span>, <span class="hljs-function"><span class="hljs-params">event</span> =&gt;</span> {<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`You pressed "<span class="hljs-subst">${event.key}</span>".`</span>);<br>});<br></code></pre></td></tr></tbody></table></figure><p>最终，如果函数只包含一行<code>return</code>语句，那就可以省略到只剩下<code>参数 =&gt; 返回值</code>：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> originals = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><br><span class="hljs-keyword">const</span> doubled = originals.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item * <span class="hljs-number">2</span>);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(doubled); <span class="hljs-comment">// [2, 4, 6]</span><br></code></pre></td></tr></tbody></table></figure><p>或</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">textBox.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">"keydown"</span>, <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`You pressed "<span class="hljs-subst">${event.key}</span>".`</span>),<br>);<br><span class="hljs-comment">// 函数返回console.log的返回值，也就是undefined</span><br></code></pre></td></tr></tbody></table></figure><h1>事件</h1><blockquote><p>本节主要参考<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="https://developer.mozilla.org/zh-CN/docs/Learn_web_development/Core/Scripting/Events">[1]</span></a></sup></p></blockquote><p><strong>事件</strong>是系统遇到的一些事情，在这个时候，系统会产生某种信号，并可以自动地采取某种行动（即运行一些代码）。</p><p>为了对一个事件做出反应，你要给它附加一个<strong>事件处理器</strong>（通常是创建的一个 JavaScript 函数），在事件发生时运行。当这样一个代码块被定义为响应一个事件而运行时，称为<strong>注册一个事件处理器</strong>。事件处理器有时候被叫做<strong>事件监听器</strong>——从我们的用意来看这两个名字是相同的，尽管严格地来说这块代码既监听也处理事件。监听器留意事件是否发生，处理器对事件发生做出回应。</p><h2 id="事件处理">事件处理</h2><h3 id="HTML-事件属性">HTML 事件属性</h3><p>直接在 HTML 元素中定义事件处理程序。</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">"alert('按钮被点击了！')"</span>&gt;</span>点击我<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h3 id="DOM-属性">DOM 属性</h3><p>通过 JavaScript 为元素的属性赋值来绑定事件处理程序。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> button = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">"button"</span>);<br>button.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) {<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">"按钮被点击了！"</span>);<br>};<br></code></pre></td></tr></tbody></table></figure><h3 id="addEventListener"><code>addEventListener</code></h3><p><strong>推荐的方式</strong>，可以为同一个事件绑定多个处理程序。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> button = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">"button"</span>);<br>button.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">"click"</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) {<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">"按钮被点击了！"</span>);<br>});<br></code></pre></td></tr></tbody></table></figure><h3 id="阻止默认行为">阻止默认行为</h3><p>有时会遇到一些情况：希望事件不执行它的默认行为。这个时候就可以在事件对象上使用<code>preventDefault()</code>方法，停止默认行为，例如：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"fname"</span>&gt;</span>First name: <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"fname"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"lname"</span>&gt;</span>Last name: <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"lname"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"submit"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"submit"</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> form = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">"form"</span>);<br><span class="hljs-keyword">const</span> fname = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">"fname"</span>);<br><span class="hljs-keyword">const</span> lname = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">"lname"</span>);<br><span class="hljs-keyword">const</span> para = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">"p"</span>);<br><br>form.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">"submit"</span>, <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> {<br>  <span class="hljs-keyword">if</span> (fname.<span class="hljs-property">value</span> === <span class="hljs-string">""</span> || lname.<span class="hljs-property">value</span> === <span class="hljs-string">""</span>) {<br>    e.<span class="hljs-title function_">preventDefault</span>();<br>    para.<span class="hljs-property">textContent</span> = <span class="hljs-string">"You need to fill in both names!"</span>;<br>  }<br>});<br></code></pre></td></tr></tbody></table></figure><h2 id="事件冒泡">事件冒泡</h2><blockquote><p>本节主要参考<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="https://developer.mozilla.org/zh-CN/docs/Learn_web_development/Core/Scripting/Event_bubbling">[2]</span></a></sup></p></blockquote><p>事件冒泡指的是，对于<strong>嵌套元素</strong>的事件，浏览器要如何处理它。例如：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"container"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>点我！<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">pre</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"output"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">pre</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>这个 HTML 语句中，<code>button</code>是嵌套在<code>div</code>中的，<code>div</code>又嵌套在<code>body</code>里，那么如果绑定一个 JS ：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> output = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">"#output"</span>);<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">handleClick</span>(<span class="hljs-params">e</span>) {<br>  output.<span class="hljs-property">textContent</span> += <span class="hljs-string">`你在 <span class="hljs-subst">${e.currentTarget.tagName}</span> 元素上进行了点击\n`</span>;<br>}<br><br><span class="hljs-keyword">const</span> container = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">"#container"</span>);<br><span class="hljs-keyword">const</span> button = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">"button"</span>);<br><br><span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">"click"</span>, handleClick);<br>container.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">"click"</span>, handleClick);<br>button.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">"click"</span>, handleClick);<br></code></pre></td></tr></tbody></table></figure><p>它的输出是：</p><blockquote><p>你在 BUTTON 元素上进行了点击</p><p>你在 DIV 元素上进行了点击</p><p>你在 BODY 元素上进行了点击</p></blockquote><p>那是因为它们互相嵌套，按了按钮以后，肯定<code>div</code>也被按了，<code>body</code>也是。但是<code>button</code>最先被监听到，就好像从最里面冒泡出来，所以叫<strong>事件冒泡</strong>。</p><p>显然，事件冒泡可能会造成一些很奇怪的问题，那么就可以用<code>event.stopPropagation()</code>修复，防止事件向其他元素传递。</p><h3 id="事件捕获">事件捕获</h3><p>事件冒泡是从里向外的，捕获就是<strong>从外向里的</strong>。事件捕获默认是关闭的，可以在<code>addEventListener()</code> 的 <code>capture</code> 选项中启用。例如：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"container"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>点我！<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">pre</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"output"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">pre</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> output = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">"#output"</span>);<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">handleClick</span>(<span class="hljs-params">e</span>) {<br>  output.<span class="hljs-property">textContent</span> += <span class="hljs-string">`你在 <span class="hljs-subst">${e.currentTarget.tagName}</span> 元素上进行了点击\n`</span>;<br>}<br><br><span class="hljs-keyword">const</span> container = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">"#container"</span>);<br><span class="hljs-keyword">const</span> button = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">"button"</span>);<br><br><span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">"click"</span>, handleClick, { <span class="hljs-attr">capture</span>: <span class="hljs-literal">true</span> });<br>container.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">"click"</span>, handleClick, { <span class="hljs-attr">capture</span>: <span class="hljs-literal">true</span> });<br>button.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">"click"</span>, handleClick);<br></code></pre></td></tr></tbody></table></figure><p>它的输出会是：</p><blockquote><p>你在 BODY 元素上进行了点击</p><p>你在 DIV 元素上进行了点击</p><p>你在 BUTTON 元素上进行了点击</p></blockquote><p>可以看到完全颠倒过来了。</p><blockquote><p>为什么要同时使用捕获和冒泡功能？在过去的坏日子里，当浏览器的交叉兼容性远不如现在时，Netscape 只使用事件捕捉，而 Internet Explorer 只使用事件冒泡。当 W3C 决定尝试将行为标准化并达成共识时，他们最终确定了这个包括这两种行为的系统，这也是现代浏览器所实现的。</p><p>默认情况下，几乎所有的事件处理程序都是在冒泡阶段注册的，这在大多数情况下更有意义。</p></blockquote><h3 id="事件委托">事件委托</h3><p>如果想在用户与大量的子元素中的任何一个互动时运行一些代码时，我们在它们的父元素上设置事件监听器，让发生在它们身上的事件冒泡到它们的父元素上，而不必在每个子元素上单独设置事件监听器。这叫做<strong>事件委托</strong>。</p><p>例如：</p><main>    <ul id="list">        <li>Item 1</li>        <li>Item 2</li>        <li>Item 3</li>    </ul><pre id="output"></pre></main><script>    const output = document.querySelector("#output");    const list = document.getElementById("list");    list.addEventListener("click", function(event) {        if (event.target.tagName === "LI") {        output.textContent = "";            output.textContent += `点击了：${event.target.textContent} \n`;        }    });</script><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">main</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"list"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Item 1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Item 2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Item 3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">pre</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"output"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">pre</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">main</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> output = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">"#output"</span>);</span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> list = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">"list"</span>);</span><br><span class="language-javascript">    list.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">"click"</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>) {</span><br><span class="language-javascript">        <span class="hljs-keyword">if</span> (event.<span class="hljs-property">target</span>.<span class="hljs-property">tagName</span> === <span class="hljs-string">"LI"</span>) {</span><br><span class="language-javascript">    output.<span class="hljs-property">textContent</span> = <span class="hljs-string">""</span>;</span><br><span class="language-javascript">            output.<span class="hljs-property">textContent</span> += <span class="hljs-string">`点击了：<span class="hljs-subst">${event.target.textContent}</span> \n`</span>;</span><br><span class="language-javascript">        }</span><br><span class="language-javascript">    });</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><blockquote><p>事件的基本属性：</p><p><code>event.type</code>：事件的类型（如 <code>click</code>、<code>keydown</code>、<code>mouseover</code> 等），例如：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">button.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">"click"</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>) {<br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(event.<span class="hljs-property">type</span>); <span class="hljs-comment">// 输出 "click"</span><br>});<br></code></pre></td></tr></tbody></table></figure><p><code>event.target</code>：触发事件的元素（即事件的目标元素），例如：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">button.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">"click"</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>) {<br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(event.<span class="hljs-property">target</span>); <span class="hljs-comment">// 输出触发事件的按钮元素</span><br>});<br></code></pre></td></tr></tbody></table></figure><p><code>event.currentTarget</code>：当前正在处理事件的元素（可能与 <code>event.target</code> 不同，尤其是在事件冒泡阶段），例如：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">div.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">"click"</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>) {<br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(event.<span class="hljs-property">currentTarget</span>); <span class="hljs-comment">// 输出绑定事件的 div 元素</span><br>});<br></code></pre></td></tr></tbody></table></figure><p><code>event.bubbles</code>：表示事件是否冒泡，例如：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">button.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">"click"</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>) {<br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(event.<span class="hljs-property">bubbles</span>); <span class="hljs-comment">// 输出 true（click 事件会冒泡）</span><br>});<br></code></pre></td></tr></tbody></table></figure><p><code>event.preventDefault()</code>：阻止事件的默认行为（如表单提交、链接跳转），例如：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">link.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">"click"</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>) {<br>   event.<span class="hljs-title function_">preventDefault</span>(); <span class="hljs-comment">// 阻止链接跳转</span><br>});<br></code></pre></td></tr></tbody></table></figure><p><code>event.stopPropagation()</code>：阻止事件继续传播（捕获或冒泡），例如</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">button.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">"click"</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>) {<br>   event.<span class="hljs-title function_">stopPropagation</span>(); <span class="hljs-comment">// 阻止事件冒泡</span><br>});<br></code></pre></td></tr></tbody></table></figure></blockquote><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://developer.mozilla.org/zh-CN/docs/Learn_web_development/Core/Scripting/Events">https://developer.mozilla.org/zh-CN/docs/Learn_web_development/Core/Scripting/Events</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://developer.mozilla.org/zh-CN/docs/Learn_web_development/Core/Scripting/Event_bubbling">https://developer.mozilla.org/zh-CN/docs/Learn_web_development/Core/Scripting/Event_bubbling</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web</tag>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Web编程学习笔记2：CSS基础样式</title>
    <link href="/2025/web2/"/>
    <url>/2025/web2/</url>
    
    <content type="html"><![CDATA[<div class="note note-primary">            <p>本笔记主要依据MDN Web Docs：<a href="https://developer.mozilla.org/zh-CN/">https://developer.mozilla.org/zh-CN/</a></p>          </div><h1>工作原理</h1><blockquote><p>本节主要参考<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="https://developer.mozilla.org/zh-CN/docs/Learn_web_development/Core/Styling_basics/What_is_CSS">[1]</span></a></sup></p></blockquote><h2 id="文件处理流程">文件处理流程</h2><p>当浏览器展示一个文件的时候，必须兼顾文件的内容和文件的样式信息，那么它处理文件的流程就是：</p><ol><li>浏览器载入 HTML 文件（比如从网络上获取）。</li><li>将 HTML 文件转化成一个 DOM（Document Object Model），DOM 是文件在计算机内存中的表现形式。</li><li>接下来，浏览器会拉取该 HTML 相关的大部分资源，比如嵌入到页面的图片、视频和 CSS 样式。JavaScript 则会稍后进行处理，简单起见，同时此节主讲 CSS，所以这里对如何加载 JavaScript 不会展开叙述。</li><li>浏览器拉取到 CSS 之后会进行解析，根据选择器的不同类型（比如 element、class、id 等等）把他们分到不同的“桶”中。浏览器基于它找到的不同的选择器，将不同的规则（基于选择器的规则，如元素选择器、类选择器、id 选择器等）应用在对应的 DOM 的节点中，并添加节点依赖的样式（这个中间步骤称为渲染树）。</li><li>上述的规则应用于渲染树之后，渲染树会依照应该出现的结构进行布局。</li><li>网页展示在屏幕上（这一步被称为着色）。</li></ol><img src="https://developer.mozilla.org/zh-CN/docs/Learn_web_development/Core/Styling_basics/What_is_CSS/rendering.svg" alt="处理文件的流程"><h2 id="DOM">DOM</h2><p>一个 DOM 有一个树形结构，**标记语言中的每一个元素、属性以及每一段文字都对应着结构树中的一个节点（Node/DOM 或 DOM node）。**节点由节点本身和其他 DOM 节点的关系定义，有些节点有父节点，有些节点有兄弟节点（同级节点）。DOM 可以帮助 CSS 样式和 HTML 文件的内容结合。</p><p>例如：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>  Let's use:<br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Cascading<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Style<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Sheets<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>它的DOM为：</p><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs text">P<br>├─ "Let's use:"<br>├─ SPAN<br>|  └─ "Cascading"<br>├─ SPAN<br>|  └─ "Style"<br>└─ SPAN<br>    └─ "Sheets"<br></code></pre></td></tr></tbody></table></figure><p>在这个时候，如果在网页中加上一些 CSS 文件加以渲染的话：</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">span</span> {<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid black;<br>  <span class="hljs-attribute">background-color</span>: lime;<br>}<br></code></pre></td></tr></tbody></table></figure><p>那么浏览器就会解析 HTML 文件，并创造一个 DOM，然后解析 CSS：浏览器会把 CSS 中的规则使用在三个<code>&lt;span&gt;</code>标签上，然后渲染出图像到屏幕。效果如图：</p><p><img src="https://images.kisechan.space/20250212155818.png" alt="使用 CSS 渲染的效果"></p><p class="note note-warning">如果 CSS 文件中出现了无法解析的属性或值，那么浏览器并不会报错，它会什么也不做，然后继续处理下一个规则。</p><h1>CSS 语法</h1><blockquote><p>本节主要参考<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="https://developer.mozilla.org/zh-CN/docs/Learn_web_development/Core/Styling_basics/Getting_started">[2]</span></a></sup></p></blockquote><h2 id="引入-CSS">引入 CSS</h2><p>在 HTML 的<code>&lt;head&gt;</code>元素中，加上<code>&lt;link rel="stylesheet" href="styles.css" /&gt;</code>，就可以引入<code>styles.css</code>文件。</p><h2 id="选择器">选择器</h2><p>CSS 的基本语法由<strong>选择器</strong>和<strong>声明块</strong>构成，例如：</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css">选择器 {<br>  属性: 值;<br>  属性: 值;<br>}<br></code></pre></td></tr></tbody></table></figure><ul><li><strong>选择器</strong>指的就是要应用这个样式的 HTML 元素</li><li><strong>声明块</strong>：用 <code>{}</code> 包裹，包含若干个<strong>声明</strong>。</li><li><strong>声明</strong>：由<strong>属性</strong>和<strong>值</strong>组成，用 <code>:</code> 分隔，以 <code>;</code> 结束。</li></ul><h3 id="元素选择器">元素选择器</h3><p>元素选择器根据 <strong>HTML 标签</strong>的名称来选择元素。例如：</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span>,<br><span class="hljs-selector-tag">li</span> {<br>  <span class="hljs-attribute">color</span>: green;<br>}<br></code></pre></td></tr></tbody></table></figure><p>这样就能把段落和列表都变成绿色。</p><div class="note note-warning">            <p>需要注意的是，如果其中一个选择器是失效的（存在语法错误），那么<strong>整个规则</strong>就会被忽略。</p>          </div><h3 id="类选择器">类选择器</h3><p>以<code>.</code>开头的选择器是类选择器，<strong>根据<code>class</code>的值</strong>进行选择。例如对于 HTML 文本：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>项目一<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"special"</span>&gt;</span>项目二<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>项目 <span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span>三<span class="hljs-tag">&lt;/<span class="hljs-name">em</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>的 CSS 样式文件：</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.special</span> {<br>  <span class="hljs-attribute">color</span>: orange;<br>  <span class="hljs-attribute">font-weight</span>: bold;<br>}<br></code></pre></td></tr></tbody></table></figure><p>就会将“项目二”渲染为粗体橘色。</p><p>也可以混合使用：</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">li</span><span class="hljs-selector-class">.special</span> {<br>  <span class="hljs-attribute">color</span>: orange;<br>  <span class="hljs-attribute">font-weight</span>: bold;<br>}<br></code></pre></td></tr></tbody></table></figure><p>就表示选中了每个<code>&lt;li&gt;</code>标签中类名为<code>special</code>的元素。</p><h3 id="id选择器">id选择器</h3><p>根据 <code>id</code> 属性选择元素，以 <code>#</code> 开头。</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-id">#header</span> {<br>  <span class="hljs-attribute">background-color</span>: yellow;<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="通配符选择器">通配符选择器</h3><p>选择所有元素，用 <code>*</code> 表示。</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css">* {<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="属性选择器">属性选择器</h3><blockquote><p>本节主要参考<sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="https://developer.mozilla.org/zh-CN/docs/Learn_web_development/Core/Styling_basics/Attribute_selectors">[3]</span></a></sup></p></blockquote><h4 id="存在与否选择器">存在与否选择器</h4><p>根据元素的属性是否存在或是否为某个值选择元素：</p><table><thead><tr><th style="text-align:center">选择器</th><th style="text-align:center">示例</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center"><code>[*attr*]</code></td><td style="text-align:center"><code>a[title]</code></td><td style="text-align:center">匹配带有一个名为*<code>attr</code>*的属性的元素——方括号里的值。</td></tr><tr><td style="text-align:center"><code>[*attr*=*value*]</code></td><td style="text-align:center"><code>a[href="https://example.com"]</code></td><td style="text-align:center">匹配带有一个名为*<code>attr</code><em>的属性的元素，其值正为</em><code>value</code>*——引号中的字符串。</td></tr><tr><td style="text-align:center"><code>[*attr*~=*value*]</code></td><td style="text-align:center"><code>p[class~="special"]</code></td><td style="text-align:center">匹配带有一个名为*<code>attr</code><em>的属性的元素，其值正为</em><code>value</code><em>，或者匹配带有一个</em><code>attr</code><em>属性的元素，其值有一个或者更多，至少有一个和</em><code>value</code>*匹配。注意，在一列中的好几个值，是用空格隔开的。</td></tr><tr><td style="text-align:center">`[<em>attr</em></td><td style="text-align:center">=<em>value</em>]`</td><td style="text-align:center">`div[lang</td></tr></tbody></table><p>例如，对于：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Attribute presence and value selectors<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Item 1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"a"</span>&gt;</span>Item 2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"a b"</span>&gt;</span>Item 3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"ab"</span>&gt;</span>Item 4<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">li</span><span class="hljs-selector-attr">[class]</span> {<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">200%</span>;<br>}<br><br><span class="hljs-selector-tag">li</span><span class="hljs-selector-attr">[class=<span class="hljs-string">"a"</span>]</span> {<br>  <span class="hljs-attribute">background-color</span>: yellow;<br>}<br><br><span class="hljs-selector-tag">li</span><span class="hljs-selector-attr">[class~=<span class="hljs-string">"a"</span>]</span> {<br>  <span class="hljs-attribute">color</span>: red;<br>}<br></code></pre></td></tr></tbody></table></figure><p>效果为：</p><p><img src="https://images.kisechan.space/attr1.png" alt=""></p><h4 id="子字符串匹配选择器">子字符串匹配选择器</h4><p>根据类值的字符串进行相应匹配。</p><table><thead><tr><th style="text-align:center">选择器</th><th style="text-align:center">示例</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center"><code>[attr^=value]</code></td><td style="text-align:center"><code>li[class^="box-"]</code></td><td style="text-align:center">匹配带有一个名为<em>attr</em>的属性的元素，其值开头为<em>value</em>子字符串。</td></tr><tr><td style="text-align:center"><code>[attr$=value]</code></td><td style="text-align:center"><code>li[class$="-box"]</code></td><td style="text-align:center">匹配带有一个名为<em>attr</em>的属性的元素，其值结尾为<em>value</em>子字符串</td></tr><tr><td style="text-align:center"><code>[attr*=value]</code></td><td style="text-align:center"><code>li[class*="box"]</code></td><td style="text-align:center">匹配带有一个名为<em>attr</em>的属性的元素，其值的字符串中的任何地方，至少出现了一次<em>value</em>子字符串。</td></tr></tbody></table><p>例如，对于：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Attribute substring matching selectors<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"a"</span>&gt;</span>Item 1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"ab"</span>&gt;</span>Item 2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"bca"</span>&gt;</span>Item 3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"bcabc"</span>&gt;</span>Item 4<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">li</span><span class="hljs-selector-attr">[class^=<span class="hljs-string">"a"</span>]</span> {<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">200%</span>;<br>}<br><br><span class="hljs-selector-tag">li</span><span class="hljs-selector-attr">[class$=<span class="hljs-string">"a"</span>]</span> {<br>  <span class="hljs-attribute">background-color</span>: yellow;<br>}<br><br><span class="hljs-selector-tag">li</span><span class="hljs-selector-attr">[class*=<span class="hljs-string">"a"</span>]</span> {<br>  <span class="hljs-attribute">color</span>: red;<br>}<br></code></pre></td></tr></tbody></table></figure><p>效果为：</p><p><img src="https://images.kisechan.space/attr2.png" alt=""></p><p>选择器进行字符串匹配时，是默认大小写敏感的。在选择器的<code>]</code>之前，加上字母<code>i</code>，就可以实现大小写不敏感。</p><h3 id="伪类选择器">伪类选择器</h3><p>选择元素的特定状态（如悬停、点击等）。</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span> {<br>  <span class="hljs-attribute">color</span>: red;<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="伪元素选择器">伪元素选择器</h3><p>选择元素的特定部分（如首行、首字母等）。</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span><span class="hljs-selector-pseudo">::first-line</span> {<br>  <span class="hljs-attribute">font-weight</span>: bold;<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="组合选择器">组合选择器</h3><h4 id="后代选择器">后代选择器</h4><p>在两个选择器中加上空格，就可以表示选择<strong>某元素的某某后代</strong>，例如：</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">li</span> <span class="hljs-selector-tag">em</span> {<br>  <span class="hljs-attribute">color</span>: rebeccapurple;<br>}<br></code></pre></td></tr></tbody></table></figure><p>该选择器将选择<code>&lt;li&gt;</code>内部的任何<code>&lt;em&gt;</code>元素（<code>&lt;li&gt;</code>的后代）。</p><h4 id="子元素选择器">子元素选择器</h4><p>选择某个元素的直接子元素。</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &gt; <span class="hljs-selector-tag">p</span> {<br><span class="hljs-attribute">color</span>: blue;<br>}<br></code></pre></td></tr></tbody></table></figure><h4 id="相邻兄弟选择器">相邻兄弟选择器</h4><p>选择紧接在某个元素后的兄弟元素。</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">h1</span> + <span class="hljs-selector-tag">p</span> {<br><span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><h4 id="通用兄弟选择器">通用兄弟选择器</h4><p>选择某个元素后的所有兄弟元素。</p> <figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"> <span class="hljs-selector-tag">h1</span> ~ <span class="hljs-selector-tag">p</span> {<br><span class="hljs-attribute">color</span>: orange;<br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="CSS-优先级">CSS 优先级</h2><blockquote><p>本节主要参考<sup id="fnref:4" class="footnote-ref"><a href="#fn:4" rel="footnote"><span class="hint--top hint--rounded" aria-label="https://developer.mozilla.org/zh-CN/docs/Learn_web_development/Core/Styling_basics/Handling_conflicts">[4]</span></a></sup></p></blockquote><h3 id="继承">继承</h3><p>继承指的是<strong>父元素和嵌套的子元素</strong>分别应用了不同的 CSS 样式，例如：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"main"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>项目 1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>    项目 2<br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>2.1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>2.2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>    项目 3<br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"special"</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>        3.1<br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>3.1.1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>3.1.2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>3.2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>应用样式：</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.main</span> {<br>  <span class="hljs-attribute">color</span>: rebeccapurple; <span class="hljs-comment">/* 设置文本颜色为 rebeccapurple（紫色） */</span><br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">2px</span> solid <span class="hljs-number">#ccc</span>; <span class="hljs-comment">/* 设置边框为 2 像素宽，颜色为浅灰色（#ccc） */</span><br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">1em</span>; <span class="hljs-comment">/* 设置元素内边距为 1em，em 是相对于当前字体大小的单位 */</span><br>}<br><br><span class="hljs-selector-class">.special</span> {<br>  <span class="hljs-attribute">color</span>: black; <span class="hljs-comment">/* 设置文本颜色为黑色 */</span><br>  <span class="hljs-attribute">font-weight</span>: bold; <span class="hljs-comment">/* 设置文本为粗体 */</span><br>}<br><br></code></pre></td></tr></tbody></table></figure><p>效果为：</p><p><img src="https://images.kisechan.space/css-inherit1.png" alt=""></p><p>可以看到，<code>项目1</code>和<code>项目2</code>继承了<code>&lt;main&gt;</code>的样式，把文字变成了紫色，而<code>项目3</code>并没有继承父类的样式，而是被它自己的样式覆盖率。一般而言，与文字有关的样式会被继承，而<strong>与布局（宽、高、边框等）有关的不会</strong>。</p><h4 id="控制继承">控制继承</h4><p>可以通过一些关键字控制继承：</p><table><thead><tr><th style="text-align:center">关键字</th><th style="text-align:center">继承方式</th></tr></thead><tbody><tr><td style="text-align:center"><code>inherit</code></td><td style="text-align:center">开启继承，让该属性和父类一样</td></tr><tr><td style="text-align:center"><code>initial</code></td><td style="text-align:center">将值设置为初始值</td></tr><tr><td style="text-align:center"><code>revert</code></td><td style="text-align:center">设置为浏览器的默认样式</td></tr><tr><td style="text-align:center"><code>revert-layer</code></td><td style="text-align:center">重置为在上一个层叠层中建立的值</td></tr><tr><td style="text-align:center"><code>unset</code></td><td style="text-align:center">重置为自然值，也就是如果属性是自然继承那么就是 <code>inherit</code>，否则和 <code>initial </code>一样</td></tr></tbody></table><p>在样式里，可以用属性名<code>all</code>来给所有的属性设置继承，比如：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">blockquote</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>当前块引用设置了样式<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">blockquote</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">blockquote</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"fix-this"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>当前块引用未设置样式<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">blockquote</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">blockquote</span> {<br>  <span class="hljs-attribute">background-color</span>: orange;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">2px</span> solid blue;<br>}<br><br><span class="hljs-selector-class">.fix-this</span> {<br>  <span class="hljs-attribute">all</span>: unset;<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="层叠">层叠</h3><p>层叠就是一个元素对应了多个 CSS 样式的时候（例如同时被类选择器和通配选择器选中了），<strong>按照优先级顺序选择</strong>按哪个样式应用。</p><p>主要规则有：</p><ol><li><p><strong>样式来源</strong>（不同来源的样式优先级）</p></li><li><p><strong>选择器的优先级</strong>（不同类型的选择器权重不同）</p></li><li><p><strong>出现顺序</strong>（后面的规则会覆盖前面的规则）</p></li></ol><div class="note note-warning">            <p>优先级顺序是仅对于单个属性而言的，例如对于某个元素，同时设置了“加粗，颜色为绿色”，“颜色为红色”，那么要比较优先级仅仅是对于“颜色”这个属性来说的，“加粗”并没有冲突，会直接应用。</p>          </div><h4 id="样式来源">样式来源</h4><p>样式来源指的是 CSS 是什么形式插入 HTML 的。优先级顺序为：</p><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">浏览器默认样式 &lt; 外部CSS &lt; 内部CSS &lt; 行内CSS &lt; `!important`<br></code></pre></td></tr></tbody></table></figure><h4 id="选择器优先级">选择器优先级</h4><p>如果一个元素被多个选择器匹配，CSS 会使用 <strong>选择器的优先级</strong> 来决定哪个规则生效。优先级规则如下：</p><table><thead><tr><th style="text-align:center">选择器类型</th><th style="text-align:center">示例</th><th style="text-align:center">权重</th></tr></thead><tbody><tr><td style="text-align:center">通配选择器</td><td style="text-align:center"><code>* {}</code></td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">元素选择器</td><td style="text-align:center"><code>div</code>, <code>p</code>, <code>h1</code></td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">类选择器、伪类</td><td style="text-align:center"><code>.main</code>, <code>:hover</code></td><td style="text-align:center">10</td></tr><tr><td style="text-align:center">ID 选择器</td><td style="text-align:center"><code>#header</code></td><td style="text-align:center">100</td></tr><tr><td style="text-align:center">行内样式</td><td style="text-align:center"><code>style="color: blue;"</code></td><td style="text-align:center">1000</td></tr><tr><td style="text-align:center"><code>!important</code></td><td style="text-align:center"><code>color: red !important;</code></td><td style="text-align:center">∞（最高）</td></tr></tbody></table><h4 id="出现顺序">出现顺序</h4><p>后出现的选择器优先级更高，例如：</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span> {<br>  <span class="hljs-attribute">font-weight</span>: bold; <span class="hljs-comment">/* 设置 p 元素加粗 */</span><br>  <span class="hljs-attribute">color</span>: blue; <span class="hljs-comment">/* 设置 p 元素颜色为蓝色 */</span><br>}<br><br><span class="hljs-selector-tag">p</span> {<br>  <span class="hljs-attribute">color</span>: green; <span class="hljs-comment">/* 设置 p 元素颜色为绿色（覆盖上面的蓝色） */</span><br>}<br></code></pre></td></tr></tbody></table></figure><p>那么，在 HTML 中，所有的段落都会被设置为字体为蓝色，且加粗。</p><h3 id="级联层">级联层</h3><p>级联层（Cascade Layer）让开发者能够将样式分配到不同的<strong>层</strong>中，每一层具有不同的优先级。当多个层的样式规则发生冲突时，浏览器会按照层的顺序来决定哪一层的样式优先生效。</p><p><code>@layer</code>是定义层的关键字，用法为：</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@layer</span> &lt;层名&gt; {<br>  <span class="hljs-comment">/* 层内的 CSS 规则 */</span><br>}<br></code></pre></td></tr></tbody></table></figure><p>对于很多个层，是按照层定义的先后顺序来决定优先级的。在层内有冲突的话，那么就是按照继承和层叠来解决冲突。</p><p>比如：</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@layer</span> reset {<br>  <span class="hljs-selector-tag">p</span> {<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">12px</span>;<br>  }<br>}<br><br><span class="hljs-keyword">@layer</span> default {<br>  <span class="hljs-selector-tag">p</span> {<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">16px</span>;<br>  }<br>}<br><br><span class="hljs-keyword">@layer</span> theme {<br>  <span class="hljs-selector-tag">p</span> {<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">18px</span>;<br>  }<br>}<br></code></pre></td></tr></tbody></table></figure><p>最终，<code>&lt;p&gt;</code>会采取<code>theme</code>层中的字体样式。</p><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://developer.mozilla.org/zh-CN/docs/Learn_web_development/Core/Styling_basics/What_is_CSS">https://developer.mozilla.org/zh-CN/docs/Learn_web_development/Core/Styling_basics/What_is_CSS</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://developer.mozilla.org/zh-CN/docs/Learn_web_development/Core/Styling_basics/Getting_started">https://developer.mozilla.org/zh-CN/docs/Learn_web_development/Core/Styling_basics/Getting_started</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://developer.mozilla.org/zh-CN/docs/Learn_web_development/Core/Styling_basics/Attribute_selectors">https://developer.mozilla.org/zh-CN/docs/Learn_web_development/Core/Styling_basics/Attribute_selectors</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:4" class="footnote-text"><span><a href="https://developer.mozilla.org/zh-CN/docs/Learn_web_development/Core/Styling_basics/Handling_conflicts">https://developer.mozilla.org/zh-CN/docs/Learn_web_development/Core/Styling_basics/Handling_conflicts</a><a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web</tag>
      
      <tag>HTML</tag>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Web编程学习笔记1：HTML基础语法</title>
    <link href="/2025/web1/"/>
    <url>/2025/web1/</url>
    
    <content type="html"><![CDATA[<div class="note note-primary">            <p>本笔记主要依据MDN Web Docs：<a href="https://developer.mozilla.org/zh-CN/">https://developer.mozilla.org/zh-CN/</a></p>          </div><h1>HTML元素</h1><blockquote><p>本节主要参考<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="https://developer.mozilla.org/zh-CN/docs/Learn_web_development/Core/Structuring_content/Basic_HTML_syntax">[1]</span></a></sup></p></blockquote><p>HTML（HyperText Markup Language，超文本标记语言）是一种用于了解浏览器如何组织页面的标记语言。HTML可复杂、可简单，一切都取决于网络开发者。HTML由一系列的元素组成，这些元素可以用来包围或标记不同部分的内容，从而以某种方式考虑工作。结尾的标签可以使超链接变成超链接，以连接到另一个页面；使字体呈现斜体等。</p><h2 id="元素的构成">元素的构成</h2><p>HTML由HTML元素构成。一个HTML元素一般有三部分：</p><ul><li><strong>开始标签</strong>（Opening Tag）：包含元素的，被<code>&lt;</code>、<code>&gt;</code>所包围。开头标签包含元素开始或开始生效的位置。例如<code>&lt;p&gt;</code>。</li><li><strong>内容</strong>（Content）：元素的内容。</li><li><strong>结束标签</strong>（Closing Tag）：与开始标签相似，只是其在元素名之前包含了一个斜杠<code>/</code>。这引发了该元素的结束。不包含关闭标签可能会产生奇怪的结果。例如<code>&lt;/p&gt;</code>。</li></ul><p>一个元素可以被嵌套到其他元素中。</p><h2 id="块级元素和内联元素">块级元素和内联元素</h2><ul><li><strong>块级元素</strong>在页面中以块的形式展现。一个块级元素出现在它前面的内容之后的新行上。任何跟在块级元素后面的内容也会出现在新的行上。块级元素通常是页面上的结构元素。例如，一个块级元素可能代表标题、段落、列表、导航菜单或页脚。一个块级元素不会嵌套在一个内联元素里面，但它可能嵌套在另一个块级元素里面。</li><li><strong>内联元素</strong>通常出现在块级元素中并环绕文档内容的一小部分，而不是一整个段落或者一组内容。内联元素不会导致文本换行。它通常与文本一起使用，例如，<code>&lt;a&gt;</code> 元素创建一个超链接，<code>&lt;em&gt;</code> 和<code> &lt;strong&gt;</code> 等元素创建强调。</li></ul><h2 id="空元素">空元素</h2><p>如果要在此位置插入/嵌入一些东西，就会用到一些没有内容和结束标签的元素，所以它们被叫做称为<strong>空元素</strong>。例如：元素 <code>&lt;img&gt;</code> 是用来在页面插入一张指定的图片。例如：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span></span><br><span class="hljs-tag">  <span class="hljs-attr">src</span>=<span class="hljs-string">"https://roy-tian.github.io/learning-area/extras/getting-started-web/beginner-html-site/images/firefox-icon.png"</span></span><br><span class="hljs-tag">  <span class="hljs-attr">alt</span>=<span class="hljs-string">"Firefox 图标"</span> /&gt;</span><br><br></code></pre></td></tr></tbody></table></figure><p>效果如下：</p><p><img src="https://roy-tian.github.io/learning-area/extras/getting-started-web/beginner-html-site/images/firefox-icon.png" alt="Firefox 图标"></p><div class="note note-warning">            <p>注意，HTML 中，<strong>无需在一个空元素的标签末尾添加 <code>/</code></strong>，例如 <code>&lt;img src="images/cat.jpg" alt="cat" /&gt;</code>。然而，这也是一种有效的语法，当你希望你的 HTML 是有效的 XML 时，这么做也没问题。</p>          </div><h2 id="属性">属性</h2><p>元素可以拥有<strong>属性</strong>，以包含元素的额外信息，这些信息不会出现在实际的内容中，一般作为一个识别名称，以后为元素设置样式信息时更加方便。例如：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">attribute-name</span>=<span class="hljs-string">"foo"</span>&gt;</span><br>    bar<br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>如果一个元素有多个属性，那么就要用空格分开。<code>&lt;p attribute-name="foo"&gt;</code>中，<code>attribute-name</code>就是属性的名字，引号内的<code>foo</code>是该属性的值。</p><p>属性值最好加上引号<code>""</code>或<code>''</code>，否则如果属性值中间存在空格，就不能被识别出来。</p><h3 id="a-标签的属性"><code>&lt;a&gt;</code>标签的属性</h3><p>标签 <code>&lt;a&gt;</code>，即<strong>anchor</strong>（翻译为锚），用于让其包裹的内容成为一个<strong>超链接</strong>。<code>&lt;a&gt;</code>元素可以添加多种属性：</p><ul><li><p><code>href</code>：是“超文本引用”（Hypertext Reference）的缩写，用于声明超链接的 web 地址。例如 <code>href="https://www.mozilla.org/"</code>。</p></li><li><p><code>title</code>：为超链接声明额外的信息，比如你将链接至的那个页面。例如 <code>title="The Mozilla homepage"</code>。当鼠标悬停在超链接上面时，这部分信息将以工具提示的形式显示。</p></li><li><p><code>target</code>：用于指定链接如何呈现出来。例如，<code>target="_blank"</code> 将在新标签页中显示链接。如果你希望在当前标签页显示链接，忽略这个属性即可。</p></li></ul><h2 id="实体引用">实体引用</h2><p>在HTML中，字符 <code>&lt;</code>、<code>&gt;</code>、<code>"</code>、<code>'</code> 和 <code>&amp;</code> 等是特殊字符，它们是HTML语法自身的一部分。某些特殊字符（如版权符号）也难以从键盘中输入。另外在HTML中多个空格会被合并成一个。</p><p>那么，要想在HTML中引入它们，就要使用<strong>实体引用</strong>（Entity Reference）方法。实体引用通常以 <code>&amp;</code> 开头，以 <code>;</code> 结尾，格式如下：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">&amp;实体名称;<br></code></pre></td></tr></tbody></table></figure><p>或等效的：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">&amp;#实体编号;<br></code></pre></td></tr></tbody></table></figure><ul><li><strong>实体名称</strong>：易于记忆的名称（如 <code>&amp;lt;</code> 表示 <code>&lt;</code>）。</li><li><strong>实体编号</strong>：字符的Unicode编号（如 <code>&amp;#60;</code> 表示 <code>&lt;</code>）。</li></ul><p>常见的引用有：</p><table><thead><tr><th style="text-align:center">字符</th><th style="text-align:center">描述</th><th style="text-align:center">实体名称</th><th style="text-align:center">实体编号</th></tr></thead><tbody><tr><td style="text-align:center"><code>&lt;</code></td><td style="text-align:center">小于号</td><td style="text-align:center"><code>&amp;lt;</code></td><td style="text-align:center"><code>&amp;#60;</code></td></tr><tr><td style="text-align:center"><code>&gt;</code></td><td style="text-align:center">大于号</td><td style="text-align:center"><code>&amp;gt;</code></td><td style="text-align:center"><code>&amp;#62;</code></td></tr><tr><td style="text-align:center"><code>&amp;</code></td><td style="text-align:center">和号</td><td style="text-align:center"><code>&amp;amp;</code></td><td style="text-align:center"><code>&amp;#38;</code></td></tr><tr><td style="text-align:center"><code>"</code></td><td style="text-align:center">双引号</td><td style="text-align:center"><code>&amp;quot;</code></td><td style="text-align:center"><code>&amp;#34;</code></td></tr><tr><td style="text-align:center"><code>'</code></td><td style="text-align:center">单引号</td><td style="text-align:center"><code>&amp;apos;</code></td><td style="text-align:center"><code>&amp;#39;</code></td></tr><tr><td style="text-align:center"><code>©</code></td><td style="text-align:center">版权符号</td><td style="text-align:center"><code>&amp;copy;</code></td><td style="text-align:center"><code>&amp;#169;</code></td></tr><tr><td style="text-align:center"><code>®</code></td><td style="text-align:center">注册商标符号</td><td style="text-align:center"><code>&amp;reg;</code></td><td style="text-align:center"><code>&amp;#174;</code></td></tr><tr><td style="text-align:center"><code> </code></td><td style="text-align:center">非换行空格</td><td style="text-align:center"><code>&amp;nbsp;</code></td><td style="text-align:center"><code>&amp;#160;</code></td></tr><tr><td style="text-align:center"><code>€</code></td><td style="text-align:center">欧元符号</td><td style="text-align:center"><code>&amp;euro;</code></td><td style="text-align:center"><code>&amp;#8364;</code></td></tr></tbody></table><h2 id="注释">注释</h2><p>HTML的注释由<code>&lt;!--</code> 和 <code>--&gt;</code> 包裹起来，如：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我在注释外！<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- &lt;p&gt;我在注释内！&lt;/p&gt; --&gt;</span><br></code></pre></td></tr></tbody></table></figure><h1>HTML文档结构</h1><p>一个典型的HTML文件内容：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!doctype <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"zh-CN"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"utf-8"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>我的测试站点<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这是我的页面<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>其中主要有以下几部分：</p><ol><li><p><code>&lt;!DOCTYPE html&gt;</code>: 声明文档类型。早期的 HTML（大约 1991-1992 年）文档类型声明类似于链接，规定了 HTML 页面必须遵从的良好规则，能自动检测错误和其他有用的东西。文档类型使用类似于这样：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">"-//W3C//DTD XHTML 1.0 Transitional//EN"</span> <span class="hljs-string">"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>文档类型是一个历史遗留问题，需要包含它才能使其他东西正常工作。现在，只需要知道 <code>&lt;!DOCTYPE html&gt;</code> 是最短的有效文档声明。</p></li><li><p><code>&lt;html&gt;&lt;/html&gt;</code>: <code>&lt;html&gt;</code>元素，包裹了页面中所有的内容，有时被称为根元素。<code>lang="zh-CN"</code>属性用于指定语言，主要是方便搜索引擎搜索。</p></li><li><p><code>&lt;head&gt;&lt;/head&gt;</code>: <code>&lt;head&gt;</code> 元素，是一个容器，它包含了所有你想包含在 HTML 页面中但<strong>不在 HTML 页面中显示</strong>的内容，包括页面描述、CSS 样式、字符集声明等等。</p></li><li><p><code>&lt;meta charset="utf-8"&gt;</code>: <code>&lt;meta&gt;</code> 元素。这个元素代表了不能由其他 HTML 元相关元素表示的元数据，比如<code>&lt;base&gt;</code>、<code>&lt;link&gt;</code>、<code>&lt;script&gt;</code>、<code>&lt;style&gt;</code> 或<code> &lt;title&gt;</code>。<code>charset</code> 属性将你的文档的字符集设置为 <code>utf-8</code>，有了这个设置，页面现在可以处理它可能包含的任何文本内容。没有理由不对它进行设置，它可以帮助避免以后的一些问题。</p></li><li><p><code>&lt;title&gt;&lt;/title&gt;</code>: <code>&lt;title&gt;</code>元素，设置页面的标题，也就是出现在该页面加载的浏览器标签中的内容。当页面被加入书签时，页面标题也被用来描述该页面。</p></li><li><p><code>&lt;body&gt;&lt;/body&gt;</code>: <code>&lt;body&gt;</code>元素。包含了你访问页面时所有显示在页面上的内容，包含文本、图片、视频、游戏、可播放音频轨道等等。</p></li></ol><h2 id="head-元素"><code>&lt;head&gt;</code>元素</h2><blockquote><p>本节主要参考<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="https://developer.mozilla.org/zh-CN/docs/Learn_web_development/Core/Structuring_content/Webpage_metadata">[2]</span></a></sup></p></blockquote><p><code>&lt;head&gt;</code>元素保存的是网站的一些元数据。</p><h3 id="title-元素"><code>&lt;title&gt;</code>元素</h3><p><code>&lt;title&gt;</code>用于保存HTML页面的标题。</p><h3 id="meta-元素"><code>&lt;meta&gt;</code>元素</h3><p><code>&lt;meta&gt;</code>元素用于保存元数据。<strong>元数据</strong>（Metadata），是用来描述其他数据的信息， 即“关于数据的数据”，相当于数据的“标签”或“说明书”。</p><p>HTML中涉及到的元数据主要有：</p><ul><li><code>&lt;meta charset="utf-8"&gt;</code>指定了网页的字符编码。</li><li><code>&lt;meta name="author" content="Chris Mills"&gt;</code>指定了网页的作者</li><li><code>&lt;meta name="description" content="The MDN Web Docs Learning Area aims to provide complete beginners to the Web with all they need to know to get started with developing web sites and applications."&gt;</code>指定了网站的描述信息。</li></ul><h3 id="link-元素"><code>&lt;link&gt;</code>元素</h3><p><code>&lt;link&gt;</code>标签主要用于引入或关联外部资源，如样式表、图标、字体等。常见的属性有：</p><table><thead><tr><th style="text-align:center">属性</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center"><code>rel</code></td><td style="text-align:center">用于定义当前文档与链接资源之间的关系（Relationship），如 <code>stylesheet</code>、<code>icon</code>、<code>preload</code> 等。</td></tr><tr><td style="text-align:center"><code>href</code></td><td style="text-align:center">指定链接资源的路径。</td></tr><tr><td style="text-align:center"><code>type</code></td><td style="text-align:center">指定链接资源的MIME类型（如 <code>text/css</code>、<code>image/x-icon</code> 等）。</td></tr><tr><td style="text-align:center"><code>as</code></td><td style="text-align:center">用于 <code>preload</code>，指定资源的类型（如 <code>image</code>、<code>font</code>、<code>script</code> 等）。</td></tr><tr><td style="text-align:center"><code>hreflang</code></td><td style="text-align:center">指定链接资源的语言（用于 <code>alternate</code>）。</td></tr><tr><td style="text-align:center"><code>sizes</code></td><td style="text-align:center">指定图标的大小（用于 <code>icon</code>）。</td></tr></tbody></table><h3 id="script-元素"><code>&lt;script&gt;</code> 元素</h3><p><code>&lt;script&gt;</code> 元素是HTML中用于嵌入或引用 <strong>JavaScript 代码</strong> 的标签。通过 <code>&lt;script&gt;</code> 标签，可以在网页中实现动态功能、交互效果或数据处理，既可以包含直接编写的JavaScript代码，也可以引用外部的JavaScript文件。例如：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-title function_">alert</span>(<span class="hljs-string">"Hello, World!"</span>);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>或：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"scripts.js"</span> <span class="hljs-attr">defer</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>引入时最好加上 <code>defer</code> （与<code>async</code>相反）以告诉浏览器在解析完成 HTML 后再加载 JavaScript。这样可以确保在加载脚本之前浏览器已经解析了所有的 HTML 内容。这样你就不会因为 JavaScript 试图访问页面上不存在的 HTML 元素而产生错误。</p><h2 id="内容层次和效果">内容层次和效果</h2><blockquote><p>本节主要参考<sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="https://developer.mozilla.org/zh-CN/docs/Learn_web_development/Core/Structuring_content/Headings_and_paragraphs">[3]</span></a></sup></p></blockquote><h3 id="段落和标题">段落和标题</h3><p>在 HTML 中，每个段落是通过<code>&lt;p&gt;</code> 元素标签进行定义的，而一共有六种标题元素标签——h1、h2、h3、h4、h5 和 h6。每个元素代表文档中不同级别的内容：<code>&lt;h1&gt;</code> 表示主标题，<code>&lt;h2&gt;</code> 表示二级子标题，<code>&lt;h3&gt;</code> 表示三级子标题，依此类推。</p><p>如果没有标题和段落标签，那么HTML文件中<code>&lt;body&gt;</code>元素的所有文字都会糊成一坨。</p><h3 id="列表">列表</h3><h4 id="无序列表">无序列表</h4><p>无序列表由<code>&lt;ul&gt;</code>标签开始，其中的每一个元素都由<code>&lt;li&gt;</code>括起，例如：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>豆浆<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>油条<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>豆汁<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>焦圈<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>效果为：</p><ul>  <li>豆浆</li>  <li>油条</li>  <li>豆汁</li>  <li>焦圈</li></ul><h4 id="有序列表">有序列表</h4><p>有序列表则是由<code>&lt;ol&gt;</code>标签开始，别的和无序列表一样，例如：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>沿这条路走到头<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>右转<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>直行穿过第一个十字路口<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>在第三个十字路口处左转<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>继续走 300 米，学校就在你的右手边<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>效果为：</p><ol>  <li>沿这条路走到头</li>  <li>右转</li>  <li>直行穿过第一个十字路口</li>  <li>在第三个十字路口处左转</li>  <li>继续走 300 米，学校就在你的右手边</li></ol><h4 id="嵌套列表">嵌套列表</h4><p>列表可以嵌套，例如：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>    先用蛋白一个、盐半茶匙及淀粉两大匙搅拌均匀，调成“腌料”，鸡胸肉切成约一厘米见方的碎丁并用“腌料”搅拌均匀，腌渍半小时。<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>    用酱油一大匙、淀粉水一大匙、糖半茶匙、盐四分之一茶匙、白醋一茶匙、蒜末半茶匙调拌均匀，调成“综合调味料”。<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>    鸡丁腌好以后，色拉油下锅烧热，先将鸡丁倒入锅内，用大火快炸半分钟，炸到变色之后，捞出来沥干油汁备用。<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>    在锅里留下约两大匙油，烧热后将切好的干辣椒下锅，用小火炒香后，再放入花椒粒和葱段一起爆香。随后鸡丁重新下锅，用大火快炒片刻后，再倒入“综合调味料”继续快炒。<br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>        如果你采用正宗川菜做法，最后只需加入花生米，炒拌几下就可以起锅了。<br>      <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>如果你在北方，可加入黄瓜丁、胡萝卜丁和花生米，翻炒后起锅。<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>效果为：</p><ol>  <li>    先用蛋白一个、盐半茶匙及淀粉两大匙搅拌均匀，调成“腌料”，鸡胸肉切成约一厘米见方的碎丁并用“腌料”搅拌均匀，腌渍半小时。  </li>  <li>    用酱油一大匙、淀粉水一大匙、糖半茶匙、盐四分之一茶匙、白醋一茶匙、蒜末半茶匙调拌均匀，调成“综合调味料”。  </li>  <li>    鸡丁腌好以后，色拉油下锅烧热，先将鸡丁倒入锅内，用大火快炸半分钟，炸到变色之后，捞出来沥干油汁备用。  </li>  <li>    在锅里留下约两大匙油，烧热后将切好的干辣椒下锅，用小火炒香后，再放入花椒粒和葱段一起爆香。随后鸡丁重新下锅，用大火快炒片刻后，再倒入“综合调味料”继续快炒。    <ul>      <li>        如果你采用正宗川菜做法，最后只需加入花生米，炒拌几下就可以起锅了。      </li>      <li>如果你在北方，可加入黄瓜丁、胡萝卜丁和花生米，翻炒后起锅。</li>    </ul>  </li></ol><h3 id="文字效果">文字效果</h3><h4 id="em-元素"><code>&lt;em&gt;</code>元素</h4><p><code>&lt;em&gt;</code>标签用于<strong>强调</strong>（emphasis），浏览器默认会将它渲染为斜体，但是它的原意并不是单纯的斜体效果。</p><blockquote><p>如果仅仅为了获得斜体样式而不增加语义辅助，你应该使用 <code>&lt;span&gt; </code>元素和一些 CSS，或者是 <code>&lt;i&gt; </code>元素</p></blockquote><p>例如：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我很<span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span>庆幸<span class="hljs-tag">&lt;/<span class="hljs-name">em</span>&gt;</span>你没有<span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span>迟到<span class="hljs-tag">&lt;/<span class="hljs-name">em</span>&gt;</span>。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>效果为：</p><p>我很<em>庆幸</em>你没有<em>迟到</em>。</p><h4 id="strong-元素"><code>&lt;strong&gt;</code>元素</h4><p><code>&lt;strong&gt;</code>标签用于表示<strong>强烈的重要性</strong>（strong importance），浏览器会默认将它渲染为粗体，但是和<code>&lt;em&gt;</code>一样，最好不要把它当做粗体用。</p><p>这两种标签可以互相嵌套，例如：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>  这杯液体<span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>毒性很大<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span>——如果饮用了它，你<span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>可能<span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span>会死<span class="hljs-tag">&lt;/<span class="hljs-name">em</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span>。<br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>效果为：</p><p>  这杯液体<strong>毒性很大</strong>——如果饮用了它，你<strong>可能<em>会死</em></strong>。</p><h4 id="表象元素">表象元素</h4><p><strong>表象元素（Presentational Elements）</strong> 是指在HTML中主要用于控制内容外观（如样式、布局等）的元素，且不同于上面的两种，并非用于描述内容的语义或结构。主要有：</p><table><thead><tr><th style="text-align:center">元素</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center"><code>&lt;b&gt;</code></td><td style="text-align:center">加粗</td></tr><tr><td style="text-align:center"><code>&lt;i&gt;</code></td><td style="text-align:center">斜体</td></tr><tr><td style="text-align:center"><code>&lt;u&gt;</code></td><td style="text-align:center">添加下划线</td></tr><tr><td style="text-align:center"><code>&lt;s&gt;</code></td><td style="text-align:center">添加删除线</td></tr><tr><td style="text-align:center"><code>&lt;font&gt;</code></td><td style="text-align:center">设置文本的字体、颜色和大小（已废弃，不推荐使用）</td></tr><tr><td style="text-align:center"><code>&lt;center&gt;</code></td><td style="text-align:center">将内容居中显示（已废弃，不推荐使用）</td></tr><tr><td style="text-align:center"><code>&lt;big&gt;</code></td><td style="text-align:center">增大文本大小（已废弃，不推荐使用）</td></tr><tr><td style="text-align:center"><code>&lt;small&gt;</code></td><td style="text-align:center">减小文本大小</td></tr><tr><td style="text-align:center"><code>&lt;strike&gt;</code></td><td style="text-align:center">为文本添加删除线（已废弃，不推荐使用）</td></tr><tr><td style="text-align:center"><code>&lt;dl&gt;</code></td><td style="text-align:center">创建描述列表（definition list）</td></tr><tr><td style="text-align:center"><code>&lt;dt&gt;</code></td><td style="text-align:center">创建描述列表的术语（即名称，term）部分</td></tr><tr><td style="text-align:center"><code>&lt;dd&gt;</code></td><td style="text-align:center">创建描述列表的描述（definition）部分</td></tr></tbody></table><p>例如：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 学名 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>  红喉北蜂鸟（学名：<span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>Archilocus colubris<span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span>）是北美东部最常见的蜂鸟品种。<br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 舶来词 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>  菜单上有好多舶来词汇，比如 <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"uk-latn"</span>&gt;</span>vatrushka<span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span>（东欧乳酪面包）、<span class="hljs-tag">&lt;<span class="hljs-name">i</span></span><br><span class="hljs-tag">    <span class="hljs-attr">lang</span>=<span class="hljs-string">"id"</span></span><br><span class="hljs-tag">    &gt;</span>nasi goreng&lt;/i<br>  &gt;（印尼炒饭）以及 <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"fr"</span>&gt;</span>soupe à l'oignon<span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span>（法式洋葱汤）。<br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 已知的错误书写 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>总有一天我会改掉写<span class="hljs-tag">&lt;<span class="hljs-name">u</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"spelling-error"</span>&gt;</span>措字<span class="hljs-tag">&lt;/<span class="hljs-name">u</span>&gt;</span>的毛病。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 在定义中，被定义的术语 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dl</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>语义化 HTML<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>根据元素的<span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>语义<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span>意义而不是外观来使用它们。<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dl</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>效果为：</p><!-- 学名 --><p>  红喉北蜂鸟（学名：<i>Archilocus colubris</i>）是北美东部最常见的蜂鸟品种。</p><!-- 舶来词 --><p>  菜单上有好多舶来词汇，比如 <i lang="uk-latn">vatrushka</i>（东欧乳酪面包）、<i lang="id">nasi goreng</i>（印尼炒饭）以及 <i lang="fr">soupe à l'oignon</i>（法式洋葱汤）。</p><!-- 已知的错误书写 --><p>总有一天我会改掉写<u class="spelling-error">措字</u>的毛病。</p><!-- 在定义中，被定义的术语 --><dl>  <dt>语义化 HTML</dt>  <dd>根据元素的<b>语义</b>意义而不是外观来使用它们。</dd></dl><p>现代网页开发中，更推荐使用CSS来控制样式和布局，而HTML应专注于内容的语义和结构。</p><h3 id="无语义元素">无语义元素</h3><p>对于一些要组织的项目或要包装的内容，现有的语义元素均不能很好对应。有时候你可能只想将一组元素作为一个单独的实体来修饰来响应单一的用 CSS 或 JavaScript。为了应对这种情况，HTML 提供了 <code>&lt;div&gt;</code> 和<code>&lt;span&gt;</code>元素。应配合使用 class 属性提供一些标签，使这些元素能易于查询。</p><h4 id="span-元素"><code>&lt;span&gt;元素</code></h4><p><code>&lt;span&gt;</code> 是一个内联的（inline）无语义元素，最好只用于无法找到更好的语义元素来包含内容时，或者不想增加特定的含义时。例如：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span> 国王喝得酩酊大醉，在凌晨 1 点时才回到自己的房间，踉跄地走过门口。<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"editor-note"</span> &gt;</span>[编辑批注：此刻舞台灯光应变暗]&lt;/span &gt;. <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span> <br></code></pre></td></tr></tbody></table></figure><blockquote><p>这里，“编辑批注”仅仅是对舞台剧导演提供额外指引；没有具体语义。对于视力正常的用户，CSS应将批注内容与主内容稍微隔开一些。</p></blockquote><p>未被CSS渲染的效果为：</p><p> 国王喝得酩酊大醉，在凌晨 1 点时才回到自己的房间，踉跄地走过门口。<span class="editor-note">[编辑批注：此刻舞台灯光应变暗]</span>. </p> <h4 id="div-元素"><code>&lt;div&gt;</code>元素</h4><p><code>&lt;div&gt;</code>是一个块级无语义元素，应仅用于找不到更好的块级元素时，或者不想增加特定的意义时。<a href="#%E5%9D%97%E7%BA%A7%E5%85%83%E7%B4%A0%E5%92%8C%E5%86%85%E8%81%94%E5%85%83%E7%B4%A0">跳转到块级元素和内联元素章节。</a></p><p>div 元素非常便利但容易被滥用。由于它们没有语义值，会使 HTML 代码变得混乱。</p><h3 id="换行和分割线">换行和分割线</h3><h4 id="br-标签"><code>&lt;br&gt;</code>标签</h4><p><code>&lt;br&gt;</code>能够在段落中换行。<code>&lt;br&gt;</code> 是唯一能够生成多个短行结构的元素。例如：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>  从前有个人叫小高<span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>  他说写 HTML 感觉最好<span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>  但他写的代码结构语义一团糟<span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>  他写的标签谁也懂不了。<br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>效果为：</p><p>  从前有个人叫小高<br>  他说写 HTML 感觉最好<br>  但他写的代码结构语义一团糟<br>  他写的标签谁也懂不了。</p><h4 id="hr-标签"><code>&lt;hr&gt;</code> 标签</h4><p><code>&lt;hr&gt;</code> 元素在文档中生成一条水平分割线。例如：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>  原来这唐僧是个慈悯的圣僧。他见行者哀告，却也回心转意道：“既如此说，且饶你这一次。再休无礼。如若仍前作恶，这咒语颠倒就念二十遍！”行者道：“三十遍也由你，只是我不打人了。”却才伏侍唐僧上马，又将摘来桃子奉上。唐僧在马上也吃了几个，权且充饥。<br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>  却说那妖精，脱命升空。原来行者那一棒不曾打杀妖精，妖精出神去了。他在那云端里，咬牙切齿，暗恨行者道：“几年只闻得讲他手段，今日果然话不虚传。那唐僧已此不认得我，将要吃饭。若低头闻一闻儿，我就一把捞住，却不是我的人了。不期被他走来，弄破我这勾当，又几乎被他打了一棒。若饶了这个和尚，诚然是劳而无功也。我还下去戏他一戏。”<br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>效果为：</p><p>  原来这唐僧是个慈悯的圣僧。他见行者哀告，却也回心转意道：“既如此说，且饶你这一次。再休无礼。如若仍前作恶，这咒语颠倒就念二十遍！”行者道：“三十遍也由你，只是我不打人了。”却才伏侍唐僧上马，又将摘来桃子奉上。唐僧在马上也吃了几个，权且充饥。</p><hr><p>  却说那妖精，脱命升空。原来行者那一棒不曾打杀妖精，妖精出神去了。他在那云端里，咬牙切齿，暗恨行者道：“几年只闻得讲他手段，今日果然话不虚传。那唐僧已此不认得我，将要吃饭。若低头闻一闻儿，我就一把捞住，却不是我的人了。不期被他走来，弄破我这勾当，又几乎被他打了一棒。若饶了这个和尚，诚然是劳而无功也。我还下去戏他一戏。”</p><h3 id="引用">引用</h3><p>如果一个块级内容（一个段落、多个段落、一个列表等）从其他地方被引用，你应该把它用 <code>&lt;blockquote&gt;</code> 元素包裹起来表示，并且在 <code>cite</code> 属性里用url来指向引用的资源。例如：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Here is a blockquote:<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">blockquote</span></span><br><span class="hljs-tag">  <span class="hljs-attr">cite</span>=<span class="hljs-string">"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/blockquote"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>    The <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>HTML <span class="hljs-tag">&lt;<span class="hljs-name">code</span>&gt;</span><span class="hljs-symbol">&amp;lt;</span>blockquote<span class="hljs-symbol">&amp;gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">code</span>&gt;</span> Element<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span> (or<br>    <span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span>HTML Block Quotation Element<span class="hljs-tag">&lt;/<span class="hljs-name">em</span>&gt;</span>) indicates that the enclosed text is<br>    an extended quotation.<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">blockquote</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>效果为：</p><p>Here is a blockquote:</p><blockquote cite="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/blockquote">  <p>    The <strong>HTML <code>&lt;blockquote&gt;</code> Element</strong> (or    <em>HTML Block Quotation Element</em>) indicates that the enclosed text is    an extended quotation.  </p></blockquote><p>行内引用同理：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>  The quote element — <span class="hljs-tag">&lt;<span class="hljs-name">code</span>&gt;</span><span class="hljs-symbol">&amp;lt;</span>q<span class="hljs-symbol">&amp;gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">code</span>&gt;</span> — is<br>  <span class="hljs-tag">&lt;<span class="hljs-name">q</span> <span class="hljs-attr">cite</span>=<span class="hljs-string">"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/q"</span></span><br><span class="hljs-tag">    &gt;</span>intended for short quotations that don't require paragraph breaks.&lt;/q<br>  &gt;<br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>效果为：</p><p>  The quote element — <code>&lt;q&gt;</code> — is  <q cite="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/q">intended for short quotations that don't require paragraph breaks.</q></p><p>不过，浏览器默认不会显示<code>cite</code>的内容，如果想要显示，就要用到<code>&lt;cite&gt;</code>标签：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>  According to the<br>  <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/zh-CN/docs/Web/HTML/Element/blockquote"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">cite</span>&gt;</span>MDN blockquote page<span class="hljs-tag">&lt;/<span class="hljs-name">cite</span>&gt;</span>&lt;/a<br>  &gt;:<br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">blockquote</span></span><br><span class="hljs-tag">  <span class="hljs-attr">cite</span>=<span class="hljs-string">"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/blockquote"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>    The <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>HTML <span class="hljs-tag">&lt;<span class="hljs-name">code</span>&gt;</span><span class="hljs-symbol">&amp;lt;</span>blockquote<span class="hljs-symbol">&amp;gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">code</span>&gt;</span> Element<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span> (or<br>    <span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span>HTML Block Quotation Element<span class="hljs-tag">&lt;/<span class="hljs-name">em</span>&gt;</span>) indicates that the enclosed text is<br>    an extended quotation.<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">blockquote</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>  The quote element — <span class="hljs-tag">&lt;<span class="hljs-name">code</span>&gt;</span><span class="hljs-symbol">&amp;lt;</span>q<span class="hljs-symbol">&amp;gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">code</span>&gt;</span> — is<br>  <span class="hljs-tag">&lt;<span class="hljs-name">q</span> <span class="hljs-attr">cite</span>=<span class="hljs-string">"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/q"</span></span><br><span class="hljs-tag">    &gt;</span>intended for short quotations that don't require paragraph breaks.&lt;/q<br>  &gt;<br>  — <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/zh-CN/docs/Web/HTML/Element/q"</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">cite</span>&gt;</span>MDN q page<span class="hljs-tag">&lt;/<span class="hljs-name">cite</span>&gt;</span>&lt;/a<br>  &gt;.<br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>效果为：</p><p>  According to the  <a href="/zh-CN/docs/Web/HTML/Element/blockquote">    <cite>MDN blockquote page</cite></a>:</p><blockquote cite="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/blockquote">  <p>    The <strong>HTML <code>&lt;blockquote&gt;</code> Element</strong> (or    <em>HTML Block Quotation Element</em>) indicates that the enclosed text is    an extended quotation.  </p></blockquote><p>  The quote element — <code>&lt;q&gt;</code> — is  <q cite="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/q">intended for short quotations that don't require paragraph breaks.</q>  — <a href="/zh-CN/docs/Web/HTML/Element/q"> <cite>MDN q page</cite></a>.</p><h3 id="缩写">缩写</h3><p>使用<code>&lt;abbr&gt;</code>标签，用来表示缩写，例如：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>  我们使用<br>  <span class="hljs-tag">&lt;<span class="hljs-name">abbr</span> <span class="hljs-attr">title</span>=<span class="hljs-string">"超文本标记语言（Hyper text Markup Language）"</span>&gt;</span>HTML<span class="hljs-tag">&lt;/<span class="hljs-name">abbr</span>&gt;</span><br>  来组织网页文档。<br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>效果为：</p><p>  我们使用  <abbr title="超文本标记语言（Hyper text Markup Language）">HTML</abbr>  来组织网页文档。</p><h3 id="联系方式">联系方式</h3><p><code>&lt;address&gt;</code>标签用于表示联系方式，例如：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">address</span>&gt;</span>Chris Mills, Manchester, The Grim North, UK<span class="hljs-tag">&lt;/<span class="hljs-name">address</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><address>Chris Mills, Manchester, The Grim North, UK</address><h3 id="上下标">上下标</h3><p><code>&lt;sup&gt;</code>和<code>&lt;sub&gt;</code>标签用于表示上下标，例如：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>  咖啡因的化学方程式是 C<span class="hljs-tag">&lt;<span class="hljs-name">sub</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">sub</span>&gt;</span>H<span class="hljs-tag">&lt;<span class="hljs-name">sub</span>&gt;</span>10<span class="hljs-tag">&lt;/<span class="hljs-name">sub</span>&gt;</span>N<span class="hljs-tag">&lt;<span class="hljs-name">sub</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">sub</span>&gt;</span>O<span class="hljs-tag">&lt;<span class="hljs-name">sub</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">sub</span>&gt;</span>。<br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>如果 x<span class="hljs-tag">&lt;<span class="hljs-name">sup</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">sup</span>&gt;</span> 的值为 9，那么 x 的值必为 3 或 -3。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>效果为：</p><p>  咖啡因的化学方程式是 C<sub>8</sub>H<sub>10</sub>N<sub>4</sub>O<sub>2</sub>。</p><p>如果 x<sup>2</sup> 的值为 9，那么 x 的值必为 3 或 -3。</p><h3 id="代码块">代码块</h3><p>很多标签都可以用来表示代码块：</p><ul><li><code>&lt;code&gt;</code>：用于标记计算机通用代码。</li><li><code>&lt;pre&gt;</code>：用于保留空白字符（通常用于代码块）——如果文本中使用了缩进或多余的空白，浏览器将忽略它，你将不会在呈现的页面上看到它。但是，如果你将文本包含在 <code>&lt;pre&gt;&lt;/pre&gt;</code> 标签中，那么空白将会以与你在文本编辑器中看到的相同的方式渲染出来。</li><li><code>&lt;var&gt;</code>：用于标记具体变量名。</li><li><code>&lt;kbd&gt;</code>：用于标记输入电脑的键盘（或其他类型）输入。</li><li><code>&lt;samp&gt;</code>：用于标记计算机程序的输出。</li></ul><p>例如：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">pre</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">code</span>&gt;</span>const para = document.querySelector('p');<br><br>para.onclick = function() {<br>  alert('噢，噢，噢，别点我了。');<br>}<span class="hljs-tag">&lt;/<span class="hljs-name">code</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">pre</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>  请不要使用 <span class="hljs-tag">&lt;<span class="hljs-name">code</span>&gt;</span><span class="hljs-symbol">&amp;lt;</span>font<span class="hljs-symbol">&amp;gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">code</span>&gt;</span> 、<br>  <span class="hljs-tag">&lt;<span class="hljs-name">code</span>&gt;</span><span class="hljs-symbol">&amp;lt;</span>center<span class="hljs-symbol">&amp;gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">code</span>&gt;</span> 等表象元素。<br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>在上述的 JavaScript 示例中，<span class="hljs-tag">&lt;<span class="hljs-name">var</span>&gt;</span>para<span class="hljs-tag">&lt;/<span class="hljs-name">var</span>&gt;</span> 表示一个段落元素。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>按 <span class="hljs-tag">&lt;<span class="hljs-name">kbd</span>&gt;</span>Ctrl<span class="hljs-tag">&lt;/<span class="hljs-name">kbd</span>&gt;</span>/<span class="hljs-tag">&lt;<span class="hljs-name">kbd</span>&gt;</span>Cmd<span class="hljs-tag">&lt;/<span class="hljs-name">kbd</span>&gt;</span> + <span class="hljs-tag">&lt;<span class="hljs-name">kbd</span>&gt;</span>A<span class="hljs-tag">&lt;/<span class="hljs-name">kbd</span>&gt;</span> 选择全部内容。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">pre</span>&gt;</span>$ <span class="hljs-tag">&lt;<span class="hljs-name">kbd</span>&gt;</span>ping mozilla.org<span class="hljs-tag">&lt;/<span class="hljs-name">kbd</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">samp</span>&gt;</span>PING mozilla.org (63.245.215.20): 56 data bytes<br>64 bytes from 63.245.215.20: icmp_seq=0 ttl=40 time=158.233 ms<span class="hljs-tag">&lt;/<span class="hljs-name">samp</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">pre</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>效果为：</p><pre><code class="hljs">const para = document.querySelector('p');para.onclick = function() {  alert('噢，噢，噢，别点我了。');}</code></pre><p>  请不要使用 <code>&lt;font&gt;</code> 、  <code>&lt;center&gt;</code> 等表象元素。</p><p>在上述的 JavaScript 示例中，<var>para</var> 表示一个段落元素。</p><p>按 <kbd>Ctrl</kbd>/<kbd>Cmd</kbd> + <kbd>A</kbd> 选择全部内容。</p><pre>$ <kbd>ping mozilla.org</kbd><samp>PING mozilla.org (63.245.215.20): 56 data bytes64 bytes from 63.245.215.20: icmp_seq=0 ttl=40 time=158.233 ms</samp></pre><h3 id="时间和日期">时间和日期</h3><p>HTML 还支持将时间和日期标记为可供机器识别的格式的 <code>&lt;time&gt;</code> 元素，例如：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">time</span> <span class="hljs-attr">datetime</span>=<span class="hljs-string">"2016-01-20"</span>&gt;</span>2016 年 1 月 20 日<span class="hljs-tag">&lt;/<span class="hljs-name">time</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>效果为：</p><p><time datetime="2016-01-20">2016 年 1 月 20 日</time></p><p>它的主要作用是供程序自动爬取相关的数据。</p><h2 id="构建网页的HTML">构建网页的HTML</h2><blockquote><p>本节主要参考<sup id="fnref:4" class="footnote-ref"><a href="#fn:4" rel="footnote"><span class="hint--top hint--rounded" aria-label="https://developer.mozilla.org/zh-CN/docs/Learn_web_development/Core/Structuring_content/Structuring_documents">[4]</span></a></sup></p></blockquote><p>典型的网页主要分为几部分，HTML中也有标签与之对应：</p><table><thead><tr><th style="text-align:center">HTML标签</th><th style="text-align:center">网页元素</th></tr></thead><tbody><tr><td style="text-align:center"><code>&lt;header&gt;</code></td><td style="text-align:center">页眉</td></tr><tr><td style="text-align:center"><code>&lt;nav&gt;</code></td><td style="text-align:center">导航栏</td></tr><tr><td style="text-align:center"><code>&lt;main&gt;</code></td><td style="text-align:center">主内容及其字内容区段</td></tr><tr><td style="text-align:center"><code>&lt;aside&gt;</code></td><td style="text-align:center">侧边栏（通常嵌套于主内容）</td></tr><tr><td style="text-align:center"><code>&lt;footer&gt;</code></td><td style="text-align:center">页脚</td></tr></tbody></table><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://developer.mozilla.org/zh-CN/docs/Learn_web_development/Core/Structuring_content/Basic_HTML_syntax">https://developer.mozilla.org/zh-CN/docs/Learn_web_development/Core/Structuring_content/Basic_HTML_syntax</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://developer.mozilla.org/zh-CN/docs/Learn_web_development/Core/Structuring_content/Webpage_metadata">https://developer.mozilla.org/zh-CN/docs/Learn_web_development/Core/Structuring_content/Webpage_metadata</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://developer.mozilla.org/zh-CN/docs/Learn_web_development/Core/Structuring_content/Headings_and_paragraphs">https://developer.mozilla.org/zh-CN/docs/Learn_web_development/Core/Structuring_content/Headings_and_paragraphs</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:4" class="footnote-text"><span><a href="https://developer.mozilla.org/zh-CN/docs/Learn_web_development/Core/Structuring_content/Structuring_documents">https://developer.mozilla.org/zh-CN/docs/Learn_web_development/Core/Structuring_content/Structuring_documents</a><a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web</tag>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>利用hexo-pdf在博客中插入pdf</title>
    <link href="/2025/hexo-pdf-test/"/>
    <url>/2025/hexo-pdf-test/</url>
    
    <content type="html"><![CDATA[<h1>安装</h1><p>hexo-pdf可以将pdf文件作为标签嵌入博客文档，利用<code>npm</code>安装：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install --save hexo-pdf<br></code></pre></td></tr></tbody></table></figure><p>hexo-pdf的Github仓库：<a href="https://github.com/superalsrk/hexo-pdf">https://github.com/superalsrk/hexo-pdf</a></p><p>在安装完毕后，就可以在文档中插入语句</p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">{% pdf [文件路径] %}<br></code></pre></td></tr></tbody></table></figure><p>来插入pdf文件。</p><h1>示例</h1><p>例如：</p><div class="row">    <embed src="https://images.kisechan.space/jacs.2c12527.pdf" width="100%" height="550" type="application/pdf"></div><p>经过试验，移动端的pdf并不会展示出来，而是提供下载，需要解决。</p>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>面向对象程序设计课设心得</title>
    <link href="/2025/oop-practicum/"/>
    <url>/2025/oop-practicum/</url>
    
    <content type="html"><![CDATA[<h1>题设：电商系统</h1><p>利用<strong>C/S框架</strong>完成一个电商系统的开发：<br><img src="https://images.kisechan.space/202501111458665.png" alt="主要功能"></p><p><img src="https://images.kisechan.space/202501111459828.png" alt="性能要求"></p><p>根据题设，可以依据如下的架构完成该项目：</p><img src="https://cdn.jsdelivr.net/gh/Kisechan/Picture-Bed-Kisechan@master/img/202501111454468.svg" alt="主要流程设计"><p>项目主要采用的语言为<strong>Golang和C++</strong>。</p><p><a href="https://github.com/Kisechan/oop_practicum">本项目Github仓库</a></p><h1>后端</h1><h2 id="Web服务">Web服务</h2><p>项目的Web服务采用的是Golang的Gin框架，以为前端提供api。</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> route<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">"fmt"</span><br><span class="hljs-string">"web_sql/control"</span><br><br><span class="hljs-string">"github.com/gin-gonic/gin"</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">APIInit</span><span class="hljs-params">()</span></span> {<br>r := gin.Default()<br>SetupRoutes(r)<br>r.Run(<span class="hljs-string">":8080"</span>)<br><br>fmt.Println(<span class="hljs-string">"Web API Start at 8080 Successfully"</span>)<br>}<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">SetupRoutes</span><span class="hljs-params">(r *gin.Engine)</span></span> {<br>userRoutes := r.Group(<span class="hljs-string">"/users"</span>)<br>{<br>userRoutes.POST(<span class="hljs-string">"/register"</span>, control.RegisterHandler)<br>userRoutes.POST(<span class="hljs-string">"/login"</span>, control.LoginHandler)<br>userRoutes.GET(<span class="hljs-string">"/profile/:id"</span>, control.GetUserInfoHandler)<br>userRoutes.PUT(<span class="hljs-string">"/profile"</span>, control.UpdateUserInfoHandler)<br>userRoutes.PUT(<span class="hljs-string">"/change-password"</span>, control.ChangePasswordHandler)<br>}<br>productRoutes := r.Group(<span class="hljs-string">"/products"</span>)<br>{<br>productRoutes.GET(<span class="hljs-string">"/"</span>, control.GetProductsHandler)<br>productRoutes.GET(<span class="hljs-string">"/:id"</span>, control.GetProductsHandler)<br>productRoutes.POST(<span class="hljs-string">"/search"</span>, control.SearchProductsHandler)<br>}<br>cartRoutes := r.Group(<span class="hljs-string">"/cart"</span>)<br>{<br>cartRoutes.POST(<span class="hljs-string">"/items"</span>, control.AddCartHandler)<br>cartRoutes.DELETE(<span class="hljs-string">"/items/:id"</span>, control.RemoveCartHandler)<br>cartRoutes.GET(<span class="hljs-string">"/items"</span>, control.GetCartHandler)<br>}<br>reviewRoutes := r.Group(<span class="hljs-string">"/reviews"</span>)<br>{<br>reviewRoutes.POST(<span class="hljs-string">"/"</span>, control.CreateReviewHandler)<br>reviewRoutes.GET(<span class="hljs-string">"/product/:id"</span>, control.GetProductReviewsHandler)<br>}<br>couponRoutes := r.Group(<span class="hljs-string">"/coupons"</span>)<br>{<br>couponRoutes.GET(<span class="hljs-string">"/user/:id"</span>, control.GetUserCouponsHandler)<br>couponRoutes.POST(<span class="hljs-string">"/use"</span>, control.UseCouponHandler)<br>}<br>orderRoutes := r.Group(<span class="hljs-string">"/orders"</span>)<br>{<br>orderRoutes.POST(<span class="hljs-string">"/checkout"</span>, control.CheckoutHandler)<br>orderRoutes.GET(<span class="hljs-string">"/checkout/result/:order_number"</span>, control.GetCheckResultHandler)<br>orderRoutes.GET(<span class="hljs-string">"/:id"</span>, control.GetOrdersHandler)<br>}<br>}<br></code></pre></td></tr></tbody></table></figure><p>前端通过JSON和HTTP协议，向后端传递请求，并接受Gin返回的信息。</p><h2 id="持久层">持久层</h2><p>项目的持久层采用的是GORM框架对MySQL数据库进行映射和数据库的CURD操作，对于简单的CURD，可以采用Golang的泛型编程，例如：</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">GetID</span>[<span class="hljs-title">T</span> <span class="hljs-title">any</span>]<span class="hljs-params">(db *gorm.DB, id <span class="hljs-type">int</span>, preloads ...<span class="hljs-type">string</span>)</span></span> (*T, <span class="hljs-type">error</span>) {<br><span class="hljs-keyword">var</span> record T<br>query := db<br><span class="hljs-keyword">for</span> _, preload := <span class="hljs-keyword">range</span> preloads {<br>query = query.Preload(preload)<br>}<br>err := query.First(&amp;record, id).Error<br><span class="hljs-keyword">return</span> &amp;record, err<br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="Redis">Redis</h2><p>在Golang部分的项目里，通过配置<strong>Go-Redis</strong>的环境能够让Go客户端也访问Redis。在C++中则可以使用<strong>hiredis库</strong>（配置环境可以参考<a href="https://kisechan.github.io/2024/vcpkg/">这一篇博客</a>）</p><h3 id="缓存">缓存</h3><p>对于一些经常需要查询的信息，可以把它们放到Redis缓存中（<code>SET</code>命令）以避免过于频繁地访问数据库，当数据库里面的东西被改动时，再删掉Redis里的缓存信息（<code>DEL</code>命令）。</p><p>Golang连接Redis服务端：</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> (<br>ctx = context.Background()<br><br>redisClient = redis.NewClient(&amp;redis.Options{<br>Addr: <span class="hljs-string">"localhost:6379"</span>,<br>})<br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">RedisInit</span><span class="hljs-params">()</span></span> {<br>ctx := context.Background()<br>_, err := redisClient.Ping(ctx).Result()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {<br>log.Fatalf(<span class="hljs-string">"Failed to connect to Redis: %v"</span>, err)<br>}<br>}<br></code></pre></td></tr></tbody></table></figure><p>在缓存中查询信息则可以参考：</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">GetAllProductsHandler</span><span class="hljs-params">(c *gin.Context)</span></span> {<br><span class="hljs-comment">// 尝试从 Redis 缓存中获取所有商品信息</span><br>cacheKey := <span class="hljs-string">"all_products"</span><br>cachedProducts, err := redisClient.Get(ctx, cacheKey).Result()<br><span class="hljs-keyword">if</span> err == <span class="hljs-literal">nil</span> {<br><span class="hljs-comment">// 如果缓存中存在商品信息，直接返回</span><br><span class="hljs-keyword">var</span> products []rep.Product<br><span class="hljs-keyword">if</span> err := json.Unmarshal([]<span class="hljs-type">byte</span>(cachedProducts), &amp;products); err == <span class="hljs-literal">nil</span> {<br>c.JSON(http.StatusOK, gin.H{<br><span class="hljs-string">"products"</span>: products,<br>})<br><span class="hljs-keyword">return</span><br>}<br>}<br><br><span class="hljs-comment">// 查询所有商品</span><br><span class="hljs-keyword">var</span> products []rep.Product<br><span class="hljs-keyword">if</span> err := rep.DB.Find(&amp;products).Error; err != <span class="hljs-literal">nil</span> {<br>c.JSON(http.StatusInternalServerError, gin.H{<span class="hljs-string">"error"</span>: <span class="hljs-string">"Failed to fetch products"</span>})<br><span class="hljs-keyword">return</span><br>}<br><br><span class="hljs-comment">// 将商品信息存入 Redis 缓存</span><br>productsJSON, err := json.Marshal(products)<br><span class="hljs-keyword">if</span> err == <span class="hljs-literal">nil</span> {<br>redisClient.Set(ctx, cacheKey, productsJSON, time.Hour) <span class="hljs-comment">// 缓存 1 小时</span><br>}<br><br><span class="hljs-comment">// 返回商品信息</span><br>c.JSON(http.StatusOK, gin.H{<br><span class="hljs-string">"products"</span>: products,<br>})<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="消息队列">消息队列</h3><p>本项目利用Redis的<code>LPush</code>、<code>LPop</code>等操作实现消息队列（现在Redis也有更消息队列的操作了，不一定就需要完全这样），和C++业务层实现高性能的通讯：</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 将结算请求推送到Redis消息队列</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">PushToRedisQueue</span><span class="hljs-params">(queueName <span class="hljs-type">string</span>, data <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-keyword">interface</span>{})</span></span> <span class="hljs-type">error</span> {<br>jsonData, err := json.Marshal(data)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {<br><span class="hljs-keyword">return</span> err<br>}<br><span class="hljs-keyword">return</span> redisClient.LPush(context.Background(), queueName, jsonData).Err()<br>}<br></code></pre></td></tr></tbody></table></figure><p>在推送到Redis后，会有一个信息的消费者，持续消费另外一端传来的消息：</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">consumeRedisMessages</span><span class="hljs-params">(redisContext* context)</span> </span>{<br>    std::cout &lt;&lt; <span class="hljs-string">"Starting Consuming Redis Messages"</span> &lt;&lt; std::endl;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) {<br>        redisReply* reply = (redisReply*)<span class="hljs-built_in">redisCommand</span>(context, <span class="hljs-string">"BLPOP checkout_queue 0"</span>);<br>        <span class="hljs-keyword">if</span> (reply &amp;&amp; reply-&gt;type == REDIS_REPLY_ARRAY &amp;&amp; reply-&gt;element[<span class="hljs-number">1</span>]) {<br>            <span class="hljs-function">std::string <span class="hljs-title">message</span><span class="hljs-params">(reply-&gt;element[<span class="hljs-number">1</span>]-&gt;str, reply-&gt;element[<span class="hljs-number">1</span>]-&gt;len)</span></span>;<br>            std::cout &lt;&lt; <span class="hljs-string">"Received message: "</span> &lt;&lt; message &lt;&lt; std::endl;<br>            <span class="hljs-keyword">if</span> (message == <span class="hljs-string">""</span>) {<br>                std::cout &lt;&lt; <span class="hljs-string">"Message is empty! Continue!"</span> &lt;&lt; std::endl;<br>                <span class="hljs-keyword">continue</span>;<br>            }<br>            <span class="hljs-built_in">processCheckoutRequest</span>(message);<br>        }<br>        <span class="hljs-built_in">freeReplyObject</span>(reply);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p>这样利用消息队列，就可以成功解耦小部件之间的关系。</p><h2 id="C-业务层">C++业务层</h2><p>C++业务层主要的职责就是对订单进行处理、验证（结算部分通过前端预结算差不多做好了，后端就偷个懒），在这一过程中，其实不太需要访问到数据库，直接对Redis缓存中的信息进行验证、减少，就可以了。</p><h3 id="通信">通信</h3><p>C++业务层利用<strong>Boost.Asio、Boost.Beast</strong>等库进行HTTP通信，发送JSON，调用Golang那一端的api。</p><h3 id="异步">异步</h3><p>为了实现在高并发情景下的性能，C++业务层利用多线程（没有对线程池优化）完成异步地订单持久化（存入数据库）和更新库存这样耗时长的操作。</p><p>但是这样就会有一个问题：<strong>在高并发环境下，多个线程进行同一个操作未免不会导致竞争和冲突</strong>，那么就需要<strong>锁</strong>来避免。本项目采用的是Redis提供的分布式锁（<code>SET</code>命令实现），这样，在一个线程访问资源时，设置分布式锁，别的线程就不能够访问了。</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">"lock.h"</span></span><br><br><span class="hljs-comment">// 获取分布式锁</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">acquireLock</span><span class="hljs-params">(redisContext* context, <span class="hljs-type">const</span> std::string&amp; lockKey, <span class="hljs-type">int</span> timeout)</span> </span>{<br>    std::string command = <span class="hljs-string">"SET "</span> + lockKey + <span class="hljs-string">" locked NX EX "</span> + std::<span class="hljs-built_in">to_string</span>(timeout);<br>    redisReply* reply = (redisReply*)<span class="hljs-built_in">redisCommand</span>(context, command.<span class="hljs-built_in">c_str</span>());<br>    <span class="hljs-keyword">if</span> (reply == <span class="hljs-literal">nullptr</span> || reply-&gt;type == REDIS_REPLY_ERROR) {<br>        std::cerr &lt;&lt; <span class="hljs-string">"Failed to acquire lock: "</span> &lt;&lt; (reply ? reply-&gt;str : <span class="hljs-string">"Unknown error"</span>) &lt;&lt; std::endl;<br>        <span class="hljs-built_in">freeReplyObject</span>(reply);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    }<br>    <span class="hljs-type">bool</span> lockAcquired = (reply-&gt;type == REDIS_REPLY_STATUS &amp;&amp; std::<span class="hljs-built_in">string</span>(reply-&gt;str) == <span class="hljs-string">"OK"</span>);<br>    <span class="hljs-built_in">freeReplyObject</span>(reply);<br>    <span class="hljs-keyword">return</span> lockAcquired;<br>}<br><br><span class="hljs-comment">// 释放分布式锁</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">releaseLock</span><span class="hljs-params">(redisContext* context, <span class="hljs-type">const</span> std::string&amp; lockKey)</span> </span>{<br>    redisReply* reply = (redisReply*)<span class="hljs-built_in">redisCommand</span>(context, <span class="hljs-string">"DEL %s"</span>, lockKey.<span class="hljs-built_in">c_str</span>());<br>    <span class="hljs-keyword">if</span> (reply == <span class="hljs-literal">nullptr</span> || reply-&gt;type == REDIS_REPLY_ERROR) {<br>        std::cerr &lt;&lt; <span class="hljs-string">"Failed to release lock: "</span> &lt;&lt; (reply ? reply-&gt;str : <span class="hljs-string">"Unknown error"</span>) &lt;&lt; std::endl;<br>    }<br>    <span class="hljs-built_in">freeReplyObject</span>(reply);<br>}<br></code></pre></td></tr></tbody></table></figure><p>用<code>mutex</code>设置全局锁也可以，但是全局锁性能肯定不及分布式锁。</p><h1>前端</h1><p>课题要求不能采用Web编程，于是采用的是Golang的Fyne框架进行桌面应用UI的开发。Fyne目前的功能不多，本人不是很推荐使用。</p><h1>总结</h1><p>其实做这样的一个前后端分离的项目，最难的部分其实是在<strong>思路</strong>这一方面。只有想清楚了每一部分是什么职能、如何实现才能够去完成自己的项目。在打好了基础以后，再进行优化，那就简单多了。</p>]]></content>
    
    
    <categories>
      
      <category>CS 杂谈</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>OOP</tag>
      
      <tag>开发</tag>
      
      <tag>Redis</tag>
      
      <tag>Go</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>利用vcpkg在VS中配置第三方库环境</title>
    <link href="/2024/vcpkg/"/>
    <url>/2024/vcpkg/</url>
    
    <content type="html"><![CDATA[<p>vcpkg是一个跨平台的C++包管理工具，可以自动下载、构建和配置第三方库，十分方便。</p><h2 id="安装">安装</h2><p>克隆vcpkg的源代码：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/microsoft/vcpkg<br></code></pre></td></tr></tbody></table></figure><h2 id="构建">构建</h2><p>clone完成后，进入vcpkg目录，运行：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">.\bootstrap-vcpkg.bat<br></code></pre></td></tr></tbody></table></figure><p>以构建vcpkg。</p><p>不太需要给vcpkg设置环境变量。</p><h2 id="集成至VS">集成至VS</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">.\vcpkg integrate install<br></code></pre></td></tr></tbody></table></figure><p>此命令会将vcpkg的路径添加到VS的环境变量，从而能够自动配置第三方库。</p><h2 id="配置库">配置库</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">.\vcpkg install [库名称]<br></code></pre></td></tr></tbody></table></figure><p>自动安装库，如果已经将vcpkg集成至VS，那么VS会自动检测到已安装的库。</p><p>如果自动集成没有成功，在VS中检测不到安装的库，那么就需要手动配置设置：</p><ul><li>**C/C+±常规-附加包含目录：**添加vcpkg下载的包目录的include路径</li><li>**链接器-常规-附加库目录：**添加vcpkg下载的包目录的lib路径</li><li>**链接器-输入-附加依赖项：**添加需要的库文件</li></ul><p>删除已下载的库：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">.\vcpkg remove [库名称]<br><br><span class="hljs-comment"># 如果该包被其他包依赖，vcpkg会提示你删除依赖项或强制删除</span><br><span class="hljs-comment"># 加上--recurse选项就可以强制删除</span><br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <categories>
      
      <category>CS 杂谈</category>
      
    </categories>
    
    
    <tags>
      
      <tag>开发</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构课程板子合集&amp;笔记</title>
    <link href="/2024/ds/"/>
    <url>/2024/ds/</url>
    
    <content type="html"><![CDATA[<h1>关于数据结构</h1><p>数据结构研究组织数据（结构化信息）的方法，以支持<strong>有效</strong>——满足时空限制的处理。</p><h2 id="数据">数据</h2><p><strong>数据</strong>是计算机程序要处理的“原料” 是所有被计算机识别、存储和加工处理的符号的总称。</p><p><strong>数据元素</strong>是组成数据的基本单位，也称数据成分、元素、结点等。数据可理解成数据元素的集合。数据元素可大可小，在程序中通常把一个数据元素作为一个整体来考虑和处理。</p><p>数据元素可由若干<strong>数据项</strong>组成。数据项也称为域、字段等。</p><h2 id="数据结构">数据结构</h2><p>数据结构由三部分组成：</p><ul><li><p><strong>数据的逻辑结构</strong>：数据元素和它们之间的逻辑关系。</p></li><li><p><strong>数据的存储结构</strong>：逻辑结构到存储空间的映射。</p><ul><li>顺序存储结构</li><li>链接存储结构</li><li>索引存储结构</li><li>散列存储结构</li></ul></li><li><p><strong>运算（操作）</strong>：CURD、排序</p></li></ul><h2 id="算法">算法</h2><p>算法是<strong>有穷规则的集合</strong>，规定了解决某一特定<br>类型问题的运算序列。</p><p>通常，一个算法有5个重要特性（Knuth）：</p><ol><li><strong>有限性</strong>：算法必须在执行有限步后结束；</li><li><strong>确定性</strong>：算法描述必须无歧义，通常结果确定；</li><li><strong>可行性</strong>：算法中的运算必须是可行的；</li><li><strong>输入</strong>：一个算法有零个或多个输入；</li><li><strong>输出</strong>：一个算法有一个或多个输出；</li></ol><h1>线性表-栈-队列</h1><h2 id="概念辨析">概念辨析</h2><table><thead><tr><th>特性</th><th>线性表</th><th>堆栈</th><th>队列</th><th>链表</th></tr></thead><tbody><tr><td><strong>逻辑结构</strong></td><td>一对一的有序集合</td><td>特殊的线性表（LIFO）</td><td>特殊的线性表（FIFO）</td><td>物理存储结构</td></tr><tr><td><strong>操作限制</strong></td><td>无特殊限制</td><td>只能在栈顶操作</td><td>队尾插入，队头删除</td><td>无特殊限制</td></tr><tr><td><strong>实现方式</strong></td><td>顺序表、链表</td><td>顺序栈、链式栈</td><td>顺序队列、链式队列</td><td>单向链表、双向链表、循环链表</td></tr><tr><td><strong>访问方式</strong></td><td>支持随机访问（顺序表）</td><td>不支持随机访问</td><td>不支持随机访问</td><td>不支持随机访问</td></tr><tr><td><strong>典型应用</strong></td><td>通用数据存储</td><td>函数调用栈、表达式求值</td><td>任务调度、缓冲区管理</td><td>动态数据存储</td></tr></tbody></table><h1>字符串</h1><h2 id="模式匹配">模式匹配</h2><p>朴素的模式匹配，复杂度为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>m</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(mn)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">mn</span><span class="mclose">)</span></span></span></span></p><p>利用KMP算法的思想，需要实现前缀函数/失败函数：</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>j</mi><mo stretchy="false">)</mo><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.36em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>k</mi><mo separator="true">,</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mrow><mstyle scriptlevel="0" displaystyle="false"><mi>k</mi></mstyle><mtext>&nbsp;为满足&nbsp;</mtext></mrow><msub><mi>p</mi><mn>0</mn></msub><msub><mi>p</mi><mn>1</mn></msub><mo>…</mo><msub><mi>p</mi><mi>k</mi></msub><mo>=</mo><msub><mi>p</mi><mrow><mi>j</mi><mo>−</mo><mi>k</mi></mrow></msub><msub><mi>p</mi><mrow><mi>j</mi><mo>−</mo><mi>k</mi><mo>+</mo><mn>1</mn></mrow></msub><mo>…</mo><msub><mi>p</mi><mi>j</mi></msub><mtext>&nbsp;的最大值，且&nbsp;</mtext><mn>0</mn><mo>≤</mo><mi>k</mi><mo>&lt;</mo><mi>j</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mn>1</mn><mo separator="true">,</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>其他情况</mtext></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">f(j) =\begin{cases}k, &amp; \text{\( k \) 为满足 } p_0 p_1 \dots p_k = p_{j-k} p_{j-k+1} \dots p_j \text{ 的最大值，且 } 0 \leq k &lt; j \\-1, &amp; \text{其他情况}\end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3em;vertical-align:-1.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mpunct">,</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">−</span><span class="mord">1</span><span class="mpunct">,</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:1em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord text"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord">&nbsp;</span><span class="mord cjk_fallback">为满足</span><span class="mord">&nbsp;</span></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mbin mtight">−</span><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mbin mtight">−</span><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mord text"><span class="mord">&nbsp;</span><span class="mord cjk_fallback">的最大值，且</span><span class="mord">&nbsp;</span></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord text"><span class="mord cjk_fallback">其他情况</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><h3 id="KMP算法实现1">KMP算法实现1</h3><h4 id="前缀函数">前缀函数</h4><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">pi</span><span class="hljs-params">(string&amp;s)</span></span><br><span class="hljs-function"></span>{<br>    <span class="hljs-type">int</span> n=s.<span class="hljs-built_in">length</span>();<br>    vector&lt;<span class="hljs-type">int</span>&gt;<span class="hljs-built_in">pi</span>(n);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;n;i++)<br>    {<br>        <span class="hljs-type">int</span> j=pi[i<span class="hljs-number">-1</span>];<br>        <span class="hljs-keyword">while</span>(j&gt;<span class="hljs-number">0</span>&amp;&amp;s[i]!=s[j]) j=pi[j<span class="hljs-number">-1</span>];<br>        <span class="hljs-keyword">if</span>(s[i]==s[j]) j++;<br>        pi[i]=j;<br>    }<br>    <span class="hljs-keyword">return</span> pi;<br>}<br></code></pre></td></tr></tbody></table></figure><p>时间复杂度<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>。</p><h4 id="查找子串">查找子串</h4><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">KMP</span><span class="hljs-params">(string&amp;text,string&amp;pattern)</span> </span><br><span class="hljs-function"></span>{<br>    string cur=pattern+<span class="hljs-string">'#'</span>+text;<br>    <span class="hljs-type">int</span> sz1=text.<span class="hljs-built_in">size</span>(),sz2=pattern.<span class="hljs-built_in">size</span>();<br>    vector&lt;<span class="hljs-type">int</span>&gt; v;<br>    vector&lt;<span class="hljs-type">int</span>&gt; lps=<span class="hljs-built_in">pi</span>(cur);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=sz2+<span class="hljs-number">1</span>;i&lt;=sz1+sz2;i++)<br>    {<br>        <span class="hljs-keyword">if</span> (lps[i]==sz2) v.<span class="hljs-built_in">push_back</span>(i<span class="hljs-number">-2</span>*sz2);<br>    }<br>    <span class="hljs-keyword">return</span> v;<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="KMP算法实现2">KMP算法实现2</h3><h4 id="next数组">next数组</h4><p><code>next[j]</code>: <code>j</code>前字符串的最长公共前缀后缀的长度。</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">cal_next</span><span class="hljs-params">(<span class="hljs-type">char</span> p[])</span> </span>{<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, j = <span class="hljs-number">-1</span>, m = <span class="hljs-built_in">strlen</span>(p); <span class="hljs-comment">// i 是后缀指针，j 是前缀指针</span><br>    next[<span class="hljs-number">0</span>] = <span class="hljs-number">-1</span>; <span class="hljs-comment">// 初始化 next[0] 为 -1</span><br>    <span class="hljs-keyword">while</span> (i &lt; m - <span class="hljs-number">1</span>) {<br>        <span class="hljs-keyword">if</span> (j == <span class="hljs-number">-1</span> || p[i] == p[j]) {<br>            i++, j++;<br>            next[i] = j; <span class="hljs-comment">// 更新 next[i]</span><br>        } <span class="hljs-keyword">else</span> {<br>            j = next[j]; <span class="hljs-comment">// 回溯 j</span><br>        }<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><h4 id="查找子串-2">查找子串</h4><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">kmp</span><span class="hljs-params">(<span class="hljs-type">char</span> s[],<span class="hljs-type">char</span> p[])</span> </span>{<br>    <span class="hljs-type">int</span> i=<span class="hljs-number">0</span>,j=<span class="hljs-number">0</span>,n=<span class="hljs-built_in">strlen</span>(s),m=<span class="hljs-built_in">strlen</span>(p);<br>    <span class="hljs-keyword">if</span> (n &lt; <span class="hljs-number">1</span> || m &lt; <span class="hljs-number">1</span> || n &lt; m) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">while</span>(i &lt; n &amp;&amp; j &lt; m)<br>        <span class="hljs-keyword">if</span>(j==<span class="hljs-number">-1</span> || s[i]==p[j]) i++,j++;<br>        <span class="hljs-keyword">else</span> j = next[j] ;<br>    <span class="hljs-keyword">return</span> j==m ? i-j : <span class="hljs-number">-1</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="总结和注意事项">总结和注意事项</h3><p><strong><code>next</code> 数组的定义</strong></p><ul><li><code>next[i]</code> 表示模式串 <code>p</code> 的前缀 <code>p[0...i-1]</code> 的最长公共前后缀的长度。</li><li><code>next[0]</code> 固定为 <code>-1</code>，因为第一个字符没有前缀。</li></ul><p><strong>关于计算</strong></p><ul><li>在计算最长公共前后缀时，<strong>不能将整个字符串本身</strong>作为前缀或后缀。</li><li>前缀和后缀必须是字符串的<strong>真子串</strong>（即不能等于字符串本身）。</li></ul><h2 id="字典树-Trie">字典树 Trie</h2><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">trie</span><br>{<br>    <span class="hljs-type">int</span> nex[<span class="hljs-number">100000</span>][<span class="hljs-number">26</span>],cnt;<br>    <span class="hljs-type">bool</span> exist[<span class="hljs-number">100000</span>];<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">char</span>*s, <span class="hljs-type">int</span> l)</span></span><br><span class="hljs-function">    </span>{<br>        <span class="hljs-type">int</span> p=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;l;i++)<br>        {<br>            <span class="hljs-type">int</span> c=s[i]-<span class="hljs-string">'a'</span>;<br>            <span class="hljs-keyword">if</span>(!nex[p][c]) nex[p][c]=++cnt;<br>            p=nex[p][c];<br>        }<br>        exist[p]=<span class="hljs-literal">true</span>;<br>    }<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">char</span> *s, <span class="hljs-type">int</span> l)</span> </span><br><span class="hljs-function">    </span>{<br>        <span class="hljs-type">int</span> p=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;l;i++)<br>        {<br>            <span class="hljs-type">int</span> c=s[i]-<span class="hljs-string">'a'</span>;<br>            <span class="hljs-keyword">if</span>(!nex[p][c])<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>            p=nex[p][c];<br>        }<br>        <span class="hljs-keyword">return</span> exist[p];<br>    }<br>};<br></code></pre></td></tr></tbody></table></figure><h1>树</h1><h2 id="非递归树的遍历">非递归树的遍历</h2><h3 id="中根遍历">中根遍历</h3><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">NonRecursiveInOrderTraversal</span><span class="hljs-params">(TreeNode* root)</span> </span>{<br>    std::stack&lt;TreeNode*&gt; S;<br>    TreeNode* p = root;<br><br>    <span class="hljs-comment">// Traverse the tree</span><br>    <span class="hljs-keyword">while</span> (p != <span class="hljs-literal">NULL</span> || !S.<span class="hljs-built_in">empty</span>()) {<br>        <span class="hljs-comment">// Reach the leftmost node</span><br>        <span class="hljs-keyword">while</span> (p != <span class="hljs-literal">NULL</span>) {<br>            S.<span class="hljs-built_in">push</span>(p);<br>            p = p-&gt;left;<br>        }<br><br>        <span class="hljs-comment">// Process the top node in the stack</span><br>        <span class="hljs-keyword">if</span> (!S.<span class="hljs-built_in">empty</span>()) {<br>            p = S.<span class="hljs-built_in">top</span>();<br>            S.<span class="hljs-built_in">pop</span>();<br>            std::cout &lt;&lt; p-&gt;data &lt;&lt; <span class="hljs-string">" "</span>;  <span class="hljs-comment">// Visit the node</span><br><br>            <span class="hljs-comment">// Move to the right child</span><br>            p = p-&gt;right;<br>        }<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p>伪代码：</p><pre><code class="hljs">Algorithm NonRecursiveInOrderTraversal:Input: A binary tree with root node `t`Output: Print the nodes in the tree in in-order sequenceStep 1: Initialize stack `S` and pointer `p = t`Step 2: While `p` is not NULL:    - Push node `p` onto stack `S`    - Set `p = p.Left` (Move to the left child)Step 3: While stack `S` is not empty:    - Pop the top node `p` from stack `S`    - Print `p.Data`    - Set `p = p.Right` (Move to the right child)    - If `p` is not NULL, go to Step 2EndAlgorithm</code></pre><h3 id="后根遍历">后根遍历</h3><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">NonRecursivePostOrderTraversal</span><span class="hljs-params">(TreeNode* root)</span> </span>{<br>    <span class="hljs-keyword">if</span> (!root) <span class="hljs-keyword">return</span>;<br>    <br>    std::stack&lt;std::pair&lt;TreeNode*, <span class="hljs-type">int</span>&gt;&gt; S;  <span class="hljs-comment">// Stack to store node and its state (0: left, 1: right, 2: visited)</span><br>    TreeNode* p = root;<br>    S.<span class="hljs-built_in">push</span>({p, <span class="hljs-number">0</span>});  <span class="hljs-comment">// Start from the root node with state 0</span><br>    <br>    <span class="hljs-keyword">while</span> (!S.<span class="hljs-built_in">empty</span>()) {<br>        p = S.<span class="hljs-built_in">top</span>().first;<br>        <span class="hljs-type">int</span> i = S.<span class="hljs-built_in">top</span>().second;<br>        S.<span class="hljs-built_in">pop</span>();<br>        <br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">0</span>) {  <span class="hljs-comment">// Left child state</span><br>            S.<span class="hljs-built_in">push</span>({p, <span class="hljs-number">0</span>});  <span class="hljs-comment">// Revisit the node after processing left and right children</span><br>            <span class="hljs-keyword">if</span> (p-&gt;left != <span class="hljs-literal">NULL</span>) {<br>                S.<span class="hljs-built_in">push</span>({p-&gt;left, <span class="hljs-number">0</span>});  <span class="hljs-comment">// Visit the left child</span><br>            } <span class="hljs-keyword">else</span> {<br>                S.<span class="hljs-built_in">push</span>({p, <span class="hljs-number">1</span>});  <span class="hljs-comment">// No left child, move to right child directly</span><br>            }<br>        }<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i == <span class="hljs-number">1</span>) {  <span class="hljs-comment">// Right child state</span><br>            <span class="hljs-keyword">if</span> (p-&gt;right != <span class="hljs-literal">NULL</span>) {<br>                S.<span class="hljs-built_in">push</span>({p-&gt;right, <span class="hljs-number">0</span>});  <span class="hljs-comment">// Visit the right child</span><br>            } <span class="hljs-keyword">else</span> {<br>                S.<span class="hljs-built_in">push</span>({p, <span class="hljs-number">2</span>});  <span class="hljs-comment">// No right child, directly visit the node</span><br>            }<br>        }<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i == <span class="hljs-number">2</span>) {  <span class="hljs-comment">// Visited both left and right children</span><br>            std::cout &lt;&lt; p-&gt;data &lt;&lt; <span class="hljs-string">" "</span>;  <span class="hljs-comment">// Visit the node (print data)</span><br>        }<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p>伪代码：</p><pre><code class="hljs">AlgorithmNonRecursivePostOrderTraversal:Input: A binary tree with root node `t`Output: Print the nodes in the tree in post-order sequenceStep 1: Initialize stack `S`Step 2: Set the initial node `p = t` and state `i = 0` (state 0 for left child, 1 for right child, 2 for visiting)Step 3: While the stack `S` is not empty:    - Pop the top element `(p, i)` from stack `S`    - If `i == 0` (left child):        - Push `(p, 0)` to stack `S` (revisit the node)        - If `p.Left` is not NULL, push `(p.Left, 0)` to stack `S` (visit left child)    - If `i == 1` (right child):        - If `p.Right` is not NULL, push `(p.Right, 0)` to stack `S` (visit right child)    - If `i == 2` (visited both left and right children):        - Print `p.Data` (visit the node)EndAlgorithm</code></pre><h2 id="线索二叉树">线索二叉树</h2><h2 id="Huffman树">Huffman树</h2><p>为了使问题的处理更为方便，每当原二叉树中出现空子树时，就增加特殊的结点——空树叶，由此生成的二叉树称为<strong>扩充二叉树</strong>。规定空二叉树的扩充二叉树只有一个方形结点。圆形结点称为内结点 ，方形结点称为外结点。扩充二叉树每一个内结点都有两个儿子，每一个外结点没有儿子。</p><p>扩充二叉树的<strong>外通路长度</strong>定义为从根到每个外结点的路径长度之和，内通路长度定义为从根到每个内结点的路径长度之和。给扩充二叉树中<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span>个外结点赋上一个实数，称为该结点的权。树的加权外通路长度定义为：</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mtext>WPL</mtext><mo>=</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><msub><mi>w</mi><mi>i</mi></msub><msub><mi>L</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">\text{WPL}=\sum_{i=1}^{n} w_i L_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord text"><span class="mord">WPL</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.9291em;vertical-align:-1.2777em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0269em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>在外结点权值分别为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>w</mi><mn>0</mn></msub><mo separator="true">,</mo><msub><mi>w</mi><mn>1</mn></msub><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><msub><mi>w</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">w_0,w_1...w_{n-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6389em;vertical-align:-0.2083em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0269em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0269em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">...</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0269em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span></span></span></span>的扩充二叉树中，加权外通路长度最小的扩充二叉树称为<strong>最优二叉树</strong>，即<strong>Huffman树</strong>。</p><p>建立Huffman树：</p><ul><li>利用堆（优先队列）：复杂度<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n\log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></li><li>把结点分成两类：原始和生成，每种都递增两个递增序列取最小，数组或队列均可，建议数组，时间复杂度<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>。</li></ul><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mtext>总编码长度</mtext><mo>=</mo><mtext>WPL</mtext></mrow><annotation encoding="application/x-tex">总编码长度=\text{WPL}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord cjk_fallback">总编码长度</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord text"><span class="mord">WPL</span></span></span></span></span></span></p><h2 id="树、二叉树和森林">树、二叉树和森林</h2><h3 id="树和二叉树的转换">树和二叉树的转换</h3><p><img src="https://images.kisechan.space/202501011906113.png" alt="树和二叉树的转换"></p><ol><li><p>每个结点的<strong>大孩子</strong>作为对应二叉树该结点的<br><strong>左孩子</strong></p></li><li><p>每个结点的<strong>其它孩子</strong>形成对应二叉树该结点<br>左孩子的<strong>右链</strong>；</p></li></ol><p>这样，在对应的二叉树中，每个结点的左孩子<br>是其原树结点的大孩子，右孩子是其原树结点<br>的大兄弟（下一兄弟）。</p><h3 id="森林和二叉树的转换">森林和二叉树的转换</h3><p><img src="https://images.kisechan.space/202501011908655.png" alt="森林和二叉树的转换"></p><p><img src="https://images.kisechan.space/202501011909022.png" alt=""></p><p>由森林(d)转换成二叉树(a)之后，二叉树的根是第一棵树的根，二叉树的左子树是由第一棵树的诸子树转换来的，二叉树的右子树是由第二棵树和第三棵树转换来的。</p><h2 id="树的遍历">树的遍历</h2><p><strong>定理</strong></p><blockquote><p>如果已知一个树的先根序列和每个结点相应的次数(度)则能唯一确定该树的结构。</p></blockquote><p><strong>证明</strong></p><blockquote><p>用数学归纳法:</p></blockquote><blockquote><p>1.若树中只有一个结点 定理显然成立 。</p></blockquote><blockquote><p>2.假设树中结点个数小于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo stretchy="false">(</mo><mi>n</mi><mo>≥</mo><mn>2</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">n(n \geq 2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">n</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mclose">)</span></span></span></span> 时定理成立。<br>当树中有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span>个结点时，由树的先根序列可知，第一个结点是根结点，设该结点的次数为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><mo separator="true">,</mo><mo stretchy="false">(</mo><mi>k</mi><mo>≥</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">k,(k\geq1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span> 因此根结点有 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span>个子树。第一个子树排在最前面 第 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span>个子树排在最后面并且每个子树的结点个数小于<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span>。由归纳假设可知 每个子树可以唯一确定 从而整棵树的树形可以唯一确定。</p></blockquote><h2 id="概念辨析-2">概念辨析</h2><h1>图论</h1><h2 id="图的存储">图的存储</h2><h3 id="邻接矩阵和邻接链表">邻接矩阵和邻接链表</h3><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">存储表示</th><th style="text-align:center">空间复杂度</th><th style="text-align:center">求顶点的度</th><th style="text-align:center">判定<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><msub><mi>v</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>v</mi><mi>j</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(v_i,v_j)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0361em;vertical-align:-0.2861em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></th><th style="text-align:center">求边数</th></tr></thead><tbody><tr><td style="text-align:center">邻接矩阵</td><td style="text-align:center">唯一</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> 稠密图</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></td></tr><tr><td style="text-align:center">邻接链表</td><td style="text-align:center">不唯一；取决于边的输入顺序和链接次序</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mi>e</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n+e)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">e</span><span class="mclose">)</span></span></span></span> 稀疏图</td><td style="text-align:center">无向图<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>，有向图<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mi>e</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n+e)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">e</span><span class="mclose">)</span></span></span></span></td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mi>e</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n+e)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">e</span><span class="mclose">)</span></span></span></span></td></tr></tbody></table><h2 id="前向星">前向星</h2><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// head[u] 和 cnt 的初始值都为 -1</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> v)</span> </span>{<br>  nxt[++cnt] = head[u];  <span class="hljs-comment">// 当前边的后继</span><br>  head[u] = cnt;         <span class="hljs-comment">// 起点 u 的第一条边</span><br>  to[cnt] = v;           <span class="hljs-comment">// 当前边的终点</span><br>}<br><br><span class="hljs-comment">// 遍历 u 的出边</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = head[u]; ~i; i = nxt[i]) {  <span class="hljs-comment">// ~i 表示 i != -1</span><br>  <span class="hljs-type">int</span> v = to[i];<br>}<br></code></pre></td></tr></tbody></table></figure><table><thead><tr><th style="text-align:center">空间复杂度</th><th style="text-align:center">判定<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><msub><mi>v</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>v</mi><mi>j</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(v_i,v_j)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0361em;vertical-align:-0.2861em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></th><th style="text-align:center">遍历点 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>u</mi></mrow><annotation encoding="application/x-tex">u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">u</span></span></span></span> 的所有出边</th><th style="text-align:center">遍历整张图</th></tr></thead><tbody><tr><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>m</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(m)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mclose">)</span></span></span></span></td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>d</mi><mo>+</mo></msup><mo stretchy="false">(</mo><mi>u</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(d^+(u))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0213em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7713em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">+</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">u</span><span class="mclose">))</span></span></span></span></td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>d</mi><mo>+</mo></msup><mo stretchy="false">(</mo><mi>u</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(d^+(u))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0213em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7713em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">+</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">u</span><span class="mclose">))</span></span></span></span></td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mi>m</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n+m)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">m</span><span class="mclose">)</span></span></span></span></td></tr></tbody></table><h2 id="最短路">最短路</h2><p><img src="https://images.kisechan.space/202501022124136.png" alt="Floyd算法"></p><h2 id="生成树">生成树</h2><p><strong>树的等价性定义（图论）：</strong></p><blockquote><p>令<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>G</mi><mo>=</mo><mo stretchy="false">(</mo><mi>V</mi><mo separator="true">,</mo><mi>E</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">G = (V,E)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">G</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mclose">)</span></span></span></span> 是一个无向图，下面描述是等价的：</p></blockquote><blockquote><p>1.<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>G</mi></mrow><annotation encoding="application/x-tex">G</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">G</span></span></span></span> 是自由树</p></blockquote><blockquote><p>2.<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>G</mi></mrow><annotation encoding="application/x-tex">G</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">G</span></span></span></span> 无环，且 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mi>E</mi><mi mathvariant="normal">∣</mi><mo>=</mo><mi mathvariant="normal">∣</mi><mi>V</mi><mi mathvariant="normal">∣</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">| E | = | V |- 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></p></blockquote><blockquote><p>3.<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>G</mi></mrow><annotation encoding="application/x-tex">G</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">G</span></span></span></span> 连通，且 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mi>E</mi><mi mathvariant="normal">∣</mi><mo>=</mo><mi mathvariant="normal">∣</mi><mi>V</mi><mi mathvariant="normal">∣</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">| E | = | V |- 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></p></blockquote><blockquote><p>4.<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>G</mi></mrow><annotation encoding="application/x-tex">G</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">G</span></span></span></span> 无环，但增加任意一条边后均有环</p></blockquote><blockquote><p>5.<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>G</mi></mrow><annotation encoding="application/x-tex">G</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">G</span></span></span></span> 连通，但移除任意一条边后均不连通</p></blockquote><blockquote><p>6.<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>G</mi></mrow><annotation encoding="application/x-tex">G</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">G</span></span></span></span> 中任意两点之间有唯一一条路</p></blockquote><p>一种策略：逐步生成，每次确定 MST 的一条边</p><p>过程：管理边集 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span></span></span></span> 。 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span></span></span></span> 初始空，循环加 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span> 条边。</p><p>增加边前， <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span></span></span></span> 都是某棵 MST 的子集（循环不变式）。<br>增加边时，选择一条边<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>u</mi><mo separator="true">,</mo><mi>v</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(u,v)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">u</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mclose">)</span></span></span></span>加入 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span></span></span></span> 中，使 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span></span></span></span> 不违反循环不变式，即 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mo>∪</mo><mo stretchy="false">(</mo><mi>u</mi><mo separator="true">,</mo><mi>v</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">A\cup (u,v)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∪</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">u</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mclose">)</span></span></span></span> 也是某棵 MST 的子集。</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>u</mi><mo separator="true">,</mo><mi>v</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(u,v)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">u</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mclose">)</span></span></span></span>加入不破坏循环不变式，称其为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span></span></span></span>的安全边</p><p>奥妙：<strong>安全边必然存在</strong>。关键：<strong>寻找安全边</strong>。</p><h3 id="Prim算法-适合稠密图">Prim算法(适合稠密图)</h3><p>设<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>G</mi><mo>=</mo><mo stretchy="false">(</mo><mi>V</mi><mo separator="true">,</mo><mi>E</mi><mo separator="true">,</mo><mi>W</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">G=(V,E,W)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">G</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="mclose">)</span></span></span></span> 为连通网 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mi>E</mi></mrow><annotation encoding="application/x-tex">TE</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">TE</span></span></span></span> 是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>G</mi></mrow><annotation encoding="application/x-tex">G</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">G</span></span></span></span> 的最小生成树 MST的边的集合，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>U</mi></mrow><annotation encoding="application/x-tex">U</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span></span></span></span> 为 MST 顶点集。</p><ol><li><p>初始化： <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>U</mi><mo>=</mo><msub><mi>u</mi><mn>0</mn></msub><mo separator="true">,</mo><msub><mi>u</mi><mn>0</mn></msub><mo>∈</mo><mi>V</mi><mo separator="true">,</mo><mi>T</mi><mi>E</mi><mo>=</mo><mi mathvariant="normal">∅</mi></mrow><annotation encoding="application/x-tex">U={u_0},u_0\in V,TE=\emptyset</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7335em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">TE</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8056em;vertical-align:-0.0556em;"></span><span class="mord">∅</span></span></span></span></p></li><li><p>找到满足<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>weight</mtext><mo stretchy="false">(</mo><mi>u</mi><mo separator="true">,</mo><mi>v</mi><mo stretchy="false">)</mo><mo>=</mo><mtext>min</mtext><mo stretchy="false">{</mo><mtext>weight</mtext><mo stretchy="false">(</mo><msub><mi>u</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>v</mi><mn>1</mn></msub><mo stretchy="false">)</mo><mi mathvariant="normal">∣</mi><msub><mi>u</mi><mn>1</mn></msub><mo>∈</mo><mi>U</mi><mo separator="true">,</mo><msub><mi>v</mi><mn>1</mn></msub><mo>∈</mo><mi>V</mi><mo>−</mo><mi>U</mi><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">\text{weight}(u,v)= \text{min} \{\text{weight}(u_1 ,v_1)|u_1\in U, v_1\in V-U\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord text"><span class="mord">weight</span></span><span class="mopen">(</span><span class="mord mathnormal">u</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord text"><span class="mord">min</span></span><span class="mopen">{</span><span class="mord text"><span class="mord">weight</span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord">∣</span><span class="mord"><span class="mord mathnormal">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span><span class="mclose">}</span></span></span></span>,的边把它并入 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mi>E</mi></mrow><annotation encoding="application/x-tex">TE</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">TE</span></span></span></span> 同时 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>v</mi></mrow><annotation encoding="application/x-tex">v</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span></span></span></span> 并入 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>U</mi></mrow><annotation encoding="application/x-tex">U</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span></span></span></span></p></li><li><p>反复执行 2,直至 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>V</mi><mo>=</mo><mi>U</mi></mrow><annotation encoding="application/x-tex">V=U</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span></span></span></span> 算法结束</p></li></ol><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs cpp">priority_queue&lt;S&gt; q;<br><span class="hljs-type">int</span> dis[N];<br><span class="hljs-type">bool</span> vis[N];<br><br><span class="hljs-type">int</span> res = <span class="hljs-number">0</span>, cnt = <span class="hljs-number">0</span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Prim</span><span class="hljs-params">()</span> </span>{<br>  <span class="hljs-built_in">memset</span>(dis, <span class="hljs-number">0x3f</span>, <span class="hljs-built_in">sizeof</span>(dis));<br>  dis[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>  q.<span class="hljs-built_in">push</span>({<span class="hljs-number">1</span>, <span class="hljs-number">0</span>});<br>  <span class="hljs-keyword">while</span> (!q.<span class="hljs-built_in">empty</span>()) {<br>    <span class="hljs-keyword">if</span> (cnt &gt;= n) <span class="hljs-keyword">break</span>;<br>    <span class="hljs-type">int</span> u = q.<span class="hljs-built_in">top</span>().u, d = q.<span class="hljs-built_in">top</span>().d;<br>    q.<span class="hljs-built_in">pop</span>();<br>    <span class="hljs-keyword">if</span> (vis[u]) <span class="hljs-keyword">continue</span>;<br>    vis[u] = <span class="hljs-literal">true</span>;<br>    ++cnt;<br>    res += d;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[u]; i; i = e[i].x) {<br>      <span class="hljs-type">int</span> v = e[i].v, w = e[i].w;<br>      <span class="hljs-keyword">if</span> (w &lt; dis[v]) {<br>        dis[v] = w, q.<span class="hljs-built_in">push</span>({v, w});<br>      }<br>    }<br>  }<br>}<br></code></pre></td></tr></tbody></table></figure><p>时间复杂度为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p><p>使用堆优化，可达到 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>e</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(e \log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">e</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></p><h3 id="Kruskal算法-适合稀疏图">Kruskal算法(适合稀疏图)</h3><p>边表+并查集实现：</p><ul><li><p>排序： <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>e</mi><mi>log</mi><mo>⁡</mo><mi>e</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O( e\log e)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">e</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">e</span><span class="mclose">)</span></span></span></span></p></li><li><p>判环： <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>e</mi><mi>α</mi><mo stretchy="false">(</mo><mi>e</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(e\alpha(e))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mopen">(</span><span class="mord mathnormal">e</span><span class="mclose">))</span></span></span></span></p></li><li><p>整体时间复杂度 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>e</mi><mi>log</mi><mo>⁡</mo><mi>e</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O( e\log e)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">e</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">e</span><span class="mclose">)</span></span></span></span></p></li></ul><p>堆实现</p><ul><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>e</mi><mi>log</mi><mo>⁡</mo><mi>e</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O( e \log e)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">e</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">e</span><span class="mclose">)</span></span></span></span></li></ul><h2 id="拓扑排序">拓扑排序</h2><h3 id="概念">概念</h3><p><strong>AOV 网</strong>：用顶点表示活动，用有向边表示活动之间的先后关系，称这样的有向图为 AOV 网 (Activity On Vertex)。</p><p>拓扑序列：AOV 网中的所有顶点的一个线性序列，要求：如果在有向边 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>&lt;</mo><msub><mi>V</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>V</mi><mi>j</mi></msub><mo>&gt;</mo></mrow><annotation encoding="application/x-tex">&lt;V_i,V_j &gt;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span></span></span></span>，那么在序列中 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>V</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">V_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>必位于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>V</mi><mi>j</mi></msub></mrow><annotation encoding="application/x-tex">V_j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span> 之前。</p><p>拓扑排序：构造 AOV 网的拓扑序列的过程称作拓扑排序</p><h3 id="二级结论">二级结论</h3><p>任意图的拓扑序列不一定存在。例如，存在回路的 AOV 网就无法找到拓扑序列。因为出现了有向环，则意味着某项活动以自己作为先决条件。</p><p>有向无环图（DAG）一定存在拓扑序列。</p><p>拓扑排序与环的关系：有向图中，可拓扑排序等价于无环。</p><h3 id="关键路径">关键路径</h3><p><strong>关键路径</strong>： AOE 网中具有最大长度的路径。</p><p><strong>关键活动</strong>：不得延期的活动。</p><p>关键活动是关键路径上的活动；关键路径是<strong>从源点到汇点由关键活动构成的路径</strong>。</p><p>最早开始时间<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>v</mi><mi>e</mi></mrow><annotation encoding="application/x-tex">ve</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal">e</span></span></span></span>：按拓扑序递推，</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>v</mi><mi>e</mi><mo stretchy="false">(</mo><mi>k</mi><mo stretchy="false">)</mo><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.36em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>0</mn><mo separator="true">,</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>if&nbsp;</mtext><mi>k</mi><mo>=</mo><mn>1</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>max</mi><mo>⁡</mo><mo stretchy="false">{</mo><mi>v</mi><mi>e</mi><mo stretchy="false">(</mo><mi>j</mi><mo stretchy="false">)</mo><mo>+</mo><mtext>weight</mtext><mo stretchy="false">(</mo><mo>&lt;</mo><mi>j</mi><mo separator="true">,</mo><mi>k</mi><mo>&gt;</mo><mo stretchy="false">)</mo><mo stretchy="false">}</mo><mo separator="true">,</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>if&nbsp;</mtext><mo>&lt;</mo><msub><mi>v</mi><mi>j</mi></msub><mo separator="true">,</mo><msub><mi>v</mi><mi>k</mi></msub><mo>&gt;</mo><mo>∈</mo><mi>E</mi><mo stretchy="false">(</mo><mi>G</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">ve(k) =\begin{cases}0, &amp; \text{if } k = 1 \\\max \{ ve(j) + \text{weight}(&lt;j, k&gt;) \}, &amp; \text{if } &lt;v_j, v_k&gt; \in E(G)\end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal">e</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3em;vertical-align:-1.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">0</span><span class="mpunct">,</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mop">max</span><span class="mopen">{</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal">e</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord text"><span class="mord">weight</span></span><span class="mopen">(</span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mclose">)}</span><span class="mpunct">,</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:1em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord text"><span class="mord">if&nbsp;</span></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">1</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord text"><span class="mord">if&nbsp;</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;∈</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mopen">(</span><span class="mord mathnormal">G</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>最晚开始时间<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>v</mi><mi>l</mi></mrow><annotation encoding="application/x-tex">vl</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span></span></span></span>：按拓扑序逆推，</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>v</mi><mi>l</mi><mo stretchy="false">(</mo><mi>k</mi><mo stretchy="false">)</mo><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.36em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>v</mi><mi>e</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo separator="true">,</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>if&nbsp;</mtext><mi>k</mi><mo>=</mo><mi>n</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>min</mi><mo>⁡</mo><mo stretchy="false">{</mo><mi>v</mi><mi>l</mi><mo stretchy="false">(</mo><mi>j</mi><mo stretchy="false">)</mo><mo>−</mo><mtext>weight</mtext><mo stretchy="false">(</mo><mo>&lt;</mo><mi>k</mi><mo separator="true">,</mo><mi>j</mi><mo>&gt;</mo><mo stretchy="false">)</mo><mo stretchy="false">}</mo><mo separator="true">,</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>if&nbsp;</mtext><mo>&lt;</mo><msub><mi>v</mi><mi>k</mi></msub><mo separator="true">,</mo><msub><mi>v</mi><mi>j</mi></msub><mo>&gt;</mo><mo>∈</mo><mi>E</mi><mo stretchy="false">(</mo><mi>G</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">vl(k) =\begin{cases}ve(n), &amp; \text{if } k = n \\\min \{ vl(j) - \text{weight}(&lt;k, j&gt;) \}, &amp; \text{if } &lt;v_k, v_j&gt; \in E(G)\end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3em;vertical-align:-1.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal">e</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mpunct">,</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mop">min</span><span class="mopen">{</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord text"><span class="mord">weight</span></span><span class="mopen">(</span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mclose">)}</span><span class="mpunct">,</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:1em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord text"><span class="mord">if&nbsp;</span></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">n</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord text"><span class="mord">if&nbsp;</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;∈</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mopen">(</span><span class="mord mathnormal">G</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p><strong>关键活动</strong>： <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>v</mi><mi>l</mi><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo><mo>=</mo><mi>v</mi><mi>e</mi><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">vl(i)=ve(i)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal">e</span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mclose">)</span></span></span></span>，表示活动 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">a_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>是没有时间余量的关键活动。</p><h2 id="强联通分量">强联通分量</h2><p>有向图中如果两个点能互相可及（或连通）则称这两个点强连通。</p><p>有向图 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>G</mi></mrow><annotation encoding="application/x-tex">G</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">G</span></span></span></span> 中任意两点互相可及（或连通） ，则称<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>G</mi></mrow><annotation encoding="application/x-tex">G</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">G</span></span></span></span> 是强连通图。</p><p>有向图 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>G</mi></mrow><annotation encoding="application/x-tex">G</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">G</span></span></span></span> 的极大强连通子图，称为<strong>强连通分量</strong>（SCC,Strongly Connected Component）。</p><p><strong>Tarjan算法</strong></p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAXN = <span class="hljs-number">1000</span>; <span class="hljs-comment">// 最大节点数</span><br>vector&lt;<span class="hljs-type">int</span>&gt; adj[MAXN]; <span class="hljs-comment">// 邻接表存储图</span><br><span class="hljs-type">int</span> DFN[MAXN], Low[MAXN]; <span class="hljs-comment">// DFN[u]：节点u的访问顺序，Low[u]：节点u能追溯到的最早节点</span><br><span class="hljs-type">bool</span> inStack[MAXN]; <span class="hljs-comment">// 记录节点是否在栈中</span><br>stack&lt;<span class="hljs-type">int</span>&gt; stk; <span class="hljs-comment">// 用于存储当前路径上的节点</span><br><span class="hljs-type">int</span> Index = <span class="hljs-number">0</span>; <span class="hljs-comment">// 全局索引，用于分配DFN值</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">tarjan</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span> </span>{<br>    DFN[u] = Low[u] = ++Index; <span class="hljs-comment">// 初始化DFN和Low</span><br>    stk.<span class="hljs-built_in">push</span>(u); <span class="hljs-comment">// 将当前节点压入栈</span><br>    inStack[u] = <span class="hljs-literal">true</span>; <span class="hljs-comment">// 标记节点在栈中</span><br><br>    <span class="hljs-comment">// 遍历所有邻接节点</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> v : adj[u]) {<br>        <span class="hljs-keyword">if</span> (!DFN[v]) { <span class="hljs-comment">// 如果节点v未被访问过</span><br>            <span class="hljs-built_in">tarjan</span>(v); <span class="hljs-comment">// 递归访问v</span><br>            Low[u] = <span class="hljs-built_in">min</span>(Low[u], Low[v]); <span class="hljs-comment">// 更新Low[u]</span><br>        } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (inStack[v]) { <span class="hljs-comment">// 如果节点v在栈中</span><br>            Low[u] = <span class="hljs-built_in">min</span>(Low[u], DFN[v]); <span class="hljs-comment">// 更新Low[u]</span><br>        }<br>    }<br><br>    <span class="hljs-comment">// 如果u是强连通分量的根</span><br>    <span class="hljs-keyword">if</span> (DFN[u] == Low[u]) {<br>        cout &lt;&lt; <span class="hljs-string">"Strongly Connected Component: "</span>;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) {<br>            <span class="hljs-type">int</span> v = stk.<span class="hljs-built_in">top</span>(); <span class="hljs-comment">// 取出栈顶节点</span><br>            stk.<span class="hljs-built_in">pop</span>(); <span class="hljs-comment">// 弹出栈顶节点</span><br>            inStack[v] = <span class="hljs-literal">false</span>; <span class="hljs-comment">// 标记节点不在栈中</span><br>            cout &lt;&lt; v &lt;&lt; <span class="hljs-string">" "</span>; <span class="hljs-comment">// 输出节点</span><br>            <span class="hljs-keyword">if</span> (v == u) <span class="hljs-keyword">break</span>; <span class="hljs-comment">// 直到当前节点u被弹出</span><br>        }<br>        cout &lt;&lt; endl;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p>类似 DFS，如果求全图的SCC，每次选择一个未被访问的顶点<code>u</code>运行Tarjan算法。</p><p><code>DFN</code>数组可作访问标志</p><p><code>inStack</code>数组：顶点在栈中标志</p><p>Tarjan算法中，每个顶点都被访问了一次，且只进出了一次堆栈，每条边也只被访问了一次，所以该算法的时间复杂度为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mi>e</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n+e)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">e</span><span class="mclose">)</span></span></span></span>。</p><h1>查找</h1><h2 id="概念-2">概念</h2><table><thead><tr><th style="text-align:center">术语</th><th style="text-align:center">意义</th></tr></thead><tbody><tr><td style="text-align:center">查找表</td><td style="text-align:center">是由同一类型的数据元素构成的集合</td></tr><tr><td style="text-align:center">关键词</td><td style="text-align:center">可标识数据元素的域</td></tr><tr><td style="text-align:center">查找</td><td style="text-align:center">在查找表中找出满足条件的数据元素</td></tr><tr><td style="text-align:center">查找结果</td><td style="text-align:center">查找成功、查找失败</td></tr><tr><td style="text-align:center">查找与插入</td><td style="text-align:center">查找失败后，插入关键词新记录</td></tr><tr><td style="text-align:center">平均查找长度</td><td style="text-align:center">找一个结点所作的平均比较次数（衡量一个查找算法优劣的主要标准）</td></tr></tbody></table><h2 id="顺序查找">顺序查找</h2><p>传统线性查找：</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">sFind</span><span class="hljs-params">(<span class="hljs-type">int</span> A[], <span class="hljs-type">int</span> N, <span class="hljs-type">int</span> K)</span> </span>{<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i++) {<br>        <span class="hljs-keyword">if</span> (A[i] == K) <span class="hljs-keyword">return</span> i; <span class="hljs-comment">// 每次循环需要检查 i &lt; N 和 A[i] == K</span><br>    }<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><p>引入监视哨：</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">qFind</span><span class="hljs-params">(<span class="hljs-type">int</span> A[], <span class="hljs-type">int</span> N, <span class="hljs-type">int</span> K)</span> </span>{<br>    A[N] = K; <span class="hljs-comment">// 设置监视哨</span><br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (A[i] != K) i++; <span class="hljs-comment">// 只需检查 A[i] == K</span><br>    <span class="hljs-keyword">return</span> i &lt; N ? i : <span class="hljs-number">-1</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><p>引入监视哨后不需要检查循环的边界条件，快了20%。</p><ul><li>成功查找的平均查找长度：约<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0.5</mn><mi>n</mi></mrow><annotation encoding="application/x-tex">0.5n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0.5</span><span class="mord mathnormal">n</span></span></span></span></li><li>查找失败的查找长度：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></li><li>平均时间复杂度：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></li></ul><h2 id="二分查找">二分查找</h2><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">bFind</span><span class="hljs-params">(<span class="hljs-type">int</span> a[], <span class="hljs-type">int</span> N, <span class="hljs-type">int</span> K)</span> </span>{<br>    <span class="hljs-type">int</span> s = <span class="hljs-number">0</span>;          <span class="hljs-comment">// 起始位置</span><br>    <span class="hljs-type">int</span> e = N - <span class="hljs-number">1</span>;      <span class="hljs-comment">// 结束位置</span><br>    <span class="hljs-type">int</span> i;              <span class="hljs-comment">// 中间位置</span><br><br>    <span class="hljs-keyword">while</span> (s &lt;= e) {<br>        i = (s + e) &gt;&gt; <span class="hljs-number">1</span>; <span class="hljs-comment">// 使用位运算计算中间位置，等价于 (s + e) / 2</span><br>        <span class="hljs-keyword">if</span> (a[i] == K) {<br>            <span class="hljs-keyword">return</span> i;    <span class="hljs-comment">// 找到目标值，返回索引</span><br>        } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (a[i] &lt; K) {<br>            s = i + <span class="hljs-number">1</span>;   <span class="hljs-comment">// 目标值在右半部分</span><br>        } <span class="hljs-keyword">else</span> {<br>            e = i - <span class="hljs-number">1</span>;   <span class="hljs-comment">// 目标值在左半部分</span><br>        }<br>    }<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;          <span class="hljs-comment">// 未找到目标值，返回-1</span><br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="优化">优化</h3><h2 id="二叉查找树">二叉查找树</h2><p>二叉查找树 （二叉搜索树、二叉排序树 ）：BST是一棵可为空的二叉树；若BST非空，则<strong>其中根遍历序列按关键词递增排列。</strong> 对半查找、Fibonacci查找等都对应一棵隐<br>式的二叉查找树。</p><ul><li>BST 可以作<strong>优先级队列</strong>：<ul><li>优先级队列中的元素具有优先级</li><li>优先级队列的操作：取最值、删最值、插入、修改</li></ul></li><li>BST 也可以作<strong>字典</strong>：<ul><li>字典是key-value对的集合。也称为关联数组（associative array）或映射（map）。</li><li>字典的操作：查找、插入、删除。</li></ul></li></ul><p>一个无序序列，可通过构造一棵二叉查找树而成为有序序列，这被称为二叉查找树的<strong>顺序属性</strong>。</p><p>二叉查找树会因输入文件的记录顺序不同，而有不同的形态。对包含<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span></span></span></span>个记录的集合，其对应的关键词有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span></span></span></span>种不同的排列，可构成<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mrow><mo fence="true">(</mo><mfrac linethickness="0px"><mi>N</mi><mrow><mn>2</mn><mi>N</mi></mrow></mfrac><mo fence="true">)</mo></mrow><mi mathvariant="normal">/</mi><mo stretchy="false">(</mo><mi>N</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\binom{N}{2N}/(N+1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2723em;vertical-align:-0.35em;"></span><span class="mord"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9223em;"><span style="top:-2.355em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span></span></span></span><span style="top:-3.144em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span><span class="mord">/</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span>棵不同的二叉查找树。</p><p>特殊情况下，会产生退化二叉查找树，从而使最<br>坏情况查找时间达<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span>。</p><p>关键算法：寻找<strong>前驱或后继</strong>，</p><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs text">算法 Successor(x)<br>/*在 BST 中找 x 的后继*/<br>S1[有右儿子，向下找]<br>if(x.rLink != NULL)<br>    return FindMin(x.rLink)<br><br>S2[否则向上找，找到最近的祖先并在其左子树中]<br>y = x.parent<br>while(y != NULL &amp;&amp; x == y.rLink)<br>    x = y, y = x.parent<br>return y<br></code></pre></td></tr></tbody></table></figure><h3 id="平衡树">平衡树</h3><p>一棵 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span>个不同关键字的随机构建的二叉搜索树的期望高度为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(\log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></p><p>为了避免二叉搜索树退化成线性表，解决方案有：</p><ul><li>随机文件</li><li>给定各个查找情况的概率，建立Huffman树</li><li>AVL树等平衡树：控制树形维护一棵形态较好的二叉查找树（近似最优）</li></ul><blockquote><p>对于二叉搜索树来说，常见的平衡性的定义是指：以 T 为根节点的树，每一个结点的左子树和右子树高度差最多为 1。</p></blockquote><h2 id="线段树">线段树</h2><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SegTree</span><br>{<br>    vector&lt;T&gt; tree,lazy;<br>    vector&lt;T&gt; *arr;<br>    <span class="hljs-type">int</span> n,root,n4,end;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">maintain</span><span class="hljs-params">(<span class="hljs-type">int</span> cl,<span class="hljs-type">int</span> cr,<span class="hljs-type">int</span> p)</span></span><br><span class="hljs-function">    </span>{<br>        <span class="hljs-type">int</span> cm=cl+(cr-cl)/<span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span>(cl!=cr&amp;&amp;lazy[p])<br>        {<br>            lazy[p*<span class="hljs-number">2</span>]+=lazy[p];<br>            lazy[p*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>]+=lazy[p];<br>            tree[p*<span class="hljs-number">2</span>]+=lazy[p]*(cm-cl+<span class="hljs-number">1</span>);<br>            tree[p*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>]+=lazy[p]*(cr-cm);<br>            lazy[p]=<span class="hljs-number">0</span>;<br>        }<br>    }<br><br>    <span class="hljs-function">T <span class="hljs-title">range_sum</span><span class="hljs-params">(<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r,<span class="hljs-type">int</span> cl,<span class="hljs-type">int</span> cr,<span class="hljs-type">int</span> p)</span> </span><br><span class="hljs-function">    </span>{<br>        <span class="hljs-keyword">if</span>(l&lt;=cl&amp;&amp;cr&lt;=r) <span class="hljs-keyword">return</span> tree[p];<br>        <span class="hljs-type">int</span> m=cl+(cr-cl)/<span class="hljs-number">2</span>;<br>        T sum=<span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">maintain</span>(cl,cr,p);<br>        <span class="hljs-keyword">if</span>(l&lt;=m) sum+=<span class="hljs-built_in">range_sum</span>(l,r,cl,m,p*<span class="hljs-number">2</span>);<br>        <span class="hljs-keyword">if</span>(r&gt;m) sum+=<span class="hljs-built_in">range_sum</span>(l,r,m+<span class="hljs-number">1</span>,cr,p*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">return</span> sum;<br>    }<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">range_add</span><span class="hljs-params">(<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r,T val,<span class="hljs-type">int</span> cl,<span class="hljs-type">int</span> cr,<span class="hljs-type">int</span> p)</span> </span><br><span class="hljs-function">    </span>{<br>        <span class="hljs-keyword">if</span>(l&lt;=cl&amp;&amp;cr&lt;=r) <br>        {<br>            lazy[p]+=val;<br>            tree[p]+=(cr-cl+<span class="hljs-number">1</span>)*val;<br>            <span class="hljs-keyword">return</span>;<br>        }<br>        <span class="hljs-type">int</span> m=cl+(cr-cl)/<span class="hljs-number">2</span>;<br>        <span class="hljs-built_in">maintain</span>(cl,cr,p);<br>        <span class="hljs-keyword">if</span>(l&lt;=m) <span class="hljs-built_in">range_add</span>(l,r,val,cl,m,p*<span class="hljs-number">2</span>);<br>        <span class="hljs-keyword">if</span>(r&gt;m) <span class="hljs-built_in">range_add</span>(l,r,val,m+<span class="hljs-number">1</span>,cr,p*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>);<br>        tree[p]=tree[p*<span class="hljs-number">2</span>]+tree[p*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>];<br>    }<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-type">int</span> s,<span class="hljs-type">int</span> t,<span class="hljs-type">int</span> p)</span> </span><br><span class="hljs-function">    </span>{<br>        <span class="hljs-keyword">if</span>(s==t)<br>        {<br>            tree[p]=(*arr)[s];<br>            <span class="hljs-keyword">return</span>;<br>        }<br>        <span class="hljs-type">int</span> m=s+(t-s)/<span class="hljs-number">2</span>;<br>        <span class="hljs-built_in">build</span>(s,m,p*<span class="hljs-number">2</span>);<br>        <span class="hljs-built_in">build</span>(m+<span class="hljs-number">1</span>,t,p*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>);<br>        tree[p]=tree[p*<span class="hljs-number">2</span>]+tree[p*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>];<br>    }<br><br> <span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">explicit</span> <span class="hljs-built_in">SegTreeLazyRangeAdd</span>&lt;T&gt;(vector&lt;T&gt; v) <br>    {<br>        n=v.<span class="hljs-built_in">size</span>();<br>        n4=n*<span class="hljs-number">4</span>;<br>        tree=<span class="hljs-built_in">vector</span>&lt;T&gt;(n4,<span class="hljs-number">0</span>);<br>        lazy=<span class="hljs-built_in">vector</span>&lt;T&gt;(n4,<span class="hljs-number">0</span>);<br>        arr=&amp;v;<br>        end=n<span class="hljs-number">-1</span>;<br>        root=<span class="hljs-number">1</span>;<br>        <span class="hljs-built_in">build</span>(<span class="hljs-number">0</span>,end,<span class="hljs-number">1</span>);<br>        arr=<span class="hljs-literal">nullptr</span>;<br>    }<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">show</span><span class="hljs-params">(<span class="hljs-type">int</span> p,<span class="hljs-type">int</span> depth=<span class="hljs-number">0</span>)</span> </span><br><span class="hljs-function">    </span>{<br>        <span class="hljs-keyword">if</span>(p&gt;n4||tree[p]==<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span>;<br>        <span class="hljs-built_in">show</span>(p*<span class="hljs-number">2</span>,depth+<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;depth;++i) <span class="hljs-built_in">putchar</span>(<span class="hljs-string">'\t'</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d:%d\n"</span>,tree[p],lazy[p]);<br>        <span class="hljs-built_in">show</span>(p*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>,depth+<span class="hljs-number">1</span>);<br>    }<br><br>    <span class="hljs-function">T <span class="hljs-title">range_sum</span><span class="hljs-params">(<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r)</span> </span>{ <span class="hljs-keyword">return</span> <span class="hljs-built_in">range_sum</span>(l,r,<span class="hljs-number">0</span>,end,root);}<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">range_add</span><span class="hljs-params">(<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r,T val)</span> </span>{ <span class="hljs-built_in">range_add</span>(l,r,val,<span class="hljs-number">0</span>,end,root);}<br>};<br></code></pre></td></tr></tbody></table></figure><h2 id="红黑树">红黑树</h2><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> endl <span class="hljs-string">'\n'</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">1e6</span>+<span class="hljs-number">5</span>;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span> <br>{<br>    <span class="hljs-type">int</span> key;<br>    <span class="hljs-type">bool</span> color;<br>    node *l,*r,*fa;<br>    <span class="hljs-built_in">node</span>(<span class="hljs-type">int</span> key):<span class="hljs-built_in">key</span>(key),<span class="hljs-built_in">color</span>(<span class="hljs-number">0</span>),<span class="hljs-built_in">l</span>(<span class="hljs-literal">nullptr</span>),<span class="hljs-built_in">r</span>(<span class="hljs-literal">nullptr</span>),<span class="hljs-built_in">fa</span>(<span class="hljs-literal">nullptr</span>) {}<br>};<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">rbTree</span> <br>{<br><span class="hljs-keyword">public</span>:<br>    node* root;<br>    node* tnull;<br>    <span class="hljs-built_in">rbTree</span>() <br> {<br>  tnull=<span class="hljs-keyword">new</span> <span class="hljs-built_in">node</span>(<span class="hljs-number">-1</span>);<br>        tnull-&gt;color=<span class="hljs-number">1</span>;<br>        tnull-&gt;l=<span class="hljs-literal">nullptr</span>;<br>  tnull-&gt;r=<span class="hljs-literal">nullptr</span>;<br>  root=tnull;<br> }<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span> </span><br><span class="hljs-function"> </span>{<br>        tnull=<span class="hljs-keyword">new</span> <span class="hljs-built_in">node</span>(<span class="hljs-number">-1</span>);<br>        tnull-&gt;color=<span class="hljs-number">1</span>;<br>        tnull-&gt;l=tnull-&gt;r=<span class="hljs-literal">nullptr</span>;<br>    }<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">lrotate</span><span class="hljs-params">(node* x)</span> </span><br><span class="hljs-function"> </span>{<br>        node* y=x-&gt;r;<br>        x-&gt;r=y-&gt;l;<br>        <span class="hljs-keyword">if</span>(y-&gt;l!=tnull) y-&gt;l-&gt;fa=x;<br><br>        y-&gt;fa=x-&gt;fa;<br>        <span class="hljs-keyword">if</span>(x-&gt;fa==<span class="hljs-literal">nullptr</span>)<br>            root=y;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(x==x-&gt;fa-&gt;l)<br>            x-&gt;fa-&gt;l=y;<br>        <span class="hljs-keyword">else</span><br>            x-&gt;fa-&gt;r=y;<br><br>        y-&gt;l=x;<br>        x-&gt;fa=y;<br>    }<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">rrotate</span><span class="hljs-params">(node* x)</span> </span><br><span class="hljs-function"> </span>{<br>        node* y=x-&gt;l;<br>        x-&gt;l=y-&gt;r;<br>        <span class="hljs-keyword">if</span>(y-&gt;r!=tnull) y-&gt;r-&gt;fa=x;<br><br>        y-&gt;fa=x-&gt;fa;<br>        <span class="hljs-keyword">if</span>(x-&gt;fa==<span class="hljs-literal">nullptr</span>)<br>            root=y;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(x==x-&gt;fa-&gt;r)<br>            x-&gt;fa-&gt;r=y;<br>        <span class="hljs-keyword">else</span><br>            x-&gt;fa-&gt;l=y;<br><br>        y-&gt;r=x;<br>        x-&gt;fa=y;<br>    }<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">fix</span><span class="hljs-params">(node* k)</span> </span><br><span class="hljs-function"> </span>{<br>        <span class="hljs-keyword">while</span>(k-&gt;fa&amp;&amp;!k-&gt;fa-&gt;color) <br>  {<br>            <span class="hljs-keyword">if</span>(k-&gt;fa==k-&gt;fa-&gt;fa-&gt;l) <br>   {<br>                node* tmp=k-&gt;fa-&gt;fa-&gt;r;<br>                <span class="hljs-keyword">if</span>(tmp&amp;&amp;!tmp-&gt;color) <br>    {<br>                    k-&gt;fa-&gt;color=<span class="hljs-number">1</span>;<br>                    tmp-&gt;color=<span class="hljs-number">1</span>;<br>                    k-&gt;fa-&gt;fa-&gt;color=<span class="hljs-number">0</span>;<br>                    k=k-&gt;fa-&gt;fa;<br>                }<br>    <span class="hljs-keyword">else</span> <br>    {<br>                    <span class="hljs-keyword">if</span>(k==k-&gt;fa-&gt;r) <br>     {<br>                        k=k-&gt;fa;<br>                        <span class="hljs-built_in">lrotate</span>(k);<br>                    }<br>                    k-&gt;fa-&gt;color=<span class="hljs-number">1</span>;<br>                    k-&gt;fa-&gt;fa-&gt;color=<span class="hljs-number">0</span>;<br>                    <span class="hljs-built_in">rrotate</span>(k-&gt;fa-&gt;fa);<br>                }<br>            } <br>   <span class="hljs-keyword">else</span> <br>   {<br>                node* tmp=k-&gt;fa-&gt;fa-&gt;l;<br>                <span class="hljs-keyword">if</span>(tmp&amp;&amp;!tmp-&gt;color) <br>    {<br>                    k-&gt;fa-&gt;color=<span class="hljs-number">1</span>;<br>                    tmp-&gt;color=<span class="hljs-number">1</span>;<br>                    k-&gt;fa-&gt;fa-&gt;color=<span class="hljs-number">0</span>;<br>                    k=k-&gt;fa-&gt;fa;<br>                } <br>    <span class="hljs-keyword">else</span> <br>    {<br>                    <span class="hljs-keyword">if</span>(k==k-&gt;fa-&gt;l) <br>     {<br>                        k=k-&gt;fa;<br>                        <span class="hljs-built_in">rrotate</span>(k);<br>                    }<br>                    k-&gt;fa-&gt;color=<span class="hljs-number">1</span>;<br>                    k-&gt;fa-&gt;fa-&gt;color=<span class="hljs-number">0</span>;<br>                    <span class="hljs-built_in">lrotate</span>(k-&gt;fa-&gt;fa);<br>                }<br>            }<br>        }<br>        root-&gt;color=<span class="hljs-number">1</span>;<br>    }<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ins</span><span class="hljs-params">(<span class="hljs-type">int</span> key)</span> </span><br><span class="hljs-function"> </span>{<br>        node* temp=<span class="hljs-keyword">new</span> <span class="hljs-built_in">node</span>(key);<br>        temp-&gt;fa=<span class="hljs-literal">nullptr</span>;<br>        temp-&gt;key=key;<br>        temp-&gt;l=tnull;<br>        temp-&gt;r=tnull;<br>        temp-&gt;color=<span class="hljs-number">0</span>;<br><br>        node* y=<span class="hljs-literal">nullptr</span>;<br>        node* x=root;<br><br>        <span class="hljs-keyword">while</span>(x!=tnull) <br>  {<br>            y=x;<br>            <span class="hljs-keyword">if</span>(temp-&gt;key&lt;x-&gt;key) x=x-&gt;l;<br>            <span class="hljs-keyword">else</span> x=x-&gt;r;<br>        }<br>        temp-&gt;fa=y;<br>        <span class="hljs-keyword">if</span>(y==<span class="hljs-literal">nullptr</span>) root=temp;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(temp-&gt;key&lt;y-&gt;key) y-&gt;l=temp;<br>        <span class="hljs-keyword">else</span> y-&gt;r=temp;<br>        <span class="hljs-keyword">if</span>(temp-&gt;fa==<span class="hljs-literal">nullptr</span>) <br>  {<br>            temp-&gt;color=<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">return</span>;<br>        }<br>        <span class="hljs-keyword">if</span>(temp-&gt;fa-&gt;fa==<span class="hljs-literal">nullptr</span>) <span class="hljs-keyword">return</span>;<br>        <span class="hljs-built_in">fix</span>(temp);<br>    }<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print</span><span class="hljs-params">(node* root)</span> </span><br><span class="hljs-function"> </span>{<br>        <span class="hljs-keyword">if</span>(root==tnull) <br>  {<br>            cout&lt;&lt;<span class="hljs-string">"-1 B"</span>&lt;&lt;endl;<br>            <span class="hljs-keyword">return</span>;<br>        }<br>        cout&lt;&lt;root-&gt;key&lt;&lt;<span class="hljs-string">" "</span>&lt;&lt;(root-&gt;color==<span class="hljs-number">0</span>?<span class="hljs-string">"R"</span>:<span class="hljs-string">"B"</span>)&lt;&lt;endl;<br>        <span class="hljs-built_in">print</span>(root-&gt;l);<br>        <span class="hljs-built_in">print</span>(root-&gt;r);<br>    }<br>};<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span><br><span class="hljs-function"></span>{<br> ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>),cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>),cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-type">int</span> n;<br>    cin&gt;&gt;n;<br>    rbTree t;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++) <br> {<br>        <span class="hljs-type">int</span> val;<br>        cin&gt;&gt;val;<br>        t.<span class="hljs-built_in">ins</span>(val);<br>    }<br>    t.<span class="hljs-built_in">print</span>(t.root);<br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="Treap树">Treap树</h2><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAXN=<span class="hljs-number">100005</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> INF=<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">30</span>;<br><span class="hljs-type">int</span> n;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">treap</span> <br>{<br>    <span class="hljs-type">int</span> l[MAXN],r[MAXN],val[MAXN],rnd[MAXN],size_[MAXN],w[MAXN];<br>    <span class="hljs-type">int</span> sz,ans,rt;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pushup</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>{ size_[x]=size_[l[x]] + size_[r[x]] + w[x];}<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">lrotate</span><span class="hljs-params">(<span class="hljs-type">int</span> &amp;k)</span> </span><br><span class="hljs-function">    </span>{<br>        <span class="hljs-type">int</span> tree=r[k];<br>        r[k]=l[tree];<br>        l[tree]=k;<br>        size_[tree]=size_[k];<br>        <span class="hljs-built_in">pushup</span>(k);<br>        k=tree;<br>    }<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">rrotate</span><span class="hljs-params">(<span class="hljs-type">int</span> &amp;k)</span> </span><br><span class="hljs-function">    </span>{<br>        <span class="hljs-type">int</span> tree=l[k];<br>        l[k]=r[tree];<br>        r[tree]=k;<br>        size_[tree]=size_[k];<br>        <span class="hljs-built_in">pushup</span>(k);<br>        k=tree;<br>    }<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> &amp;k,<span class="hljs-type">int</span> x)</span> </span><br><span class="hljs-function">    </span>{<br>        <span class="hljs-keyword">if</span>(!k) {<br>            sz++;<br>            k=sz;<br>            size_[k]=<span class="hljs-number">1</span>;<br>            w[k]=<span class="hljs-number">1</span>;<br>            val[k]=x;<br>            rnd[k]=<span class="hljs-built_in">rand</span>();<br>            <span class="hljs-keyword">return</span>;<br>        }<br>        size_[k]++;<br>        <span class="hljs-keyword">if</span>(val[k]==x) <br>        {<br>            w[k]++;<br>        } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(val[k] &lt; x) <br>        {<br>            <span class="hljs-built_in">insert</span>(r[k],x);<br>            <span class="hljs-keyword">if</span>(rnd[r[k]] &lt; rnd[k]) <span class="hljs-built_in">lrotate</span>(k);<br>        } <span class="hljs-keyword">else</span> {<br>            <span class="hljs-built_in">insert</span>(l[k],x);<br>            <span class="hljs-keyword">if</span>(rnd[l[k]] &lt; rnd[k]) <span class="hljs-built_in">rrotate</span>(k);<br>        }<br>    }<br><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">del</span><span class="hljs-params">(<span class="hljs-type">int</span> &amp;k,<span class="hljs-type">int</span> x)</span> </span><br><span class="hljs-function">    </span>{<br>        <span class="hljs-keyword">if</span>(!k) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">if</span>(val[k]==x) <br>        {<br>            <span class="hljs-keyword">if</span>(w[k] &gt; <span class="hljs-number">1</span>) {<br>                w[k]--;<br>                size_[k]--;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            }<br>            <span class="hljs-keyword">if</span>(l[k]==<span class="hljs-number">0</span> || r[k]==<span class="hljs-number">0</span>) <br>            {<br>                k=l[k] + r[k];<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            } <br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(rnd[l[k]] &lt; rnd[r[k]]) <br>            {<br>                <span class="hljs-built_in">rrotate</span>(k);<br>                <span class="hljs-keyword">return</span> <span class="hljs-built_in">del</span>(k,x);<br>            } <br>            <span class="hljs-keyword">else</span> <br>            {<br>                <span class="hljs-built_in">lrotate</span>(k);<br>                <span class="hljs-keyword">return</span> <span class="hljs-built_in">del</span>(k,x);<br>            }<br>        } <br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(val[k] &lt; x) <br>        {<br>            <span class="hljs-type">bool</span> succ=<span class="hljs-built_in">del</span>(r[k],x);<br>            <span class="hljs-keyword">if</span>(succ) size_[k]--;<br>            <span class="hljs-keyword">return</span> succ;<br>        } <br>        <span class="hljs-keyword">else</span> <br>        {<br>            <span class="hljs-type">bool</span> succ=<span class="hljs-built_in">del</span>(l[k],x);<br>            <span class="hljs-keyword">if</span>(succ) size_[k]--;<br>            <span class="hljs-keyword">return</span> succ;<br>        }<br>    }<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">queryrank</span><span class="hljs-params">(<span class="hljs-type">int</span> k,<span class="hljs-type">int</span> x)</span> </span><br><span class="hljs-function">    </span>{<br>        <span class="hljs-keyword">if</span>(!k) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span>(val[k]==x)<br>            <span class="hljs-keyword">return</span> size_[l[k]] + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(x &gt; val[k]) <br>        {<br>            <span class="hljs-keyword">return</span> size_[l[k]] + w[k] + <span class="hljs-built_in">queryrank</span>(r[k],x);<br>        } <br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">queryrank</span>(l[k],x);<br>    }<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">querynum</span><span class="hljs-params">(<span class="hljs-type">int</span> k,<span class="hljs-type">int</span> x)</span> </span><br><span class="hljs-function">    </span>{<br>        <span class="hljs-keyword">if</span>(!k) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span>(x&lt;=size_[l[k]])<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">querynum</span>(l[k],x);<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(x &gt; size_[l[k]] + w[k])<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">querynum</span>(r[k],x - size_[l[k]] - w[k]);<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-keyword">return</span> val[k];<br>    }<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">querypre</span><span class="hljs-params">(<span class="hljs-type">int</span> k,<span class="hljs-type">int</span> x)</span> </span><br><span class="hljs-function">    </span>{<br>        <span class="hljs-keyword">if</span>(!k) <span class="hljs-keyword">return</span>;<br>        <span class="hljs-keyword">if</span>(val[k] &lt; x)<br>            ans=k,<span class="hljs-built_in">querypre</span>(r[k],x);<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-built_in">querypre</span>(l[k],x);<br>    }<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">querysub</span><span class="hljs-params">(<span class="hljs-type">int</span> k,<span class="hljs-type">int</span> x)</span> </span><br><span class="hljs-function">    </span>{<br>        <span class="hljs-keyword">if</span>(!k) <span class="hljs-keyword">return</span>;<br>        <span class="hljs-keyword">if</span>(val[k] &gt; x)<br>            ans=k,<span class="hljs-built_in">querysub</span>(l[k],x);<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-built_in">querysub</span>(r[k],x);<br>    }<br>}tree;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span><br><span class="hljs-function"></span>{<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-number">0</span>),cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>),cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">srand</span>(<span class="hljs-number">114514</span>);<br>    cin&gt;&gt;n;<br>    <span class="hljs-type">int</span> op,k;<br>    <span class="hljs-keyword">while</span>(n--)<br>    {<br>        cin&gt;&gt;op&gt;&gt;k;<br>        <span class="hljs-keyword">switch</span>(op)<br>        {<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                tree.<span class="hljs-built_in">insert</span>(tree.rt,k);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>                cout&lt;&lt;tree.<span class="hljs-built_in">querynum</span>(tree.rt,k)&lt;&lt;endl;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>                tree.<span class="hljs-built_in">del</span>(tree.rt,k);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                <span class="hljs-keyword">break</span>;<br>        }<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="散列">散列</h2><p>散列方法是按关键字编址的一项技术。以关键字<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>K</mi></mrow><annotation encoding="application/x-tex">K</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span></span></span></span>为自变量, 通过函数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi><mo stretchy="false">(</mo><mi>K</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">h(K)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">h</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mclose">)</span></span></span></span>计算地址，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi><mo stretchy="false">(</mo><mi>K</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">h(K)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">h</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mclose">)</span></span></span></span>称为<strong>散列函数</strong>。</p><p>散列方法不仅是一种快速的查找方法，也是一种重要的存储方式。按散列方式构造的存储结构被称为散列表，散列表中的一个位置也被称为槽。</p><p>冲突：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>K</mi><mn>1</mn></msub><mo mathvariant="normal">≠</mo><msub><mi>K</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">K_1\neq K_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel"><span class="mrel"><span class="mord vbox"><span class="thinbox"><span class="rlap"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="inner"><span class="mord"><span class="mrel"></span></span></span><span class="fix"></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi><mo stretchy="false">(</mo><msub><mi>K</mi><mn>1</mn></msub><mo stretchy="false">)</mo><mo>=</mo><mi>h</mi><mo stretchy="false">(</mo><msub><mi>K</mi><mn>2</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">h(K_1)=h(K_2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">h</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">h</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>。没有冲突的散列函数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi></mrow><annotation encoding="application/x-tex">h</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">h</span></span></span></span> 是很不好找的：对于动态数据困难更大。</p><p>散列方法核心：散列函数和<strong>冲突消解方法</strong></p><p>散列函数是均匀的：设<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>K</mi></mrow><annotation encoding="application/x-tex">K</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span></span></span></span>是从关键词集合中随机选取的一个关键词，则<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi><mo stretchy="false">(</mo><mi>K</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">h(K)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">h</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mclose">)</span></span></span></span>以同等概率取区间<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mn>0</mn><mtext>，</mtext><mi>M</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[0，M−1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">0</span><span class="mord cjk_fallback">，</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span>中的每一个值，并与其它关键字已散列到哪个槽位无关。通常应使<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi></mrow><annotation encoding="application/x-tex">h</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">h</span></span></span></span>与组成<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>K</mi></mrow><annotation encoding="application/x-tex">K</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span></span></span></span>的所有符号有关。</p><h3 id="散列函数">散列函数</h3><h4 id="除法散列">除法散列</h4><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>h</mi><mo stretchy="false">(</mo><mi>K</mi><mo stretchy="false">)</mo><mo>=</mo><mi>K</mi><mspace></mspace><mspace width="1em"></mspace><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>M</mi></mrow><annotation encoding="application/x-tex">h(K)=K\mod M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">h</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:1em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span></span></span></span></span></p><p>除数的大小应选择得当，一般取略大于元素个数的素数；除数的性质与<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi><mo stretchy="false">(</mo><mi>K</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">h(K)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">h</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mclose">)</span></span></span></span>的值在给定区域中的分布情况和冲突产生的数量均密切相关。除法散列函数是一种简单、常用的构造散列的方法，并且不要求事先知道关键词的分布。</p><h4 id="乘法散列">乘法散列</h4><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>h</mi><mo stretchy="false">(</mo><mi>K</mi><mo stretchy="false">)</mo><mo>=</mo><mo stretchy="false">⌊</mo><mi>M</mi><mo stretchy="false">(</mo><mi>K</mi><mi>θ</mi><mi>m</mi><mi>o</mi><mi>d</mi><mn>1</mn><mo stretchy="false">)</mo><mo stretchy="false">⌋</mo></mrow><annotation encoding="application/x-tex">h(K) =\lfloor M( K\theta mod1) \rfloor</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">h</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">⌊</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mord">1</span><span class="mclose">)⌋</span></span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>θ</mi></mrow><annotation encoding="application/x-tex">\theta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span></span></span></span>值接近0或1将导致散列地址集中在表的末端，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>θ</mi></mrow><annotation encoding="application/x-tex">\theta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span></span></span></span>取0.618实验效果较好。</p><h3 id="冲突消解">冲突消解</h3><h4 id="拉链法">拉链法</h4><p>对<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi></mrow><annotation encoding="application/x-tex">h</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">h</span></span></span></span>值域<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mn>0</mn><mo separator="true">,</mo><mi>M</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[0 , M−1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span>中的每个值保持一个链表。</p><p>每个链表中存放一组关键词互相冲突的记录，该组关键词有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi><mo stretchy="false">(</mo><mi>K</mi><mn>1</mn><mo stretchy="false">)</mo><mo>=</mo><mi>h</mi><mo stretchy="false">(</mo><mi>K</mi><mn>2</mn><mo stretchy="false">)</mo><mo>=</mo><mo>…</mo><mo>=</mo><mi>h</mi><mo stretchy="false">(</mo><mi>K</mi><mi>t</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">h(K1)=h(K2)=…=h(Kt)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">h</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">h</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mord">2</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">h</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mord mathnormal">t</span><span class="mclose">)</span></span></span></span>。</p><p>每个链表<code>LIST[i]</code>有一个表头<code>HEAD[i]</code>, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi><mo>=</mo><mi>h</mi><mo stretchy="false">(</mo><mi>K</mi><mo stretchy="false">)</mo><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">i=h(K)+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6595em;"></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">h</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>. 同一个链表中的记录按某种次序链接在一起。</p><p>期望时间复杂度<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo>+</mo><mi>λ</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1+\lambda)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">λ</span><span class="mclose">)</span></span></span></span>，空间复杂度<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>M</mi><mo>+</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(M+N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span></p><h4 id="开地址法">开地址法</h4><p>插入关键词值为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>K</mi></mrow><annotation encoding="application/x-tex">K</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span></span></span></span>的新元素的方法是：从地址<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi><mo stretchy="false">(</mo><mi>K</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">h(K)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">h</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mclose">)</span></span></span></span>开始, 按照某种次序探查插入新元素的空位置。其被检查的位置序列称为探查序列。</p><ul><li>线性探查</li><li>伪随机探查</li><li>二次探查</li><li>双散列</li></ul><p><strong>线性探查法分析</strong></p><ul><li>优点: 简单</li><li>缺点: 基本聚集（容易使许多元素在散列表中连成一片，从而使探查的次数增加，影响查找效率）</li><li>经验：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi></mrow><annotation encoding="application/x-tex">M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span></span></span></span>一般取<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span></span></span></span>的5倍</li></ul><p>不能简单地将一个元素清除，这会隔离探查序列后面的元素，从而影响后面元素的查找过程。</p><h2 id="查找长度">查找长度</h2><p><strong>平均查找长度（Average Search Length, ASL）</strong> 是二叉搜索树或其他数据结构中，查找操作的平均路径长度的度量。它衡量了查找某个元素所需要的比较次数。</p><p>查找操作可以分为两种情况：</p><ul><li><strong>查找成功（Successful Search）</strong>：即查找到目标元素。</li><li><strong>查找失败（Unsuccessful Search）</strong>：即没有找到目标元素。</li></ul><p><strong>查找成功的平均查找长度</strong> 是指，在所有成功查找的情况下，平均需要多少次比较才能找到目标元素。它通常由树的<strong>深度</strong>（即节点到根的距离）来度量。</p><p>计算方法：</p><ul><li>对于每个成功查找的节点，我们记录从根节点到该节点的路径长度（即节点的深度）。</li><li>查找成功的平均查找长度是所有成功查找的路径长度的平均值。</li></ul><p>假设一个二叉搜索树中有 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> 个节点，并且我们从根节点到每个节点的路径长度为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>d</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">d_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，其中 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>≤</mo><mi>i</mi><mo>≤</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">1 \leq i \leq n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7804em;vertical-align:-0.136em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7955em;vertical-align:-0.136em;"></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> 是每个节点的索引。那么，查找成功的平均查找长度 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mtext>ASL</mtext><mtext>success</mtext></msub></mrow><annotation encoding="application/x-tex">\text{ASL}_{\text{success}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord text"><span class="mord">ASL</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord text mtight"><span class="mord mtight">success</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 可以通过以下公式计算：</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mtext>ASL</mtext><mtext>success</mtext></msub><mo>=</mo><mfrac><mn>1</mn><mi>n</mi></mfrac><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><msub><mi>d</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">\text{ASL}_{\text{success}} = \frac{1}{n} \sum_{i=1}^{n} d_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord text"><span class="mord">ASL</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord text mtight"><span class="mord mtight">success</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.9291em;vertical-align:-1.2777em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">n</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>其中，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>d</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">d_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 是第 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6595em;"></span><span class="mord mathnormal">i</span></span></span></span> 个节点的深度。</p><p><strong>查找失败的平均查找长度</strong> 是指，在查找操作没有找到目标元素的情况下，平均需要多少次比较。查找失败时，路径长度是指从根节点到查找失败位置的路径长度，即搜索的终止位置。</p><p>假设树的总节点数为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span>，查找失败时，路径长度一般会比查找成功时长，因为失败的查找通常会到达树的某一空子树。计算失败的查找路径长度时，涉及所有可能查找的失败位置。</p><p>对于二叉搜索树，查找失败的路径通常与树的结构有很大关系。如果树接近平衡（即树的高度较小），则查找失败时的路径较短。如果树是不平衡的（例如，像链表一样），失败路径可能较长。</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mtext>ASL</mtext><mtext>failure</mtext></msub><mo>=</mo><mfrac><mn>1</mn><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></mfrac><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></munderover><msubsup><mi>d</mi><mi>i</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msubsup></mrow><annotation encoding="application/x-tex">\text{ASL}_{\text{failure}} = \frac{1}{n+1} \sum_{i=1}^{n+1} d'_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord text"><span class="mord">ASL</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord text mtight"><span class="mord mtight">failure</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3.0788em;vertical-align:-1.2777em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8011em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8019em;"><span style="top:-2.453em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>其中，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>d</mi><mi>i</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msubsup></mrow><annotation encoding="application/x-tex">d'_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0106em;vertical-align:-0.2587em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-2.4413em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2587em;"><span></span></span></span></span></span></span></span></span></span> 是失败查找的位置的深度，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span> 是树中假设的额外一个失败查找位置（即空子树位置）。这个计算通常需要根据树的具体结构来分析，或者通过模拟来估算。</p><h1>排序</h1><h2 id="排序算法复杂度">排序算法复杂度</h2><table><thead><tr><th>排序算法</th><th>时间复杂度 (最优)</th><th>时间复杂度 (平均)</th><th>时间复杂度 (最坏)</th><th>空间复杂度</th><th>稳定性</th></tr></thead><tbody><tr><td>冒泡排序</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td><td>稳定</td></tr><tr><td>选择排序</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td><td>不稳定</td></tr><tr><td>插入排序</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td><td>稳定</td></tr><tr><td>归并排序</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n \log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n \log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n \log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></td><td>稳定</td></tr><tr><td>快速排序</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n \log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n \log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(\log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></td><td>不稳定</td></tr><tr><td>堆排序</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n \log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n \log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>  (建堆<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(\log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>)</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n \log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td><td>不稳定</td></tr><tr><td>计数排序</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mi>k</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n + k)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">)</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mi>k</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n + k)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">)</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mi>k</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n + k)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">)</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>k</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(k)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">)</span></span></span></span></td><td>稳定</td></tr><tr><td>桶排序</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mi>k</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n + k)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">)</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mi>k</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n + k)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">)</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mi>k</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n + k)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">)</span></span></span></span></td><td>稳定</td></tr><tr><td>基数排序</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>k</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(nk)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03148em;">nk</span><span class="mclose">)</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>k</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(nk)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03148em;">nk</span><span class="mclose">)</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>k</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(nk)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03148em;">nk</span><span class="mclose">)</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mi>k</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n + k)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">)</span></span></span></span></td><td>稳定</td></tr><tr><td>希尔排序</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n \log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mfrac><mn>3</mn><mn>2</mn></mfrac></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^\frac{3}{2})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.204em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.954em;"><span style="top:-3.363em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8443em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.2255em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td><td>不稳定</td></tr></tbody></table><h1>其他数据结构</h1><h2 id="并查集">并查集</h2><p>时间复杂度：</p><ul><li>查找： <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></li><li>合并： <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></li><li>启发式合并： <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O( n\log n )</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></li></ul><p>空间复杂度：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></p>]]></content>
    
    
    <categories>
      
      <category>课程笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>海明码</title>
    <link href="/2024/hanming-code/"/>
    <url>/2024/hanming-code/</url>
    
    <content type="html"><![CDATA[<h2 id="组成">组成</h2><p>海明码具有一位纠错能力，通过插入多位冗余码来进行错误检测和纠正。</p><p>假设数据码原码有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span>位，那么，假设需要<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>r</mi></mrow><annotation encoding="application/x-tex">r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span></span></span></span>位冗余码来纠错，那么新的码总共有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>=</mo><mi>k</mi><mo>+</mo><mi>r</mi></mrow><annotation encoding="application/x-tex">n = k + r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span></span></span></span>位。想要能做到纠正和错误检测，那么冗余码就要覆盖所有出错的情况，共有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">2^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6644em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span></span></span>种，加上完全正确的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>种，即：</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msup><mn>2</mn><mi>r</mi></msup><mo>≥</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo>=</mo><mi>k</mi><mo>+</mo><mi>r</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2^r \ge n + 1 = k + r +1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8504em;vertical-align:-0.136em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7144em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></span></p><p>将数据从<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>开始编号，第<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>i</mi></msup></mrow><annotation encoding="application/x-tex">2^i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8247em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8247em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span></span></span></span></span></span></span>为校验位，其他位为数据位。</p><h2 id="计算">计算</h2><p>第<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6595em;"></span><span class="mord mathnormal">i</span></span></span></span>位校验位<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>C</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">C_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>负责位置编号二进制第<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>log</mi><mo>⁡</mo><mi>i</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">\log i+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>低位为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>的数据位，例如：</p><ul><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>C</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">C_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>负责<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo separator="true">,</mo><mn>3</mn><mo separator="true">,</mo><mn>5</mn><mo separator="true">,</mo><mn>7</mn></mrow><annotation encoding="application/x-tex">1,3,5,7</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">5</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">7</span></span></span></span>……位（倒数第一位为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>）</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>C</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">C_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>负责<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><mo separator="true">,</mo><mn>3</mn><mo separator="true">,</mo><mn>6</mn><mo separator="true">,</mo><mn>7</mn></mrow><annotation encoding="application/x-tex">2,3,6,7</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">6</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">7</span></span></span></span>……位（倒数第二位为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>）</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>C</mi><mn>4</mn></msub></mrow><annotation encoding="application/x-tex">C_4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>负责<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>4</mn><mo separator="true">,</mo><mn>5</mn><mo separator="true">,</mo><mn>6</mn><mo separator="true">,</mo><mn>7</mn></mrow><annotation encoding="application/x-tex">4,5,6,7</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">4</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">5</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">6</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">7</span></span></span></span>……位（倒数第三位为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>）</li></ul><p>计算校验位主要有<strong>配奇原则</strong>和<strong>配偶原则</strong>，就是要让这一校验位所负责的位数（包括校验位自己）里面，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>的数量分别是奇数或偶数。</p><p>配偶原则：</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>C</mi><mi>i</mi></msub><mo>=</mo><msub><mi>D</mi><mn>1</mn></msub><mo>⊕</mo><msub><mi>D</mi><mn>2</mn></msub><mo>⊕</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>⊕</mo><msub><mi>D</mi><mi>m</mi></msub></mrow><annotation encoding="application/x-tex">C_i = D_1 \oplus D_2 \oplus ... \oplus D_m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord">...</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>配奇原则：</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>C</mi><mi>i</mi></msub><mo>=</mo><mover accent="true"><mrow><msub><mi>D</mi><mn>1</mn></msub><mo>⊕</mo><msub><mi>D</mi><mn>2</mn></msub><mo>⊕</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>⊕</mo><msub><mi>D</mi><mi>m</mi></msub></mrow><mo stretchy="true">‾</mo></mover><mo>=</mo><mn>1</mn><mo>⊕</mo><msub><mi>D</mi><mn>1</mn></msub><mo>⊕</mo><msub><mi>D</mi><mn>2</mn></msub><mo>⊕</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>⊕</mo><msub><mi>D</mi><mi>m</mi></msub></mrow><annotation encoding="application/x-tex">C_i = \overline {D_1 \oplus D_2 \oplus ... \oplus D_m}=1\oplus D_1 \oplus D_2 \oplus ... \oplus D_m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0333em;vertical-align:-0.15em;"></span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8833em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">...</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.8033em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord">...</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><h2 id="纠错">纠错</h2><p>重新计算每一位校验位：</p><p>配偶原则：</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>P</mi><mi>i</mi></msub><mo>=</mo><msub><mi>C</mi><mi>i</mi></msub><mo>⊕</mo><msub><mi>D</mi><mn>1</mn></msub><mo>⊕</mo><msub><mi>D</mi><mn>2</mn></msub><mo>⊕</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>⊕</mo><msub><mi>D</mi><mi>m</mi></msub></mrow><annotation encoding="application/x-tex">P_i=C_i \oplus D_1 \oplus D_2 \oplus ... \oplus D_m </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord">...</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>配奇原则：</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>P</mi><mi>i</mi></msub><mo>=</mo><mover accent="true"><mrow><msub><mi>C</mi><mi>i</mi></msub><mo>⊕</mo><msub><mi>D</mi><mn>1</mn></msub><mo>⊕</mo><msub><mi>D</mi><mn>2</mn></msub><mo>⊕</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>⊕</mo><msub><mi>D</mi><mi>m</mi></msub></mrow><mo stretchy="true">‾</mo></mover><mo>=</mo><mn>1</mn><mo>⊕</mo><msub><mi>C</mi><mi>i</mi></msub><mo>⊕</mo><msub><mi>D</mi><mn>1</mn></msub><mo>⊕</mo><msub><mi>D</mi><mn>2</mn></msub><mo>⊕</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>⊕</mo><msub><mi>D</mi><mi>m</mi></msub></mrow><annotation encoding="application/x-tex">P_i=\overline{C_i \oplus D_1 \oplus D_2 \oplus ... \oplus D_m}=1 \oplus C_i \oplus  D_1 \oplus D_2 \oplus ... \oplus D_m </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0333em;vertical-align:-0.15em;"></span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8833em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">...</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.8033em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord">...</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>对于配奇或者配偶原则，得到的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>P</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">P_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>都应该是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span>，如果不是，那么就说明有错，错误的位置是：</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><msub><mi>P</mi><mn>4</mn></msub><msub><mi>P</mi><mn>2</mn></msub><msub><mi>P</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">...P_4 P_2 P_1 </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord">...</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>将这一位取反就是正确的值。</p>]]></content>
    
    
    <categories>
      
      <category>CS 杂谈</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计组</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux课程笔记</title>
    <link href="/2024/linux-note/"/>
    <url>/2024/linux-note/</url>
    
    <content type="html"><![CDATA[<h1>Linux和开源</h1><h2 id="UNIX">UNIX</h2><h3 id="诞生">诞生</h3><ul><li><strong>时间</strong>：1969</li><li><strong>地点</strong>：AT&amp;T 贝尔实验室</li><li><strong>人物</strong>：Ken Thompson和Dennis Ritchie</li><li><strong>动机</strong>：玩游戏</li><li><strong>理念</strong>：简单易用（KISS，Keep it simple, stupid!）</li></ul><p>最初使用<strong>汇编语言</strong>开发，1973年，二人使用C重写了UNIX源码。</p><h3 id="发展">发展</h3><p>UNIX以<strong>源代码形式</strong>发行，形成了两个重要流派：</p><table><thead><tr><th style="text-align:center">UNIX版本</th><th style="text-align:center">主要发行版分支</th></tr></thead><tbody><tr><td style="text-align:center">UNIX SYSTEM V</td><td style="text-align:center">AIX、SOLARIS、HP-UX、IRIX</td></tr><tr><td style="text-align:center">Berkeley UNIX</td><td style="text-align:center">FreeBSD、NetBSD、OpenBSD</td></tr></tbody></table><blockquote><p>BSD：Berkeley Software Distribution</p></blockquote><p>80年代，UNIX版本剧增，各版本间差别扩大，于是就有了对每种实现必须定义各种限制的说明的<strong>标准化</strong>。两个重要的标准是：</p><ul><li><p><strong>系统V接口定义（SVID，System V Interface Definition）</strong>，来自AT&amp;T</p></li><li><p><strong>可移植操作系统接口（POSIX，Portable Operating System Interface）</strong>，来自ISO和IEEE</p></li></ul><blockquote><p>目前几乎所有的UNIX/Linux发行版均遵循POSIX标准。</p></blockquote><h2 id="Linux的兴起">Linux的兴起</h2><p>目前应用最广泛的类UNIX系统。<strong>2个人4个1</strong>：</p><ul><li>2个人：Richard Stallman &amp; Linus Torvalds</li><li>4个1：<ul><li>1个项目：GNU</li><li>1个组织：FSF</li><li>1个理念：Copyleft</li><li>1个许可证：GPL</li></ul></li></ul><h3 id="GNU计划">GNU计划</h3><p>GNU is Not Unix.</p><p>1983年9月27日发起，目标：</p><ul><li>创建一个<strong>自由共享</strong>、<strong>可被任何人修改</strong>的类UNIX系统</li><li>与UNIX兼容</li><li>不受UNIX名字和代码私有权限制</li><li>能运行UNIX程序</li></ul><p>GNU的执行者是<strong>自由软件基金会</strong>（FSF，Free Software Foundation），在1985年成立，目标：</p><ul><li>执行GNU计划</li><li>提供技术、法律、财政支持</li><li>开发更多自由软件</li></ul><p>GNU完成了许多UNIX应用程序的仿制品，例如：</p><ul><li>GCC</li><li>GDB：源代码级程序调试工具</li><li>GNU make：软件构建工具</li><li>bash</li><li>GNU Emacs：文本编辑器</li></ul><p>但是并没有GNU并没有成功开发Linux内核。</p><h3 id="GPL许可证">GPL许可证</h3><p>Richard Stallman提出<strong>Copyleft</strong>（著佐权）概念：著作权归原作者所有，但其他一切权利可以让所有人共享：</p><ul><li>授予使用者运行、赋值、修改、发行修改后的程序的权利</li><li>不能在修改后的软件上添加限制</li><li>修改后的软件要以同等授权方式发布回馈社会</li></ul><p>基于Copyleft，Stallman提出了<strong>GPL许可证</strong>（GNU General Public License）。</p><p>GNU开发的工具都在GPL下发行。</p><p>意义：</p><ul><li>确保任何使用自由软件创建的新产品，都必须在GPL协议下发行。</li><li>以自由软件为基础，修改后重新发行也必须公开源代码。</li><li>允许商业使用</li></ul><h3 id="Linux内核">Linux内核</h3><p>Linus Torvalds希望开发一个自由，开放源代码的Unix，并在1991年在GPL协议下发布了第一版Linux内核。Linux的吉祥物为Tux。</p><p>Linux内核目前在Linux基金会支持下由贡献者共同开发，Linus拥有内核能接受哪些更改和谁可以成为维护者的最终决定权。</p><p>Linux既是操作系统内核，又是基于内核的操作系统。Linux=GNU Tools+Linus Kernel，故也称为GNU/Linux。</p><p>Linux包括内核版本和发行版本。</p><ul><li>内核版本由社区（<a href="https://www.kernel.org/">https://www.kernel.org/</a> ）统一发布，包括主、次版本号和修订次数。</li><li>发行版本的名称和版本号由发行维护者决定，分为<strong>商业发行版</strong>和<strong>社区发行版</strong>。</li></ul><h2 id="开源软件运动">开源软件运动</h2><p>自由软件运动蓬勃发展后，并非全部自由软件用户和开发者都赞同自由软件运动的目标。1998年，自由软件阵营中的部分成员分裂出来，并以“开源”为名继续开展活动。而后，开源的理念不断兴起，不断发展与壮大，其声势与影响力早已远超自由软件的运动。</p><p>埃里克·雷蒙1997在《大教堂与集市》中提出开放源代码软件理念，对自由软件的商业模式加以描述和讨论：<strong>自由软件存在的意义不是替代现存的商业软件，共享源代码可以产生更好的结果。</strong></p><p>1998年，<strong>开放源代码促进会</strong>（Open Source Initiative，OSI）成立，推动开源软件发展，统一了开源软件的认证标准。</p><p>OSI首次正式提出开源软件的概念：</p><ul><li>一种源代码可以任意获取的计算机软件</li><li>软件著作权持有人在软件协议的规定之下保留一部分权利</li><li>允许用户学习、修改以及以任何目的向任何人分发该软件</li><li>开源协议通常符合开放源代码的定义的要求</li></ul><p>这之后也诞生了一些一些开源许可证，如<strong>Apache、BSD、MIT、Mozilla、木兰公共许可证</strong>等。木兰开源许可证是中国首个开源许可证，分为木兰宽松许可证和木兰公共许可证。</p><h2 id="系统架构">系统架构</h2><p>Linux操作系统的结构总体上分为内核空间和用户空间两部分：</p><ul><li><p><strong>内核空间</strong>：管理系统资源、提供服务以及控制硬件</p></li><li><p><strong>用户空间</strong>：包括用户应用程序和系统工具，通过内核提供的接口来访问系统资源</p></li></ul><h3 id="内核空间">内核空间</h3><p>主要功能有：</p><ul><li>进程管理</li><li>内存管理</li><li>文件系统</li><li>设备管理</li><li>网络堆栈管理</li><li>系统调用</li></ul><h3 id="用户空间">用户空间</h3><p>包括用户程序和系统工具，重要组件：<strong>库函数</strong>和<strong>shell</strong></p><p>库函数即<strong>预先编写好的代码</strong>，以库的形式组织。库函数执行各种常见的任务，如输入/输出处理、数学计算等，避免开发者重写相同代码，提高程序开发效率和代码可维护性，包括<strong>静态库和动态库</strong>。</p><ul><li><p>静态库</p><ul><li><p>在程序编译链接时被包含进最终的可执行文件中</p></li><li><p>程序运行时，静态库中的代码成为程序的一部分</p></li><li><p>Linux系统中，静态库通常以.a结尾</p></li></ul></li><li><p>动态库</p><ul><li><p>在程序运行时被动态加载</p></li><li><p>多个应用程序可以共享同一份库文件，从而节省磁盘空间和内存</p></li><li><p>动态库在Linux系统中通常以.so为结尾</p></li></ul></li></ul><p>shell是<strong>一类命令解释程序的统称</strong>，为用户提供与操作系统交互的接口。用户通过shell提供的界面输入命令，shell解析这些命令并调用相应的程序来执行，然后将执行的结果反馈给用户。功能有：</p><ul><li><p>命令执行：用户输入命令后，shell查找命令并执行。</p></li><li><p>重定向和管道</p><ul><li><p>重定向：可将命令的输出保存到文件中，或者从文件中读取输入。</p></li><li><p>管道：允许将一个命令的输出作为另一个命令的输入。</p></li></ul></li><li><p>作业控制：允许用户控制后台作业的执行，如暂停、恢复和终止作业。</p></li><li><p>脚本编程：shell还是一个程序开发与运行环境，允许用户编写并执行由一系列命令组成的脚本程序，自动实现复杂任务操作。</p></li></ul><h2 id="Linux的核心特征">Linux的核心特征</h2><p>Linux系统作为一种不断发展的现代操作系统，既继承了类Unix系统的共性，又拥有众多独特特性。</p><p><strong>专有软件不是Linux的核心特征。</strong></p><h3 id="开源">开源</h3><p>Linux基于开源协议发布，其源代码可以自由地查看、修改和分发推动了全球范围内的合作与改进，使Linux系统持续进化。</p><h3 id="多用户和多任务">多用户和多任务</h3><ul><li><p>多用户即多用户同时共同使用计算机。各个用户执行不同程序，提供安全机制，隔离用户。</p></li><li><p>多任务即启动一个任务后，继续执行其他任务，并允许用户在前台和后台多个任务间进行切换。</p></li></ul><h3 id="硬件支持与广泛兼容性">硬件支持与广泛兼容性</h3><p>Linux支持广泛的硬件平台，包括个人计算机、服务器、嵌入式设备和超级计算机，并能在多种CPU架构上运行，如x86、x86_64、ARM、SPARC等。</p><p>Linux与众多开放标准和协议兼容，如POSIX、UNIX规范等。</p><h3 id="稳定可靠、网络功能强大与可定制性">稳定可靠、网络功能强大与可定制性</h3><ul><li><p>Linux成熟稳定，能长时间运行无需重启，在服务器领域应用广泛。</p></li><li><p>网络功能强大，支持各种网络协议和标准，广泛用于各类网络服务器。</p></li><li><p>Linux提供高度可定制性，用户可根据自身需求选择不同的桌面环境、窗口管理器和应用程序。其发行版众多，可挑选适合自己的Linux版本。</p></li></ul><h3 id="社区支持">社区支持</h3><p>Linux系统获得了广泛的社区支持，社区由开发者、用户和爱好者组成，他们共同贡献代码、分享知识、提供技术支持并推广Linux的使用。</p><p>在内核开发方面，有Linux内核社区；几乎每个Linux发行版都有自己的社区，如Ubuntu、Debian、openEuler社区。</p><h1>基本概念与使用</h1><h2 id="登录">登录</h2><p>UNIX是一个多用户操作系统，用户在使用UNIX系统前必须进行登录，登录是识别用户身份、分配资源允许用户使用系统的过程。</p><p>登录方式主要有本地登录和远程登录（<code>ssh 用户名@ip地址或域名</code>）。</p><p><code>passwd [username]</code>修改自己或别人的口令，也可以用于生成初始口令（root）。</p><p>退出登录shell的三种方法：</p><ul><li><code>exit</code></li><li>[Ctrl+D]</li><li><code>logout</code></li></ul><p><code>quit</code>不能退出系统。</p><h2 id="命令行">命令行</h2><p>用户登录成功后，就能看到用于输入命令的命令行，以及在命令行中为用户提示信息的命令提示符。</p><p>最简单的命令提示符只有一个字符：</p><ul><li>管理员（root）：<code>#</code></li><li>普通用户：<code>$</code></li></ul><p>用户可以设置提示符，显示丰富系统信息。</p><p>命令行快捷键：</p><table><thead><tr><th style="text-align:center">快捷键</th><th style="text-align:center">功能</th></tr></thead><tbody><tr><td style="text-align:center">[Ctrl+h]</td><td style="text-align:center">删除单个字符</td></tr><tr><td style="text-align:center">[Ctrl+u]</td><td style="text-align:center">删除单行</td></tr><tr><td style="text-align:center">[Ctrl+a]</td><td style="text-align:center">跳到开头</td></tr><tr><td style="text-align:center">[Ctrl+e]</td><td style="text-align:center">调到结尾</td></tr><tr><td style="text-align:center">[Ctrl+c]</td><td style="text-align:center">中断运行</td></tr><tr><td style="text-align:center">[Ctrl+z]</td><td style="text-align:center">挂起程序</td></tr><tr><td style="text-align:center">[Ctrl+l]</td><td style="text-align:center">清屏</td></tr><tr><td style="text-align:center">[Tab]</td><td style="text-align:center">自动补全</td></tr></tbody></table><h2 id="命令">命令</h2><p>命令分为<strong>外部命令</strong>和<strong>内部命令</strong>。</p><ul><li>外部命令：磁盘中程序的命令（<code>man</code>，<code>info</code>）</li><li>内部命令：shell本身的一部分或shell内部识别、执行的命令，执行速度快（<code>help</code>）</li></ul><p>不同的流派Unix选项写法不同，但一般会兼容：</p><table><thead><tr><th style="text-align:center">流派</th><th style="text-align:center">连接符写法</th><th style="text-align:center">选项表示</th></tr></thead><tbody><tr><td style="text-align:center">System V（常用）</td><td style="text-align:center"><code>-</code></td><td style="text-align:center">字母</td></tr><tr><td style="text-align:center">BSD</td><td style="text-align:center"></td><td style="text-align:center">字母</td></tr><tr><td style="text-align:center">GNU</td><td style="text-align:center"><code>--</code></td><td style="text-align:center">单词</td></tr></tbody></table><h2 id="终端">终端</h2><p>通过<code>who</code>命令可以查看登录终端。</p><ul><li><p><strong>物理终端</strong>：一套输入输出设备，用于用户登录和使用计算机；如连接在计算机上的显示器、键盘鼠标；与名词主机对应</p></li><li><p><strong>虚拟终端</strong>（tty，teletypewriter，电传打字机的简称）：<strong>附加在物理终端之上</strong>，用软件方式虚拟实现。类Unix系统启动后默认为用户创建几个虚拟终端，实现多用户的同时登录或单用户的多终端登录。虚拟终端对应的设备文件是<code>/dev/tty#</code>（#为非负整数）。</p></li><li><p>终端为<code>:0</code>时表示是<strong>图形用户界面终端</strong>。</p></li></ul><p>虚拟终端可以使用虚拟控制台实现。Linux通常启用6个虚拟终端：tty1图形终端，tty2-tty6字符终端。可以使用<strong>虚拟控制台</strong>切换虚拟终端：</p><ul><li>切换方式1：Ctrl-Alt-F[1-6]</li><li>切换方式2：<code>#chvt n</code></li></ul><p>通过<code>tty</code>命令来查看当前的虚拟终端号。但是<code>tty</code>并不都是虚拟终端。</p><p><strong>伪终端</strong>（pty）是由<strong>远程登录软件或终端模拟软件</strong>模拟出的终端，主要有两种应用场景：</p><ul><li>图形界面下进行命令操作</li><li>远程登录</li></ul><p>pts(pseudo-terminal slave)是pty的实现方法。伪终端以<code>pts/n</code>的形式命名。</p><p>使用<code>whoami</code>可以查看用户名，<code>who am i</code>可以查看终端号等。</p><h2 id="shell">shell</h2><p>shell有很多种类，在<code>/bin/*sh</code>中：</p><table><thead><tr><th style="text-align:center">名称</th><th style="text-align:center">解释</th><th style="text-align:center">功能</th></tr></thead><tbody><tr><td style="text-align:center"><code>sh</code></td><td style="text-align:center">Bourne Shell（sh）</td><td style="text-align:center">大多数UNIX操作系统的标准shell和默认shell</td></tr><tr><td style="text-align:center"><code>ksh</code></td><td style="text-align:center">Korn Shell（ksh）</td><td style="text-align:center">Bourne Shell的一个超集，<code>sh</code>程序可以不修改在<code>ksh</code>上运行</td></tr><tr><td style="text-align:center"><code>csh</code></td><td style="text-align:center">C Shell（csh）</td><td style="text-align:center">由加州大学伯克利分校开发，采用C语言风格的语法</td></tr><tr><td style="text-align:center"><code>bash</code></td><td style="text-align:center">Bourne Again Shell（bash）</td><td style="text-align:center">Linux的标准shell和默认shell，基于<code>sh</code></td></tr></tbody></table><p>只需要键入新shell名就可以更换shell。本质是创建shell子进程，在子进程中运行新shell。如果想永久改变，可以修改账户配置文件<code>/etc/passwd</code>或使用<code>chsh</code>命令。</p><h2 id="安装软件">安装软件</h2><p>编译源代码安装与基于网络存储库安装。</p><ul><li><p>编译软件源代码：</p><p>从软件的官方网站或可信的第三方网站下载软件的源代码，然后使用编译工具进行编译完成安装过程。这种安装软件方法较为灵活，可以选择下载特定版本或者最新版本。软件包每次更新都需要重新编译，对初学者存在一定难度。</p></li><li><p>基于网络存储库安装</p><p>各种Linux发行版有许多官方和非官方的软件存储库，保存了大量经过编译的软件包，可以直接用于安装或更新。可以通过包管理器工具访问存储库，选择所需软件进行安装或更新。简单易行，适合初学者。软件已经过编译，安装速度比从源代码编译更快。</p></li></ul><p>基于网络库的安装工具有两种，dnf和apt：</p><table><thead><tr><th style="text-align:center">安装工具</th><th style="text-align:center">介绍</th></tr></thead><tbody><tr><td style="text-align:center">apt（Advanced Package Tool）</td><td style="text-align:center">基于Debian的Linux发行版中使用的包管理器。提供命令行界面，使户能够方便搜索、安装、更新和卸载软件包。具有自动解决依赖关系的功能，可以快速地安装复杂的软件包集合。还提供了软件仓库管理功能，允许用户方便地添加、删除和配置软件仓库。</td></tr><tr><td style="text-align:center">dnf（Dandified YUM）</td><td style="text-align:center">dnf 是 YUM（Yellowdog Updater, Modified）的下一代版本管理器，旨在解决 YUM 的一些性能和依赖管理问题，并提供更好的用户体验。提供了命令行界面，支持软件包的搜索、安装、更新和卸载。具有速度快、可扩展性强，支持并可以通过插件来扩展其功能，支持多线程并发下载和安装，提高了软件包的安装速度</td></tr></tbody></table><p>dnf命令语法格式为<code>dnf [子命令] [选项] [软件包名称...]</code>，常用子命令有：</p><table><thead><tr><th style="text-align:center">命令</th><th style="text-align:center">介绍</th></tr></thead><tbody><tr><td style="text-align:center"><code>install</code></td><td style="text-align:center">安装软件包</td></tr><tr><td style="text-align:center"><code>update</code></td><td style="text-align:center">更新软件包</td></tr><tr><td style="text-align:center"><code>remove</code></td><td style="text-align:center">卸载软件包</td></tr><tr><td style="text-align:center"><code>grouplist</code></td><td style="text-align:center">显示所有可用的软件包组，包括已安装的和未安装的</td></tr><tr><td style="text-align:center"><code>groupinstall</code></td><td style="text-align:center">安装软件包组</td></tr></tbody></table><p>常用选项有<code>-y</code>，即对安装过程中所有的询问表示同意。</p><p>可以使用yum（dnf）安装软件包组。软件包组是服务于一个共同的目的一组软件包，例如系统工具集等。使用dnf可以对软件包组进行安装/删除等操作，使相关操作更高效：<code>dnf groupinstall -y “Development Tools”</code></p><h2 id="系统启动或关闭">系统启动或关闭</h2><p>Linux系统的关闭通常由关机命令触发，为确保系统安全、稳定地关闭，一般包括以下关键步骤：</p><ol><li>管理员发起关机请求：在命令行中输入<code>shutdown</code>、<code>halt</code>或<code>poweroff</code>等命令请求关闭系统</li><li>系统发送关机信号：系统初始化进程（如systemd）收到关机命令后，执行关机流程</li><li>停止所有运行的服务：停止所有正在运行的服务和进程，如网络服务、文件共享服务等</li><li>卸载文件系统：系统卸载所有已挂载的文件系统，以防止数据损坏</li><li>执行自定义关机脚本：系统可能会运行预定义的关机脚本，进行数据同步、清理缓存等操作</li><li>关闭硬件设备：系统通知所有硬件设备安全关闭，如硬盘驱动器停止运转</li><li>关闭电源：系统关闭计算机的电源</li></ol><h3 id="关机命令">关机命令</h3><p><code>shutdown [选项] [时间]</code>命令：关机或重启。</p><p>主要选项有：</p><ul><li><code>h</code> ：停止系统，关机</li><li><code>r</code> ：重启系统</li></ul><p>例如：</p><ul><li><code># shutdown -h now</code>：立即关机</li><li><code># shutdown -h 22:45</code>：在22:25关机</li><li><code># shutdown -r +30</code>：30分钟后重启</li></ul><p><code>reboot</code>命令：重启。</p><p><code>halt</code>命令：在大多数系统中等效于<code>shutdown -h now</code>。</p><p><code>poweroff</code>命令：首先关闭所有运行的服务，卸载文件系统，然后关闭系统电源。</p><h1>vi编辑器</h1><p>打开vi的命令：<code>vi [选项] [文件]</code>。常用选项有：</p><ul><li><code>-c</code>：打开时执行指定的vi命令</li><li><code>-R</code>：只读打开，可强制保存</li><li><code>-M</code>：只读打开，不可强制保存</li><li><code>-r</code>：恢复文件</li><li><code>+num</code>：从第<code>num</code>行开始</li></ul><p>保存：<code>:[ a,b（保存从a至b行到） ] w [新文件名]</code>，例如<code>: 1,4 w test.c</code>。</p><p>退出：<code>:q</code>，使用<code>:q!</code>强制退出。使用<code>:x</code>、<code>:wq</code>或[Z][Z]保存并退出。</p><p>vi的<code>:version</code>命令可以显示当前的vi版本等信息。</p><h2 id="输入模式">输入模式</h2><p>启动vi后自动进入命令模式，输入<code>:</code>进入ex命令模式（又称为末行模式），按[i]、[I]、[a]、[A]、[o]、[O]进入输入模式。输入模式按[Esc]回到命令模式。</p><table><thead><tr><th style="text-align:center">按键</th><th style="text-align:center">功能</th></tr></thead><tbody><tr><td style="text-align:center">[i]</td><td style="text-align:center">在光标左侧输入文本</td></tr><tr><td style="text-align:center">[I]</td><td style="text-align:center">在光标所在行开头输入文本</td></tr><tr><td style="text-align:center">[a]</td><td style="text-align:center">在光标右侧输入文本</td></tr><tr><td style="text-align:center">[A]</td><td style="text-align:center">在光标所在行结尾输入文本</td></tr><tr><td style="text-align:center">[o]</td><td style="text-align:center">在光标上面创建新行，输入文本</td></tr><tr><td style="text-align:center">[O]</td><td style="text-align:center">在光标下面创建新行，输入文本</td></tr></tbody></table><h2 id="移动光标">移动光标</h2><p>在命令模式下，除了方向键，也可以用别的按键移动光标：</p><table><thead><tr><th style="text-align:center">按键</th><th style="text-align:center">功能</th></tr></thead><tbody><tr><td style="text-align:center">h</td><td style="text-align:center">左移</td></tr><tr><td style="text-align:center">Backspace</td><td style="text-align:center">左移</td></tr><tr><td style="text-align:center">j</td><td style="text-align:center">下移</td></tr><tr><td style="text-align:center">回车</td><td style="text-align:center">下移到下一行行首</td></tr><tr><td style="text-align:center">k</td><td style="text-align:center">上移</td></tr><tr><td style="text-align:center">l</td><td style="text-align:center">右移</td></tr><tr><td style="text-align:center">空格</td><td style="text-align:center">右移</td></tr><tr><td style="text-align:center">nh</td><td style="text-align:center">左移n格</td></tr><tr><td style="text-align:center">nj</td><td style="text-align:center">下移n格</td></tr><tr><td style="text-align:center">nk</td><td style="text-align:center">上移n格</td></tr><tr><td style="text-align:center">nl</td><td style="text-align:center">右移n格</td></tr></tbody></table><p>大范围移动光标：</p><table><thead><tr><th style="text-align:center">按键</th><th style="text-align:center">功能</th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:center">移动到行首</td></tr><tr><td style="text-align:center">$</td><td style="text-align:center">移动到行尾</td></tr><tr><td style="text-align:center">nw</td><td style="text-align:center">向右移动n个单词（跨行）</td></tr><tr><td style="text-align:center">nb</td><td style="text-align:center">向左移动n个单词（跨行）</td></tr><tr><td style="text-align:center">ne</td><td style="text-align:center">移动到后n个单词的词尾（跨行）</td></tr><tr><td style="text-align:center">gg</td><td style="text-align:center">移动到最开头</td></tr><tr><td style="text-align:center">G</td><td style="text-align:center">移动到尾行行首</td></tr><tr><td style="text-align:center">nG</td><td style="text-align:center">移动到第n行行首</td></tr><tr><td style="text-align:center">:n</td><td style="text-align:center">移动到第n行行首</td></tr><tr><td style="text-align:center">[Ctrl]+[g]</td><td style="text-align:center">获取行号</td></tr></tbody></table><h2 id="删除文本">删除文本</h2><table><thead><tr><th style="text-align:center">按键</th><th style="text-align:center">功能</th></tr></thead><tbody><tr><td style="text-align:center">nx</td><td style="text-align:center">删除光标开始的n个字符</td></tr><tr><td style="text-align:center">nc{范围限定符}</td><td style="text-align:center">删除光标开始的n个限定范围，然后进入插入模式</td></tr><tr><td style="text-align:center">nd{范围限定符}</td><td style="text-align:center">删除光标开始的n个限定范围</td></tr></tbody></table><table><thead><tr><th style="text-align:center">范围限定符</th><th style="text-align:center">意义</th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:center">光标之前到行首，不包含光标</td></tr><tr><td style="text-align:center">$</td><td style="text-align:center">光标开始到行尾</td></tr><tr><td style="text-align:center">w</td><td style="text-align:center">光标开始到词尾</td></tr></tbody></table><p>特殊的，有一些删除命令：</p><table><thead><tr><th style="text-align:center">按键</th><th style="text-align:center">功能</th></tr></thead><tbody><tr><td style="text-align:center">ncc</td><td style="text-align:center">删除本行开始的n行，然后进入插入模式</td></tr><tr><td style="text-align:center">ndd</td><td style="text-align:center">删除本行开始的n行</td></tr></tbody></table><h2 id="复制">复制</h2><table><thead><tr><th style="text-align:center">按键</th><th style="text-align:center">功能</th></tr></thead><tbody><tr><td style="text-align:center">ny{范围限定符}</td><td style="text-align:center">复制光标开始的n个限定范围</td></tr></tbody></table><table><thead><tr><th style="text-align:center">范围限定符</th><th style="text-align:center">意义</th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:center">光标之前到行首，不包含光标</td></tr><tr><td style="text-align:center">$</td><td style="text-align:center">光标开始到行尾</td></tr><tr><td style="text-align:center">w</td><td style="text-align:center">光标所在的单词</td></tr><tr><td style="text-align:center">y</td><td style="text-align:center">光标所在的行</td></tr></tbody></table><h2 id="粘贴">粘贴</h2><table><thead><tr><th style="text-align:center">按键</th><th style="text-align:center">功能</th></tr></thead><tbody><tr><td style="text-align:center">p</td><td style="text-align:center">粘贴到下一行或光标右边的位置</td></tr><tr><td style="text-align:center">P</td><td style="text-align:center">粘贴到上一行或光标左边的位置</td></tr></tbody></table><p>需要注意的是，<strong>使用dd删除文本时，它会同时被复制</strong>。</p><h2 id="撤销和重做">撤销和重做</h2><table><thead><tr><th style="text-align:center">按键</th><th style="text-align:center">功能</th></tr></thead><tbody><tr><td style="text-align:center">u</td><td style="text-align:center">撤销最近的一次修改</td></tr><tr><td style="text-align:center">U</td><td style="text-align:center">撤销当前行的所有修改</td></tr><tr><td style="text-align:center">[Ctrl]+[r]</td><td style="text-align:center">撤销撤销操作</td></tr><tr><td style="text-align:center">.</td><td style="text-align:center">重复上一次的修改</td></tr></tbody></table><h2 id="查找">查找</h2><table><thead><tr><th style="text-align:center">按键</th><th style="text-align:center">功能</th></tr></thead><tbody><tr><td style="text-align:center"><code>/[文字]</code></td><td style="text-align:center">向后搜索</td></tr><tr><td style="text-align:center"><code>?[文字]</code></td><td style="text-align:center">向前搜索</td></tr><tr><td style="text-align:center">n</td><td style="text-align:center">定位到下一个项，<strong>与命令方向相同</strong></td></tr><tr><td style="text-align:center">N</td><td style="text-align:center">定位到上一个项，<strong>与命令方向相同</strong></td></tr></tbody></table><h2 id="替换">替换</h2><p>使用s命令：<code>: [行范围（默认为当前行），%表示全文] s / {被替换项} / {替换项} / [g（全行替换，如果没有g则会只替换每一行的第一个）][c（确认后再替换）]</code></p><h2 id="环境设置">环境设置</h2><p>通过选项可以定制vi编辑器的行为。主要使用<code>:set {选项}</code>命令。</p><ul><li><code>:set</code>：显示修改过的选项的值。</li><li><code>:set X?</code>：显示选项X的值。</li><li><code>:set all</code>：查看所有选项以及它们的设置。</li><li>布尔值选项：使用<code>:set X</code>或<code>:set noX</code>以设置或取消。</li><li>数值型选项：使用<code>:set X=number</code>，注意等号前后无空格。</li><li>字符串选项：使用<code>:set X=string</code></li></ul><p>有很多选项可以设置：</p><table><thead><tr><th style="text-align:center">选项</th><th style="text-align:center">性质</th><th style="text-align:center">默认值</th><th style="text-align:center">功能</th></tr></thead><tbody><tr><td style="text-align:center"><code>nu</code></td><td style="text-align:center">布尔值</td><td style="text-align:center"><code>nonu</code></td><td style="text-align:center">显示行号</td></tr><tr><td style="text-align:center"><code>ts</code></td><td style="text-align:center">数值型</td><td style="text-align:center"></td><td style="text-align:center">缩进宽度</td></tr><tr><td style="text-align:center"><code>ai</code></td><td style="text-align:center">布尔值</td><td style="text-align:center"></td><td style="text-align:center">自动缩进</td></tr><tr><td style="text-align:center"><code>mouse</code></td><td style="text-align:center">字符串</td><td style="text-align:center"></td><td style="text-align:center">使能鼠标</td></tr><tr><td style="text-align:center"><code>encoding</code></td><td style="text-align:center">字符串</td><td style="text-align:center"></td><td style="text-align:center">编码方式</td></tr></tbody></table><p>在vi中设置的都是暂时的，退出即失效。需要修改配置文件达到永久效果。路径有：</p><table><thead><tr><th style="text-align:center">路径</th><th style="text-align:center">性质</th></tr></thead><tbody><tr><td style="text-align:center"><code>/etc/virc</code></td><td style="text-align:center">全局配置文件</td></tr><tr><td style="text-align:center"><code>/$HOME/.virc</code></td><td style="text-align:center">用户配置文件</td></tr><tr><td style="text-align:center"><code>/$HOME/.vim/virc</code></td><td style="text-align:center">用户配置文件</td></tr><tr><td style="text-align:center"><code>/$HOME/.exrc</code></td><td style="text-align:center">用户配置文件</td></tr></tbody></table><p>优先级递减。</p><h2 id="在vi中执行shell命令">在vi中执行shell命令</h2><p>输入<code>:!{command}</code>、<code>:r !{command}</code>可以将执行结果加入文本当中，<code>:r {文件名}</code>可以将文件内容插入文本，一般都是在下面起新的一行。</p><h1>Linux文件系统</h1><p>磁盘从逻辑上划分一个到多个分区，每个分区被格式化为特定类型的文件系统，在每个分区中，文件系统通过目录来组织文件。</p><p>目录可以看做一种容器，用于组织和管理其他文件和目录。Linux提供命令，在磁盘上创建、组织和查找目录和文件。</p><p>Linux继承了UNIX对文件的广义定义，一切皆文件。主要有：</p><ul><li>普通文件：数据的集合，如文本、图像、音频、视频、程序等</li><li>目录文件：用于文件的组织，包含关于其他文件的信息</li><li>特殊文件：包含与外部设备相联系的信息，系统中每个设备分别对应一个文件</li></ul><h2 id="目录">目录</h2><p>目录本质上是一个账本，记录了该目录中包含的文件和子目录的名称，以及它们在文件系统中的位置（通过inode编号）。</p><p>目录以层次形式进行组织，从根目录<code>/</code>向下延伸。</p><h3 id="特殊的目录">特殊的目录</h3><table><thead><tr><th style="text-align:center">目录</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center"><code>/</code></td><td style="text-align:center">根目录（root目录），包含了整个文件系统，目录树起点</td></tr><tr><td style="text-align:center"><code>/bin</code></td><td style="text-align:center">存放用户可以使用的可执行文件（外部命令，例如<code>cal</code>、<code>date</code>、<code>who</code>、<code>sh</code>、<code>bash</code>），有的系统存放在<code>/usr/bin</code></td></tr><tr><td style="text-align:center"><code>/sbin</code></td><td style="text-align:center">存放系统管理员（root）可以使用的系统管理命令（<code>agetty</code>、<code>fsck</code>、<code>halt</code>、<code>reboot</code>、<code>shutdown</code>、<code>useradd</code>），有的系统存放在<code>/usr/sbin</code>、<code>/usr/local/sbin</code></td></tr><tr><td style="text-align:center"><code>/lib</code>或<code>/lib64</code></td><td style="text-align:center">存放函数库和模块文件，有的系统存放在<code>/usr/lib</code>、<code>/usr/lib64</code></td></tr><tr><td style="text-align:center"><code>/boot</code></td><td style="text-align:center">存放Linux系统启动时用到的文件（内核：<code>/boot/vmlinuz-*</code>启动配置文件：<code>/boot/grub2</code>等）</td></tr><tr><td style="text-align:center"><code>/dev</code></td><td style="text-align:center">存放设备文件。设备文件是一种特殊文件，代表计算机物理部件或虚拟部件（<code>/dev/tty</code>代表终端，<code>/dev/null</code>代表空设备）</td></tr><tr><td style="text-align:center"><code>/mnt</code>，<code>/media</code></td><td style="text-align:center">用于临时挂载其他文件系统</td></tr><tr><td style="text-align:center"><code>/proc</code></td><td style="text-align:center">虚拟文件系统，将内核和进程运行状态归档为文本文件，通过这些文件可以查看硬件和正在运行的进程信息（使用<code>cat /proc/meminfo</code>或<code>cat /proc/cpuinfo</code>）</td></tr><tr><td style="text-align:center"><code>/root</code></td><td style="text-align:center">管理员root的主目录</td></tr><tr><td style="text-align:center"><code>/home</code></td><td style="text-align:center">存放所有普通用户主目录</td></tr><tr><td style="text-align:center"><code>/etc</code></td><td style="text-align:center">存放系统管理所需的配置文件（<code>/etc/passwd</code>，<code>/etc/profile</code>）和子目录，如用户信息、服务的启动脚本、常用服务的配置文件等</td></tr><tr><td style="text-align:center"><code>/usr</code></td><td style="text-align:center">存放应用程序。<code>/usr/bin</code>存放用户应用命令；<code>/usr/sbin</code>存放管理员使用的系统管理命令；<code>/usr/src</code>存放内核源代码</td></tr><tr><td style="text-align:center"><code>/opt</code></td><td style="text-align:center">主机额外安装软件的目录</td></tr><tr><td style="text-align:center"><code>/var</code></td><td style="text-align:center">存放经常变化或增长的文件，如日志、缓存、邮件、打印队列等。<code>/var/log</code>存放各种程序的日志文件</td></tr><tr><td style="text-align:center"><code>/run</code></td><td style="text-align:center">存放一些服务和程序运行后产生的信息，如进程ID、锁文件、套接字等。</td></tr><tr><td style="text-align:center"><code>/tmp</code></td><td style="text-align:center">存放临时文件，所有用户都可以访问和写入。</td></tr><tr><td style="text-align:center"><code>/sys</code></td><td style="text-align:center">存放与内核相关的信息，如<code>/sys/module</code>，<code>/sys/class</code>等</td></tr><tr><td style="text-align:center"><code>/srv</code></td><td style="text-align:center">存放一些服务启动后需要提取或访问的数据，如FTP服务、Web服务等</td></tr></tbody></table><h3 id="主目录和工作目录">主目录和工作目录</h3><p>主目录是管理员在创建用户时为其分配的特定目录。用户登录时，自动进入主目录，其名称通常与用户名相同。</p><p><code>root</code>用户的主目录是<code>/root</code>。</p><p>工作目录是用户现在在文件系统中所在的目录。</p><h3 id="文件命名规则">文件命名规则</h3><ol><li>长度约束：1 ~ 255个字符</li><li>唯一性约束：同一目录下不得存在同名文件</li><li>大小写敏感</li><li>字符约束尽量避免使用<code>&lt;</code>、<code>&gt;</code>、<code>(</code>、<code>)</code>、<code>[</code>、<code>]</code>、<code>{</code>、<code>}</code>、<code>*</code>、<code>?</code>、<code>”</code>、<code>’</code>、<code>-</code>、<code>$</code>、<code>^</code>、<code>空格</code></li><li>推荐使用<code>A</code> ~ <code>Z</code>、<code>a</code> ~ <code>z</code>、<code>0</code> ~ <code>9</code>、<code>_</code> 、<code>.</code></li></ol><h2 id="文件操作命令">文件操作命令</h2><h3 id="cd命令"><code>cd</code>命令</h3><p>用于改变工作目录（change directory）。</p><p><code>cd</code>：返回用户主目录。</p><p><code>cd  ~ [用户名]</code>：进入其他用户或自己的主目录，前提是拥有权限。</p><h3 id="mkdir命令"><code>mkdir</code>命令</h3><p>创建目录，可以一次创建多个。</p><p><code>-p</code>选项，可以一次创建多层目录。</p><h3 id="rmdir命令"><code>rmdir</code>命令</h3><p>删除空目录。</p><h3 id="ls命令"><code>ls</code>命令</h3><p>显示目录内内容（list）。</p><table><thead><tr><th style="text-align:center">选项</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center"><code>-a</code></td><td style="text-align:center">列出包含隐藏文件的所有文件</td></tr><tr><td style="text-align:center"><code>-l</code></td><td style="text-align:center">显示详细信息</td></tr><tr><td style="text-align:center"><code>-d</code></td><td style="text-align:center">列出目录文件本身，而不列出目录中的文件</td></tr><tr><td style="text-align:center"><code>-i</code></td><td style="text-align:center">列出文件的索引节点</td></tr></tbody></table><p><code>-l</code>显示格式例如：</p><table><thead><tr><th style="text-align:center">1</th><th style="text-align:center">2</th><th style="text-align:center">3</th><th style="text-align:center">4</th><th style="text-align:center">5</th><th style="text-align:center">6</th><th style="text-align:center">7</th></tr></thead><tbody><tr><td style="text-align:center"><code>-rw-r--r--</code></td><td style="text-align:center"><code>1</code></td><td style="text-align:center"><code>david</code></td><td style="text-align:center"><code>stu</code></td><td style="text-align:center"><code>48</code></td><td style="text-align:center"><code>Jun 25 12:28</code></td><td style="text-align:center"><code>文件名</code></td></tr><tr><td style="text-align:center">文件类型与权限</td><td style="text-align:center">链接数</td><td style="text-align:center">创建者</td><td style="text-align:center">所属的组</td><td style="text-align:center">文件大小（字节）</td><td style="text-align:center">最后修改时间</td><td style="text-align:center">文件名</td></tr></tbody></table><p>在第一列中，第1个字符表示文件类型，第2 ~ 10个字符表示权限设置。</p><p>第1个字符的意义：</p><table><thead><tr><th style="text-align:center">字符</th><th style="text-align:center">类型</th></tr></thead><tbody><tr><td style="text-align:center"><code>d</code></td><td style="text-align:center">目录文件</td></tr><tr><td style="text-align:center"><code>-</code></td><td style="text-align:center">普通文件</td></tr><tr><td style="text-align:center"><code>b</code></td><td style="text-align:center">块设备文件</td></tr><tr><td style="text-align:center"><code>c</code></td><td style="text-align:center">字符设备文件</td></tr><tr><td style="text-align:center"><code>l</code></td><td style="text-align:center">链接文件</td></tr></tbody></table><p>第2 ~ 10个字符分三组，所有者、组用户、其他人，分别对应3个字符。</p><table><thead><tr><th style="text-align:center">字符</th><th style="text-align:center">类型</th></tr></thead><tbody><tr><td style="text-align:center"><code>r</code></td><td style="text-align:center">读权限</td></tr><tr><td style="text-align:center"><code>w</code></td><td style="text-align:center">写权限</td></tr><tr><td style="text-align:center"><code>x</code></td><td style="text-align:center">执行权限</td></tr><tr><td style="text-align:center"><code>-</code></td><td style="text-align:center">无权限</td></tr></tbody></table><p>第二列表示文件的链接数。</p><p>第三列表示文件的所有者，通常与创建者相同，可以发生转移。</p><p>第四列表示文件所属的组，创建时属于用户所在的组。</p><p>第五列表示文件大小，单位为字节。</p><p>第六列表示上一次修改的时间。</p><p>第七列表示文件名。</p><p><code>-a</code>可以显示隐藏文件，即以<code>.</code>开头的文件。</p><h3 id="cat命令"><code>cat</code>命令</h3><p>显示一个或多个文件的内容。</p><h3 id="more命令"><code>more</code>命令</h3><p>分页显示文件。</p><h3 id="head命令"><code>head</code>命令</h3><p>显示前若干行内容，默认为10行。</p><p>通过<code>-n</code>选项指定显示多少行。</p><h3 id="tail命令"><code>tail</code>命令</h3><p>显示后若干行内容，显示行数和<code>-n</code>用法与<code>head</code>相同。</p><p>可以使用<code>-f</code>持续显示内容，用于监控文件是否有新增，直到[Ctrl]+[C]停止命令。</p><h3 id="wc命令"><code>wc</code>命令</h3><p>用于统计行数、字数（不含空格或制表符的字符串）、字符数。</p><p>若没有指定文件名，则从键盘输入，直到按下[Ctrl]+[D]。</p><table><thead><tr><th style="text-align:center">选项</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center"><code>-l</code></td><td style="text-align:center">统计行数</td></tr><tr><td style="text-align:center"><code>-c</code></td><td style="text-align:center">统计字符数</td></tr><tr><td style="text-align:center"><code>-w</code></td><td style="text-align:center">统计字数</td></tr></tbody></table><h3 id="diff命令"><code>diff</code>命令</h3><p>比较两个文件内容是否一致。</p><table><thead><tr><th style="text-align:center">更改提示</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center"><code>a</code></td><td style="text-align:center">增加的行</td></tr><tr><td style="text-align:center"><code>d</code></td><td style="text-align:center">删除的行</td></tr><tr><td style="text-align:center"><code>c</code></td><td style="text-align:center">修改的行</td></tr></tbody></table><p>可以选择选项来忽略大小写、忽略空格等操作。</p><h3 id="rm命令"><code>rm</code>命令</h3><p>删除文件。</p><table><thead><tr><th style="text-align:center">选项</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center"><code>-i</code></td><td style="text-align:center">删除前要求确认</td></tr><tr><td style="text-align:center"><code>-r</code></td><td style="text-align:center">递归删除目录下所有文件</td></tr><tr><td style="text-align:center"><code>-f</code></td><td style="text-align:center">强制删除</td></tr></tbody></table><h3 id="cp命令"><code>cp</code>命令</h3><p>复制。用法有：</p><ul><li><code>cp {文件名1} {文件名2}</code></li><li><code>cp （多个）{文件名} {目录}</code></li></ul><table><thead><tr><th style="text-align:center">选项</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center"><code>-i</code></td><td style="text-align:center">若目标文件已存在则要求确认是否要覆盖</td></tr><tr><td style="text-align:center"><code>-r</code></td><td style="text-align:center">递归复制目录下所有文件</td></tr></tbody></table><h3 id="mv命令"><code>mv</code>命令</h3><p>移动文件。用法有：</p><ul><li><code>mv {文件名1} {文件名2}</code>：移动文件并改名</li><li><code>mv （多个）{文件名} {目录}</code></li></ul><p>选项同<code>cp</code>命令。</p><h3 id="ln命令"><code>ln</code>命令</h3><p>在已存在文件和新文件中创建链接，类似于引用。改变一个文件，链接的文件也会被改变。用法有：</p><ul><li><code>ln {已存在的文件} {新文件名}</code></li><li><code>ln （多个）{文件名} {目录}</code>：在目录中创建同名的链接文件</li></ul><table><thead><tr><th style="text-align:center">选项</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center"><code>-s</code></td><td style="text-align:center">创建软链接，类似于快捷方式，其中包含路径指针，访问它就是访问源文件的路径</td></tr></tbody></table><h3 id="paste命令"><code>paste</code>命令</h3><p>用于按列合并。用法是<code>paste [选项] {（多个）文件名}</code>。</p><table><thead><tr><th style="text-align:center">选项</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center"><code>-d</code></td><td style="text-align:center">指定分隔符，默认是制表符<code>\t</code></td></tr><tr><td style="text-align:center"><code>-s</code></td><td style="text-align:center">将每个文件的每一行都按顺序拼接到一行上</td></tr></tbody></table><h2 id="文件名匹配">文件名匹配</h2><p>shell允许用户使用指定的模式匹配文件名：</p><table><thead><tr><th style="text-align:center">字符</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center"><code>?</code></td><td style="text-align:center">匹配任意单个字符</td></tr><tr><td style="text-align:center"><code>*</code></td><td style="text-align:center">匹配任意的0 ~ n个字符</td></tr><tr><td style="text-align:center"><code>[列表]</code></td><td style="text-align:center">匹配文件名中任<strong>一</strong>在列表中的字符</td></tr><tr><td style="text-align:center"><code>[!列表]</code></td><td style="text-align:center">匹配文件名中任<strong>一</strong>不在列表中的字符</td></tr></tbody></table><p><code>[列表]</code>和<code>[!列表]</code>是不能为空字符的。</p><p>需要注意的是，<code>rm -rf report*</code>和<code>rm -rf report *</code>差别很大。前者是删除所有<code>report</code>开头的文件，后者是删除<code>report</code>，然后删除所有文件。</p><h2 id="搜索命令">搜索命令</h2><h3 id="find命令"><code>find</code>命令</h3><p>用于搜索文件。格式为<code>find {路径名} {搜索选项} {动作选项}</code>。</p><h4 id="搜索选项">搜索选项</h4><table><thead><tr><th style="text-align:center">选项</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center"><code>-name</code></td><td style="text-align:center">根据文件名查找</td></tr><tr><td style="text-align:center"><code>-type</code></td><td style="text-align:center">根据类型查找</td></tr><tr><td style="text-align:center"><code>-size n</code></td><td style="text-align:center">根据大小查找</td></tr><tr><td style="text-align:center"><code>-mtime n</code></td><td style="text-align:center">根据最后修改日期查找</td></tr></tbody></table><p>根据文件名查找，使用通配符时，需要用引号扩起文件名。</p><h4 id="文件类型">文件类型</h4><table><thead><tr><th style="text-align:center">字符</th><th style="text-align:center">类型</th></tr></thead><tbody><tr><td style="text-align:center"><code>d</code></td><td style="text-align:center">目录文件</td></tr><tr><td style="text-align:center"><code>f</code></td><td style="text-align:center">普通文件</td></tr><tr><td style="text-align:center"><code>b</code></td><td style="text-align:center">块设备文件</td></tr><tr><td style="text-align:center"><code>c</code></td><td style="text-align:center">字符设备文件</td></tr></tbody></table><h4 id="逻辑查找符">逻辑查找符</h4><table><thead><tr><th style="text-align:center">查找符</th><th style="text-align:center">意义</th></tr></thead><tbody><tr><td style="text-align:center"><code>-a</code></td><td style="text-align:center">与</td></tr><tr><td style="text-align:center"><code>-o</code></td><td style="text-align:center">或</td></tr><tr><td style="text-align:center"><code>!</code></td><td style="text-align:center">非</td></tr><tr><td style="text-align:center"><code>()</code></td><td style="text-align:center">逻辑组合</td></tr></tbody></table><p>例如<code>find /dev -type b -o -type -c</code>。</p><h4 id="动作选项">动作选项</h4><table><thead><tr><th style="text-align:center">选项</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center"><code>exec command {} \;</code></td><td style="text-align:center">对找到的文件执行<code>command</code></td></tr><tr><td style="text-align:center"><code>ok command {} \;</code></td><td style="text-align:center">执行前要求确认</td></tr></tbody></table><p><code>{}</code>是一个占位符，会代表<code>find</code>查找到的所有路径。<code>\</code>是转义符，因为<code>;</code>是一个特殊符号。<code>\;</code>是命令结束的标志。</p><h3 id="grep命令"><code>grep</code>命令</h3><p>在多个文件中查找满足格式的行，格式为<code>grep {字符串} [文件名]</code>。找到满足条件的行会从终端输出，若无指定文件则从键盘读入。</p><table><thead><tr><th style="text-align:center">选项</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center"><code>-c</code></td><td style="text-align:center">只显示符合的行数</td></tr><tr><td style="text-align:center"><code>-j</code></td><td style="text-align:center">忽略大小写</td></tr><tr><td style="text-align:center"><code>-l</code></td><td style="text-align:center">只显示文件名</td></tr><tr><td style="text-align:center"><code>-n</code></td><td style="text-align:center">输出前显示行号</td></tr><tr><td style="text-align:center"><code>-v</code></td><td style="text-align:center">只显示<strong>不匹配</strong>的行</td></tr></tbody></table><h3 id="cut命令"><code>cut</code>命令</h3><table><thead><tr><th style="text-align:center">选项</th><th style="text-align:center">意义</th><th style="text-align:center">备注</th></tr></thead><tbody><tr><td style="text-align:center"><code>-f</code></td><td style="text-align:center">指定域位置</td><td style="text-align:center">如<code>1,3,5</code>、<code>1-3,5</code>，默认分隔符为制表符，即取出每行被制表符分割的第1、3、5列</td></tr><tr><td style="text-align:center"><code>-c</code></td><td style="text-align:center">指定字符位置</td><td style="text-align:center">如<code>1,3,5</code>，即取出每行第1、3、5个字符</td></tr><tr><td style="text-align:center"><code>-d</code></td><td style="text-align:center">指定域分割字符</td><td style="text-align:center">可以和<code>-f</code>一同使用，后面跟非默认分隔符，空格和其他有特殊意义的字符必须用双括号括起来</td></tr></tbody></table><h2 id="排序命令">排序命令</h2><h3 id="sort命令"><code>sort</code>命令</h3><table><thead><tr><th style="text-align:center">选项</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center"><code>-d</code></td><td style="text-align:center">按字典序排序，忽略标点符号和控制字符</td></tr><tr><td style="text-align:center"><code>-f</code></td><td style="text-align:center">忽略大小写</td></tr><tr><td style="text-align:center"><code>-n</code></td><td style="text-align:center">数字以数值排序</td></tr><tr><td style="text-align:center"><code>-g</code></td><td style="text-align:center">数字以数值排序，且可以处理浮点数</td></tr><tr><td style="text-align:center"><code>-o</code></td><td style="text-align:center">输出存储在文件中</td></tr><tr><td style="text-align:center"><code>-r</code></td><td style="text-align:center"><strong>倒序</strong>排序</td></tr><tr><td style="text-align:center"><code>-k</code></td><td style="text-align:center">按指定字段排序，就是指定第几个域来排序</td></tr><tr><td style="text-align:center"><code>-u</code></td><td style="text-align:center">去除重复行</td></tr><tr><td style="text-align:center"><code>-c</code></td><td style="text-align:center">检查是否已经排序好了</td></tr></tbody></table><h2 id="文件权限">文件权限</h2><p>文件权限的意义和目录权限不同：</p><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">读权限</th><th style="text-align:center">写权限</th><th style="text-align:center">执行权限</th></tr></thead><tbody><tr><td style="text-align:center">文件</td><td style="text-align:center">读取内容</td><td style="text-align:center">修改内容和删除文件</td><td style="text-align:center">作为程序执行</td></tr><tr><td style="text-align:center">目录</td><td style="text-align:center">列出内容</td><td style="text-align:center">创建、删除、重命名文件和子目录</td><td style="text-align:center">进入该目录</td></tr></tbody></table><p>文件权限可以使用3位8进制数表示：</p><ul><li><code>r</code>=<code>4</code></li><li><code>w</code>=<code>2</code></li><li><code>x</code>=<code>1</code></li><li><code>-</code>=<code>0</code></li></ul><h3 id="默认权限">默认权限</h3><p>文件和目录的默认权限：</p><ul><li>文件：<code>666</code></li><li>目录：<code>777</code></li></ul><p>可以使用<code>umask</code>掩码表示默认情况下那些权限不会赋予新建的文件、目录，则初始权限为：</p><ul><li>文件：<code>666-umask</code></li><li>目录：<code>777-umask</code></li></ul><p>设置掩码可以用<code>umask {数值}</code>命令实现。</p><h3 id="chmod命令"><code>chmod</code>命令</h3><p>更改文件权限，格式为：<code>chmod {字符串} {文件名}</code>。</p><p>字符串包括：</p><ul><li>对象：<code>u</code>、<code>g</code>、<code>o</code>、<code>a</code>，分别表示用户、组用户、其他用户、所有用户（代替<code>ugo</code>）</li><li>操作符：<code>-</code>、<code>+</code>、<code>=</code>，分别表示赋予权限、取消权限、设置权限</li><li>权限：<code>r</code>、<code>w</code>、<code>x</code>、<code>-</code></li></ul><p>也可以使用<code>chmod {三位八进制数} {文件名}</code>修改权限。</p><h2 id="索引节点">索引节点</h2><p>Linux将每个文件和一个整数（索引节点号）关联，用来标识每个文件。索引号对应文件的基础信息保存在索引节点表（inode）中，存储在磁盘里。</p><p>Linux打开文件的过程是：</p><ol><li>查找目录项，获得索引节点号</li><li>找到文件的索引节点</li><li>读取元数据</li><li>定位文件数据</li></ol><p>文件名本质上是索引节点号的别名。</p><h1>shell</h1><p>shell是一个用户操作界面，是用户和内核交互的桥梁。登录系统后，shell启动；退出时，shell进程结束。</p><p>每个用户都有一个默认shell，通常在<code>/etc/passwd</code>中指定。</p><h2 id="shell的功能">shell的功能</h2><ol><li>管道</li><li>IO重定向</li><li>文件名替换</li><li>环境控制</li><li>后台处理</li><li>命令执行</li><li>shell脚本</li></ol><p>注意：shell<strong>不能够装载内核</strong>。</p><h2 id="echo命令和元字符"><code>echo</code>命令和元字符</h2><p>将消息参数显示在终端上。</p><table><thead><tr><th style="text-align:center">选项</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center"><code>-n</code></td><td style="text-align:center">禁止换行（转义符<code>\c</code>也可以）</td></tr><tr><td style="text-align:center"><code>-e</code></td><td style="text-align:center">解释反斜杠引导的转义符，且转义字符必须用<code>""</code>括起</td></tr></tbody></table><p>元字符指的是shell中具有特殊含义与用途的字符。消除元字符可以使用：</p><ul><li><code>\</code>：后面的字符按照字面解释</li><li><code>""</code>：括起来的字符除了<code>$</code>、<code>`</code>和<code>\</code>以外都按照字面解释</li><li><code>''</code>：括起来的字符全按照字面解释</li></ul><h2 id="shell变量">shell变量</h2><p>shell为了响应用户请求，会将一些信息保存在shell变量中：</p><ul><li>环境变量用于配置和定义系统或用户环境，shell启动时就被创建并被赋予初始值</li><li>局部变量可以供用户定义shell函数或脚本，用户可以自己定义、修改、删除它们</li></ul><h3 id="set、unset命令和变量赋值"><code>set</code>、<code>unset</code>命令和变量赋值</h3><p><code>set</code>可以查看当前使用的所有shell变量，包括局部变量。<code>unset</code>用于删除不需要的变量。</p><p>可以直接使用<code>变量名=变量值</code>的方法赋值。</p><p>变量前加<code>$</code>访问变量值。</p><p>变量可以在命令行中保存复杂的参数或选项：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ all=-lFa<br>$ <span class="hljs-built_in">ls</span> <span class="hljs-variable">$all</span> myfirst<br><span class="hljs-comment">#等效于 $ ls -lFa myfirst</span><br></code></pre></td></tr></tbody></table></figure><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ age=32<br>$ <span class="hljs-built_in">echo</span> <span class="hljs-variable">$age</span> <span class="hljs-string">"<span class="hljs-variable">$age</span>"</span> <span class="hljs-string">'$age'</span><br><span class="hljs-comment">#输出 32 32 $age</span><br></code></pre></td></tr></tbody></table></figure><h3 id="环境变量">环境变量</h3><ul><li><code>PATH</code>变量设置shell载入<strong>外部命令</strong>时依次进行查找的目录，路径间分隔符为冒号<code>:</code>，执行内部命令时不会查找，而是直接执行</li><li><code>HOME</code>变量用于保存用户主目录，用于其他命令定位主目录，即<code>/home/用户名</code>，<code>cd</code>命令没有参数时，自动回到<code>HOME</code></li><li><code>PS1</code>设置作为命令提示符的字符串。<code>PS1</code>中可以使用转义序列，需要用<code>""</code>括起：</li></ul><table><thead><tr><th style="text-align:center">序列</th><th style="text-align:center">意义</th></tr></thead><tbody><tr><td style="text-align:center"><code>\u</code></td><td style="text-align:center">用户名称</td></tr><tr><td style="text-align:center"><code>\h</code></td><td style="text-align:center">机器主机名</td></tr><tr><td style="text-align:center"><code>\w</code></td><td style="text-align:center">工作目录（完整路径）</td></tr><tr><td style="text-align:center"><code>\W</code></td><td style="text-align:center">工作目录（最底层）</td></tr><tr><td style="text-align:center"><code>\$</code></td><td style="text-align:center">若用户为<code>root</code>，则显示<code>#</code>，否则显示<code>$</code></td></tr><tr><td style="text-align:center"><code>\s</code></td><td style="text-align:center">当前运行的shell名称</td></tr><tr><td style="text-align:center"><code>\d</code></td><td style="text-align:center">当前日期</td></tr><tr><td style="text-align:center"><code>\t</code></td><td style="text-align:center">当前时间</td></tr><tr><td style="text-align:center"><code>\!</code></td><td style="text-align:center">命令序号</td></tr></tbody></table><ul><li><code>PS2</code>设置多行输入命令时（尾部写<code>\</code>），第二行及以后的提示符</li><li><code>SHELL</code>设置登录shell的完整路径，默认为<code>/bin/bash</code></li><li><code>PWD</code>保存当前目录的路径</li></ul><h2 id="输入输出重定向">输入输出重定向</h2><p>shell输入输出可以重定向到文件中。</p><ul><li><code>&gt;</code>是覆盖输出重定向，直接覆盖已有的文件或新建一个文件</li><li><code>&gt;&gt;</code>是追加输出重定向，在源文件末尾继续写</li><li><code>2&gt;</code>是标准错误重定向</li><li><code>&lt;</code>是输入重定向，从文件中读取信息</li><li><code>&lt;&lt;</code>是多行输入（Here Document），用于直接从命令行中输入多行数据</li></ul><p>环境变量的值被修改时，修改作用只会作用于当前会话，暂时改变。只有修改配置文件才能永久改变。</p><h2 id="shell元字符">shell元字符</h2><h3 id="元字符"><code>|</code>元字符</h3><p><code>|</code>被称为管道，将一个命令的输出传递给令一个命令作为输入，是命令行中实现进程间通信（ICP）的机制</p><p><code>tee</code>命令可以将标准输入的内容同时输出到标准输出和一个或多个文件中，通常以<code>{command} | tee [选项] {（多个）文件名}</code>为用法，把命令的输出同时输出到终端和文件中。</p><h3 id="元字符-2"><code>`</code>元字符</h3><p><code>`</code>告诉shell先执行重音符号括起来的命令，命令的输出替换原来括起来的部分，例如：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">echo</span> the day is : `<span class="hljs-built_in">date</span>`<br><span class="hljs-comment">#输出 the day is : 2024年11月20日19:56:55</span><br></code></pre></td></tr></tbody></table></figure><h3 id="元字符-3"><code>;</code>元字符</h3><p><code>;</code>在命令行中分隔多个命令，从左至右执行。</p><h3 id="元字符-4"><code>()</code>元字符</h3><p>几个命令编在一个括号中，变成一组执行，例如：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ (<span class="hljs-built_in">ls</span>; <span class="hljs-built_in">date</span>; <span class="hljs-built_in">pwd</span>) &gt; newfile<br></code></pre></td></tr></tbody></table></figure><h2 id="后台处理">后台处理</h2><p>使用<code>{command} &amp;</code>可以让命令在后台运行。</p><p>多个命令一般可以直接写作<code>{command1} &amp; {command2} &amp;</code>而不需要<code>;</code>分隔，注意<code>&amp;</code>前后有空格。</p><h2 id="进程">进程</h2><h3 id="sleep命令"><code>sleep</code>命令</h3><p>使进程延迟多少秒再执行下一个命令。</p><h3 id="ps命令"><code>ps</code>命令</h3><p>不带选项时显示<strong>当前终端用户</strong>活动进程的状态。</p><table><thead><tr><th style="text-align:center">信息</th><th style="text-align:center">意义</th></tr></thead><tbody><tr><td style="text-align:center">PID</td><td style="text-align:center">进程ID</td></tr><tr><td style="text-align:center">TTY</td><td style="text-align:center">控制进程的终端号</td></tr><tr><td style="text-align:center">TIME</td><td style="text-align:center">进程已运行的时间（秒）</td></tr><tr><td style="text-align:center">CMD</td><td style="text-align:center">命令名</td></tr></tbody></table><table><thead><tr><th style="text-align:center">选项</th><th style="text-align:center">意义</th></tr></thead><tbody><tr><td style="text-align:center"><code>-f</code></td><td style="text-align:center">显示完整的进程列表和命令行</td></tr><tr><td style="text-align:center"><code>-e</code></td><td style="text-align:center">显示所有进程</td></tr></tbody></table><p>使用<code>ps aux</code>（或<code>-aux</code>，可能报错）和<code>ps -ef</code>命令可以查看所有进程的状态。<code>-ef</code>写作<code>ef</code>可能会被误认为是进程名。</p><h3 id="kill命令"><code>kill</code>命令</h3><p>用于发信号给进程，进行进程通信。</p><table><thead><tr><th style="text-align:center">选项</th><th style="text-align:center">意义</th></tr></thead><tbody><tr><td style="text-align:center"><code>-l</code></td><td style="text-align:center">展示信号列表</td></tr></tbody></table><p>命令格式：<code>kill [-信号编号或信号名] {PID}</code>。</p><ul><li><code>9</code>号信号或<code>SIGKILL</code>为强行结束进程</li><li><code>15</code>号信号或<code>SIGTERM</code>为正常结束进程，一般不指定信号则默认发送<code>15</code>号信号</li></ul><p>用户只能终止自己的进程，管理员可以结束所有进程。</p><p><code>PID</code>为<code>0</code>时，指的是当前进程所在组的所有进程，而不是一个单独的进程。</p><h2 id="shell配置文件">shell配置文件</h2><p>配置文件包含了各种命令和设置，用于定义变量和别名等。</p><p>系统配置文件有：</p><ul><li><code>/etc/profile</code>：设置系统整体环境与自启动程序；登录时执行</li><li><code>/etc/bashrc</code>：设置系统整体函数与缩写；打开bash时执行</li></ul><p>用户配置文件有：</p><ul><li><code> ~ /.bash_profile</code>：设置登录用户的bash环境；执行<code> ~ /.bashrc</code></li><li><code> ~ /.bashrc</code>：设置当前用户的bash环境；执行<code>/etc/bashrc</code></li><li><code> ~ /.bash_logout</code>：用户退出bash时执行</li></ul><p>关于非登录shell和登录shell：</p><ul><li>登录shell是通过了账户密码环节的启动的shell，执行<code> ~ /.bash_profile</code>、<code> ~ /.bash_login</code>或<code> ~ /.profile</code></li><li>非登录shell是在已登录的shell中打开新的shell时启动的，执行<code> ~ /.bashrc</code></li></ul><h3 id="etc-profile文件"><code>/etc/profile</code>文件</h3><p>是一个ASCII文件，定义全局环境变量，如<code>PATH</code>等。</p><p>也可以设置<code>umask</code>值。</p><p><code>/etc/profile.d</code>是一个文件夹，保存应用程序所需的启动脚本，如颜色、语言等。</p><h3 id="etc-bashrc文件"><code>/etc/bashrc</code>文件</h3><p>用于配置系统函数和缩写等，用户每次登陆环境都被读取，执行<code>.bashrc</code>文件：配置用户专用的bash环境。</p><p><code>.bash_logout</code>在退出bash时执行。</p><h3 id="export命令"><code>export</code>命令</h3><p>使一系列shell变量用于子shell。</p><h3 id="alias命令"><code>alias</code>命令</h3><p>为命令起一个名字：<code>alias {别名}={命令名}</code>，如果有空格则要用<code>""</code>括起来。没有参数则显示已定义的别名。</p><p>使用<code>unalias</code>取消别名。</p><h1>gcc和git</h1><h2 id="编译">编译</h2><p>gcc是GNU C编译器，g++是C++编译器，它们执行编译的步骤是：</p><ol><li>预处理：把头文件展开，去掉注释，替换宏，条件编译，产生<code>.i</code>文件（选项<code>-E</code>）</li><li>编译：转换为汇编语言，产生<code>.s</code>文件（选项<code>-S</code>）</li><li>汇编：转换为机器语言，产生<code>.o</code>文件（选项<code>-c</code>）</li><li>链接：链接目标代码，生成可执行程序（选项<code>-o</code>，以指定输出的文件名，默认为<code>.out</code>）</li></ol><h2 id="make工具">make工具</h2><p>是GNU工程化编译工具，用于编译同一项目中众多相互关联的源码文件，将维护命令和编译命令写在<code>makefile</code>文件中，实现合理编译。</p><p>主要解决的问题有：</p><ol><li>大项目源码维护</li><li>减少重复编译时间：自动判断哪些代码修改过，只对改动后的代码进行编译</li></ol><p><code>makefile</code>语法规则：</p><figure class="highlight arcade"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arcade">目标<span class="hljs-number">1</span>:依赖文件列表<br>&lt;<span class="hljs-literal">tab</span>&gt;命令列表<br><br><span class="hljs-comment">//目标：要产生的文件名称或动作的名称</span><br><span class="hljs-comment">//依赖文件：用于产生目标的输入文件</span><br><span class="hljs-comment">//命令：make执行的动作</span><br></code></pre></td></tr></tbody></table></figure><p>例如：</p><figure class="highlight avrasm"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">cal:</span> cal.o <span class="hljs-keyword">sub</span>.o sum.o<br><span class="hljs-meta"># 要产生cal文件，依赖文件为cal.o，sub.o，sum.o</span><br>    gcc cal.o <span class="hljs-keyword">sub</span>.o sum.o -o cal<br>    <span class="hljs-meta"># 动作</span><br><br><span class="hljs-symbol">clean:</span> <br>    rm -rf *.o<br></code></pre></td></tr></tbody></table></figure><p><code>make</code>命令的用法：<code>make [-f file] [targets]</code>。</p><p>make默认会在工作目录中寻找<code>makefile</code>文件作为输入，而<code>-f</code>指定其以外的作为输入。</p><p>如果没有指定的目标，则<code>make</code>会默认实现<code>makefile</code>的第一个目标然后退出，可以指定一个或多个目标，用空格分隔。</p><p>例如<code>make clean</code>命令，就是执行上方的<code>clean</code>目标。</p><h2 id="git">git</h2><p>git是Linus为了更好管理Linux内核开发而开发的开源分布式版本控制系统。</p><h3 id="配置邮箱和用户名">配置邮箱和用户名</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config user.name {用户名}<br><span class="hljs-comment"># 配置用户名</span><br>git config user.email {邮箱}<br><span class="hljs-comment"># 配置邮箱</span><br></code></pre></td></tr></tbody></table></figure><p>这是仓库级配置，只会影响本仓库。</p><p>全局配置如：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global user.name {用户名}<br>git config --global user.email {邮箱}<br></code></pre></td></tr></tbody></table></figure><h3 id="克隆仓库">克隆仓库</h3><p><code>git clone {远程仓库链接}</code>。</p><p>克隆成功后用户会在本地拥有一个完全相同的git副本。</p><h3 id="提交修改">提交修改</h3><ol><li>将文件添加到暂存区：<code>git add {目录或.}</code></li><li>提交暂存区的修改到本地仓库：<code>git commit -m "说明信息"</code></li></ol><h3 id="推送和拉取修改">推送和拉取修改</h3><p><code>git push {远程仓库} {本地分支}</code>将本地分支推送到远程仓库。</p><p><code>git pull {远程仓库} {远程分支}</code>将远程分支的更改合并到本地分支。</p><h3 id="分支">分支</h3><p>分支是一种软件项目管理不同版本的方法。可以通过创建分支将项目分割成独立的开发线，每个分支可以拥有自己的代码库和开发人员。</p><p>分支操作有：</p><ul><li>列出分支 <code>git branch</code></li><li>创建分支 <code>git branch {分支名}</code></li><li>切换到分支 <code>git chechout {分支名}</code></li><li>删除分支 <code>git branch -d {分支名}</code></li></ul><h3 id="其他git操作">其他git操作</h3><ul><li>查看当前状态 <code>git status</code></li><li>查看提交历史 <code>git log</code></li><li>查看和修改配置 <code>git config</code></li></ul><h1>shell编程</h1><p>shell脚本无需编译，易于编写。一个shell脚本会将命令一次交给shell执行，一次一条，直到停止或出错。以<code>#</code>为注释。</p><p>shell的程序文件被称为<strong>脚本</strong>、<strong>shell过程</strong>或<strong>shell脚本</strong>。</p><p>执行脚本有三种方式：</p><ul><li>启动新的shell，例如<code>sh hello.sh</code>或<code>ksh hello.sh</code>。</li><li>使用当前shell执行，运用<code>.</code>命令或<code>source</code>命令，例如<code>. hello.sh</code>和<code>source hello.sh</code></li><li>将其转换为可执行文件，如<code>chmod u+x hello.sh</code>，然后再使用<code>./hello.sh</code></li></ul><h2 id="变量">变量</h2><p>shell变量不需要先定义后使用，不支持数据类型，赋值都解释为字符串。</p><p>变量保存在内存中，直到其所在的shell进程结束或被<code>unset</code>清除。</p><p>直接将两个字符串放在一起就能够完成字符串拼接（注意被拼接的成员间不能有空格）</p><p>shell没有内部运算符供算术运算。</p><h2 id="算术运算">算术运算</h2><h3 id="expr命令"><code>expr</code>命令</h3><p>用于进行算术运算。运算符有：<code>+</code>、<code>-</code>、<code>\*</code>、<code>/</code>、<code>\%</code>，运算后输出到标准输出。符号左右要有空格，且参数只能是整数。</p><p><code>expr</code>中使用变量，需要用<code>$</code>取值。</p><p><code>expr</code>中也有逻辑运算符，写作<code>=</code>、<code>!=</code>、<code>\&lt;=</code>、<code>\&gt;=</code>、<code>\&lt;</code>、<code>\&gt;</code>。</p><h3 id="let命令"><code>let</code>命令</h3><p>进行整数计算，并将表达式的值赋给变量。例如：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">let</span> x=x+1<br></code></pre></td></tr></tbody></table></figure><p>运算符左右不需要空格，且无需<code>$</code>取值，可以直接使用。运算符也不需要转义符了。</p><h3 id="运算符"><code>(())</code>运算符</h3><p>支持将算术赋值表达式放到双括号中。变量用法和<code>let</code>一样。</p><h2 id="命令行输入">命令行输入</h2><p>命令行参数又称为位置变量，是用户输入命令后在后面跟着的数据，使用空格分隔，传送给程序。按照顺序，参数会被命名为<code>$0</code>到<code>$9</code>。</p><table><thead><tr><th style="text-align:center">位置变量</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center"><code>$0</code></td><td style="text-align:center">脚本文件名</td></tr><tr><td style="text-align:center"><code>$1</code> ~ <code>$9</code></td><td style="text-align:center">第1 ~ 9个命令行参数</td></tr><tr><td style="text-align:center"><code>$#</code></td><td style="text-align:center">命令行参数的个数</td></tr><tr><td style="text-align:center"><code>$@</code></td><td style="text-align:center">所有命令行参数，参数加引号时每个参数会被认为是一个字段（推荐使用）</td></tr><tr><td style="text-align:center"><code>$*</code></td><td style="text-align:center">所有命令行参数，参数加引号时每个参数都被合并成一个字符串</td></tr><tr><td style="text-align:center"><code>$?</code></td><td style="text-align:center">上一个命令返回的结果</td></tr><tr><td style="text-align:center"><code>$$</code></td><td style="text-align:center">正在执行进程的PID</td></tr></tbody></table><p>命令行参数多于9个时，后面的会被忽略，但是仍可以用<code>$*</code>获得。</p><p>使用<code>set</code>可以给<code>$1</code> ~ <code>$9</code>依次赋值。</p><h3 id="read命令"><code>read</code>命令</h3><p>从标准输入中读入字符串，存入变量中。若字符串数量多于变量的数量，则最后一个变量会存下剩下所有的字符串。</p><h2 id="条件语句">条件语句</h2><p><code>if-then</code>结构：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">if</span> [ condition ]<br><span class="hljs-comment"># 注意条件前后加空格</span><br><span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">command</span><br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></tbody></table></figure><p><code>if-then-else</code>结构：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">if</span> [ condition ]<br><span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">command</span><br><span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">command</span><br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></tbody></table></figure><p><code>if-then-elif</code>结构：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">if</span> [ condition1 ]<br><span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">command</span><br><span class="hljs-keyword">elif</span> [ condition2 ]<br><span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">command</span><br><span class="hljs-keyword">elif</span> [ condition3 ]<br><span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">command</span><br><span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">command</span><br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></tbody></table></figure><h3 id="test命令"><code>test</code>命令</h3><p>条件表达式<code>[ condition ]</code>等效于<code>test condition</code>命令，真返回<code>0</code>，否则返回非<code>0</code>。注意，<code>test</code>命令中字符串必须使用<code>""</code>括起。一般字符串的写法是：<code>test [选项] {字符串}</code>。</p><p>字符串比较与检测：</p><table><thead><tr><th style="text-align:center">操作符</th><th style="text-align:center">示例</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center"><code>=</code></td><td style="text-align:center"><code>$str1 = str2</code></td><td style="text-align:center">相同返回<code>0</code></td></tr><tr><td style="text-align:center"><code>!=</code></td><td style="text-align:center"><code>$str1 != str2</code></td><td style="text-align:center">不同返回<code>0</code></td></tr><tr><td style="text-align:center"><code>-n</code></td><td style="text-align:center"><code>-n $str</code></td><td style="text-align:center">包含字符返回<code>0</code></td></tr><tr><td style="text-align:center"><code>-z</code></td><td style="text-align:center"><code>-z $str</code></td><td style="text-align:center">不包含字符（空串）返回<code>0</code></td></tr></tbody></table><p>数值比较：</p><table><thead><tr><th style="text-align:center">操作符</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center"><code>-eq</code></td><td style="text-align:center">相等返回<code>0</code></td></tr><tr><td style="text-align:center"><code>-ne</code></td><td style="text-align:center">不等返回<code>0</code></td></tr><tr><td style="text-align:center"><code>-gt</code></td><td style="text-align:center">左大于右返回<code>0</code></td></tr><tr><td style="text-align:center"><code>-ge</code></td><td style="text-align:center">左大于等于右返回<code>0</code></td></tr><tr><td style="text-align:center"><code>-lt</code></td><td style="text-align:center">左小于右返回<code>0</code></td></tr><tr><td style="text-align:center"><code>-le</code></td><td style="text-align:center">左小于等于右返回<code>0</code></td></tr></tbody></table><p><code>test</code>也可以检测文件属性：</p><table><thead><tr><th style="text-align:center">操作符</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center"><code>-r</code></td><td style="text-align:center">文件是否存在且可读</td></tr><tr><td style="text-align:center"><code>-w</code></td><td style="text-align:center">文件是否存在且可写</td></tr><tr><td style="text-align:center"><code>-s</code></td><td style="text-align:center">文件是否存在且长度非零</td></tr><tr><td style="text-align:center"><code>-f</code></td><td style="text-align:center">文件是否存在且是普通文件</td></tr><tr><td style="text-align:center"><code>-d</code></td><td style="text-align:center">文件是否存在且是目录</td></tr></tbody></table><p>例如，检验<code>file1</code>是否为普通文件：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">file1=<span class="hljs-string">"file1"</span><br><span class="hljs-keyword">if</span> [ -f <span class="hljs-string">"<span class="hljs-variable">$file1</span>"</span> ]<br><span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">"存在"</span><br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></tbody></table></figure><p><code>test</code>命令也可以使用逻辑运算符组合条件，例如<code>test {表达式1} {运算符} {表达式2} ... </code>，等效于<code>[ {表达式1} {运算符} {表达式2} ... ]</code>。</p><table><thead><tr><th style="text-align:center">逻辑运算符</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center"><code>a</code></td><td style="text-align:center">与</td></tr><tr><td style="text-align:center"><code>o</code></td><td style="text-align:center">或</td></tr><tr><td style="text-align:center"><code>!</code></td><td style="text-align:center">非</td></tr></tbody></table><p>多个<code>test</code>也能组合：<code>test {表达式1} {逻辑运算符} test {表达式2}</code>，等效于<code>[ 表达式1 ] {逻辑运算符} [ 表达式2 ]</code>。</p><table><thead><tr><th style="text-align:center">逻辑运算符</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center"><code>&amp;&amp;</code></td><td style="text-align:center">与</td></tr><tr><td style="text-align:center">`</td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><code>!</code></td><td style="text-align:center">非</td></tr></tbody></table><h2 id="分支语句">分支语句</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">case</span> 变量值 <span class="hljs-keyword">in</span><br>{值1})<br>    <span class="hljs-built_in">command</span><br>    ;;<br>{值2})<br>    <span class="hljs-built_in">command</span><br>    ;;<br>*)<br>    <span class="hljs-built_in">command</span><br>    ;;<br><span class="hljs-keyword">esac</span><br></code></pre></td></tr></tbody></table></figure><h2 id="循环语句">循环语句</h2><h3 id="for循环"><code>for</code>循环</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">for</span> 变量<br><span class="hljs-keyword">in</span> 取值列表<br><span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">command</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></tbody></table></figure><p>取值列表可以有很多种：</p><ul><li>列出所有成员，例如<code>in file1 file2 file3</code></li><li>等差数列，例如<code>{起始值..结束值..步长}</code>（步长为1可省略）或<code>seq 起始值 步长 结束值</code>（步长或起始值为1均可省略）</li><li>命令的执行结果</li></ul><h3 id="while循环"><code>while</code>循环</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">while</span> [ condition ]<br><span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">command</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></tbody></table></figure><p>只要<code>condition</code>为<code>0</code>就一直执行。</p><h3 id="until循环"><code>until</code>循环</h3><p>写法和<code>while</code>一样，但是它是只要<code>condition</code>不为<code>0</code>就一直执行。</p><h3 id="终止控制">终止控制</h3><ul><li><code>continue</code>结束本轮循环，进入下一次循环</li><li><code>break</code>结束循环</li></ul><h2 id="程序返回">程序返回</h2><p><code>exit</code>命令可以立刻终止程序运行，格式为<code>exit n</code>，<code>n</code>为返回码。</p><h1>系统管理</h1><h2 id="磁盘和文件系统管理">磁盘和文件系统管理</h2><p>磁盘和磁盘分区是文件系统管理的基础，以设备文件的形式存在，并允许用户通过系统工具，如<code>mkfs</code>和<code>mount</code>进行操作，例如创建、挂载文件系统和格式化等。</p><p>磁盘和磁盘分区设备文件位于<code>/dev</code>目录下，命名为<code>xxyn</code>：</p><ul><li><code>xx</code>表示设备类型<ul><li><code>hd</code>：IDE磁盘</li><li><code>sd</code>：SATA等磁盘</li><li><code>vd</code>：虚拟磁盘</li></ul></li><li><code>y</code>表示设备编号，<code>a</code>为第1个，以此类推</li><li><code>n</code>为磁盘分区号<ul><li><code>1</code> ~ <code>4</code>为主分区或扩展分区</li><li><code>5</code>以后为逻辑分区</li></ul></li></ul><p><code>/dev/xxy</code>是一个整体的磁盘，<code>dev/xxyn</code>是这个磁盘上的一个分区。</p><h3 id="fdisk命令"><code>fdisk</code>命令</h3><p>对磁盘进行分区。语法为：<code>fdisk {磁盘设备名}</code>。使用<code>-l</code>选项可以显示磁盘分区表信息。</p><p>例如：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">fdisk /dev/sdb<br><span class="hljs-comment"># 在第二块sd设备上创建分区</span><br></code></pre></td></tr></tbody></table></figure><h3 id="lsblk命令"><code>lsblk</code>命令</h3><p>用于列出块设备信息，用途与<code>fdisk -l</code>类似。</p><h3 id="blkid命令"><code>blkid</code>命令</h3><p>用于查看块设备的文件系统类型，<code>LABEL</code>、<code>UUID</code>等信息。</p><h3 id="mkfs命令"><code>mkfs</code>命令</h3><p>用于在磁盘分区上创建文件系统，语法为<code>mkfs [选项] {磁盘分区名}</code>，选项<code>-t</code>用于创建执行的文件系统类型。例如：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">mkfs -t ext4 /dev/sdb1<br><span class="hljs-comment"># 分区类型指定为ext4</span><br></code></pre></td></tr></tbody></table></figure><h3 id="mount命令"><code>mount</code>命令</h3><p>用于挂载磁盘分区，语法为<code>mount [选项] {磁盘分区文件} {目录}</code>。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">mount -t ext4 /dev/sdb1 /mnt/mdisk<br><span class="hljs-comment"># 将/dev/sdb1挂载到/mnt/mdisk，文件系统类型指定为ext4</span><br><br>mount<br><span class="hljs-comment"># 查看已挂载的文件系统</span><br><br>mount -a<br><span class="hljs-comment"># 将etc/fstab中所有的文件系统挂载</span><br></code></pre></td></tr></tbody></table></figure><h3 id="umount命令"><code>umount</code>命令</h3><p>用于卸载文件系统，<code>umount {设备文件名/挂载文件系统的目录名}</code>。</p><h3 id="df命令"><code>df</code>命令</h3><p>列出磁盘分区空间使用情况，<code>-h</code>选项以易读方式显示。</p><h3 id="du命令"><code>du</code>命令</h3><p>显示目录的磁盘使用情况。<code>-a</code>选项显示目录中目录和文件的占用情况。</p><h2 id="归档和压缩：tar工具">归档和压缩：<code>tar</code>工具</h2><h3 id="打包">打包</h3><p>使用<code>tar -cvf {目标文件名} {（多个）文件名或目录}</code>将一组文件打包到一个文件中。</p><table><thead><tr><th style="text-align:center">选项</th><th style="text-align:center">意义</th></tr></thead><tbody><tr><td style="text-align:center"><code>-c</code></td><td style="text-align:center">创建存档文件</td></tr><tr><td style="text-align:center"><code>-v</code></td><td style="text-align:center">显示打包文件信息，列出里面都有些什么</td></tr><tr><td style="text-align:center"><code>-f</code></td><td style="text-align:center">指定生成的存档的文件名</td></tr></tbody></table><h3 id="查看打包文件">查看打包文件</h3><p>使用<code>tar -tvf {文件名}</code>查看包中文件的信息。</p><table><thead><tr><th style="text-align:center">选项</th><th style="text-align:center">意义</th></tr></thead><tbody><tr><td style="text-align:center"><code>-t</code></td><td style="text-align:center">列出存档中的内容</td></tr><tr><td style="text-align:center"><code>-v</code></td><td style="text-align:center">显示打包文件的<strong>详细信息</strong></td></tr><tr><td style="text-align:center"><code>-f</code></td><td style="text-align:center">指定存档的文件名</td></tr></tbody></table><h3 id="解包">解包</h3><p>使用<code>tar -xvf {文件名}</code>解包。</p><table><thead><tr><th style="text-align:center">选项</th><th style="text-align:center">意义</th></tr></thead><tbody><tr><td style="text-align:center"><code>-x</code></td><td style="text-align:center">还原被打包文件</td></tr><tr><td style="text-align:center"><code>-v</code></td><td style="text-align:center">显示打包文件的信息</td></tr><tr><td style="text-align:center"><code>-f</code></td><td style="text-align:center">指定存档的文件名</td></tr></tbody></table><p>使用<code>tar -xvf {文件名} {特定文件名}</code>可以只解出包中特定的那个文件，并将其信息显示出来。</p><h3 id="压缩与解压缩">压缩与解压缩</h3><p>如果同时打包并压缩，可以用<code>-z</code>、<code>-Z</code>、<code>-j</code>选项配合上面的命令一起使用。</p><ul><li><code>tar -cvzf {filename.tar.gz} {files}</code>：打包压缩</li><li><code>tar -xvzf {filename.tar.gz}</code>：解压缩并解包</li></ul><p><code>gzip</code>和<code>gunzip</code>也可以进行压缩或解压，但是往往使用<code>tar</code>命令一次完成压缩或解压。</p><h2 id="任务管理">任务管理</h2><h3 id="at命令"><code>at</code>命令</h3><p>用于在指定时间执行一个或一组命令：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">at 04 tomorrow<br>at &gt; <span class="hljs-built_in">sort</span> BIG_FILE<br><span class="hljs-comment"># 未指定输出文件，将以电子邮件将输出信息传送给用户</span><br>at &gt; [Ctrl+d]<br></code></pre></td></tr></tbody></table></figure><table><thead><tr><th style="text-align:center">选项</th><th style="text-align:center">意义</th></tr></thead><tbody><tr><td style="text-align:center"><code>-l</code></td><td style="text-align:center">列出所有<code>at</code>命令提交的作业</td></tr><tr><td style="text-align:center"><code>-m</code></td><td style="text-align:center">作业完成时向用户发送一条确认信息</td></tr><tr><td style="text-align:center"><code>-r</code></td><td style="text-align:center">从调度作业中删除指定的作业号</td></tr></tbody></table><h3 id="crontab命令"><code>crontab</code>命令</h3><p>配置用户自己的定时任务，语法为<code>crontab [-u 用户名] file（将制定文件中的任务加载到crontab中）</code>或<code>crontab [-u 用户名] {-l | -r | -e}</code>。</p><table><thead><tr><th style="text-align:center">选项</th><th style="text-align:center">意义</th></tr></thead><tbody><tr><td style="text-align:center"><code>-l</code></td><td style="text-align:center">列出定时任务的详细内容</td></tr><tr><td style="text-align:center"><code>-r</code></td><td style="text-align:center">删除用户的定时任务</td></tr><tr><td style="text-align:center"><code>-e</code></td><td style="text-align:center">编辑用户的定时任务</td></tr><tr><td style="text-align:center"><code>-u</code></td><td style="text-align:center">设定用户的定时任务</td></tr></tbody></table><p><code>crontab</code>可以设置周期性执行的任务，语法为<code>f1 f2 f3 f4 f5 command</code>。</p><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">意义</th></tr></thead><tbody><tr><td style="text-align:center"><code>f1</code></td><td style="text-align:center">分钟（<code>0</code> ~ <code>59</code>）</td></tr><tr><td style="text-align:center"><code>f2</code></td><td style="text-align:center">小时（<code>0</code> ~ <code>23</code>）</td></tr><tr><td style="text-align:center"><code>f3</code></td><td style="text-align:center">日期（<code>1</code> ~ <code>31</code>）</td></tr><tr><td style="text-align:center"><code>f4</code></td><td style="text-align:center">月份（<code>1</code> ~ <code>12</code>）</td></tr><tr><td style="text-align:center"><code>f5</code></td><td style="text-align:center">星期几（<code>0</code> ~ <code>6</code>），<code>0</code>代表星期天</td></tr><tr><td style="text-align:center"><code>command</code></td><td style="text-align:center">需要执行的命令或脚本文件</td></tr></tbody></table><h2 id="用户管理">用户管理</h2><p>用户分为根账户、系统账户、普通用户账户。</p><ul><li>根用户：<code>root</code>，不受约束的控制系统</li><li>系统账户：对系统特定组件进行操作的用户</li><li>普通用户账户：提供对系统的交互性访问，对关键的系统文件和目录访问权限有限</li></ul><h3 id="组">组</h3><p>组是具有相同特性的用户的集合，是对用户进行资源分配的一种方式，按照性质划分为系统组和私有组。</p><p>组长好不能登录计算机，设置的目的仅仅是便于权限的统一组织和分配。</p><h3 id="账号配置文件">账号配置文件</h3><ul><li><code>etc/passwd</code>保存用户账户信息</li><li><code>etc/shadow</code>保存用户密码信息</li><li><code>etc/group</code>保存组账户信息</li></ul><p><code>etc/passwd</code>文件<code>root</code>用户可读可写，其他用户可读，每行一个记录，每个记录7个字段，用冒号分隔：</p><figure class="highlight dust"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="hljs-template-variable">{用户名}</span><span class="language-xml">:</span><span class="hljs-template-variable">{密码flag，x表示设置了密码，空表示无密码}</span><span class="language-xml">:</span><span class="hljs-template-variable">{用户ID}</span><span class="language-xml">:</span><span class="hljs-template-variable">{默认组ID}</span><span class="language-xml">:</span><span class="hljs-template-variable">{用户详细信息}</span><span class="language-xml">:</span><span class="hljs-template-variable">{用户主目录}</span><span class="language-xml">:</span><span class="hljs-template-variable">{登录时启动的shell}</span><br></code></pre></td></tr></tbody></table></figure><p><code>useradd</code>命令可以创建用户账户。</p><table><thead><tr><th style="text-align:center">选项</th><th style="text-align:center">意义</th></tr></thead><tbody><tr><td style="text-align:center"><code>-u</code></td><td style="text-align:center">指定用户号</td></tr><tr><td style="text-align:center"><code>-g</code></td><td style="text-align:center">指定默认组</td></tr><tr><td style="text-align:center"><code>-s</code></td><td style="text-align:center">指定默认shell</td></tr></tbody></table><p><code>usermod</code>命令可以修改用户账户。</p><p><code>userdel</code>命令可以删除用户账户。</p><h3 id="身份切换">身份切换</h3><p><code>su</code>命令可以切换身份：<code>su [-]（同时切换到新工作环境） [用户名]</code>。</p><p>平级升级切换需要输入密码。</p>]]></content>
    
    
    <categories>
      
      <category>课程笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二手房房价数据的爬取、清洗、可视化、预测</title>
    <link href="/2024/crawer/"/>
    <url>/2024/crawer/</url>
    
    <content type="html"><![CDATA[<h1>数据爬取</h1><h2 id="爬虫和人机验证">爬虫和人机验证</h2><p>利用Selenium库和Edge Driver可唤起实体浏览器，并捕获网站中的<code>Element</code>元素。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs python">count=<span class="hljs-number">0</span><br>dataList=[]<br><span class="hljs-comment"># 浏览器可无头化：</span><br><span class="hljs-comment"># options=webdriver.EdgeOptions()</span><br><span class="hljs-comment"># options.add_argument('--headless')</span><br><span class="hljs-comment"># driver = webdriver.Edge(options=options)</span><br><span class="hljs-comment"># driver = webdriver.Edge()</span><br>driver = webdriver.Edge()<br>flag=<span class="hljs-number">1</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>,<span class="hljs-number">64</span>):    <span class="hljs-comment"># 爬取第几页</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">"爬取第"</span>+<span class="hljs-built_in">str</span>(i)+<span class="hljs-string">"页"</span>)<br>    url=baseUrl+<span class="hljs-built_in">str</span>(i)<br>    driver.get(url)<br>    <span class="hljs-keyword">if</span> flag:<br>        time.sleep(<span class="hljs-number">10</span>)<br>        flag=<span class="hljs-number">0</span><br>    <span class="hljs-built_in">print</span>(driver.title)<br>    item0=driver.find_elements(By.CLASS_NAME,<span class="hljs-string">"lj-lazy"</span>)<br>    item1=driver.find_elements(By.CLASS_NAME,<span class="hljs-string">"title"</span>)<br>    item2=driver.find_elements(By.CLASS_NAME,<span class="hljs-string">"positionInfo"</span>)<br>    item3=driver.find_elements(By.CLASS_NAME,<span class="hljs-string">"houseInfo"</span>)<br>    item4=driver.find_elements(By.CLASS_NAME,<span class="hljs-string">"totalPrice "</span>)<br>    item5=driver.find_elements(By.CLASS_NAME,<span class="hljs-string">"unitPrice "</span>)<br>    item6 = driver.find_elements(By.CLASS_NAME, <span class="hljs-string">"followInfo"</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(item2)):<br>        data=[]<br>        data.append(item1[i].text)  <span class="hljs-comment"># 概况</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">"第"</span>+<span class="hljs-built_in">str</span>(i+<span class="hljs-number">1</span>)+<span class="hljs-string">"个："</span>+item1[i].text)<br>        data.append(item2[i].text.split(<span class="hljs-string">"-"</span>)[<span class="hljs-number">0</span>])  <span class="hljs-comment"># 小区名</span><br>        data.append(item2[i].text.split(<span class="hljs-string">"-"</span>)[<span class="hljs-number">1</span>])  <span class="hljs-comment"># 所属地区</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(item3[i].text.split(<span class="hljs-string">"|"</span>))&gt;<span class="hljs-number">0</span>:<br>            data.append(item3[i].text.split(<span class="hljs-string">"|"</span>)[<span class="hljs-number">0</span>])  <span class="hljs-comment"># 其他信息</span><br>        <span class="hljs-keyword">else</span>:<br>            data.append(<span class="hljs-string">'未知数据'</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(item3[i].text.split(<span class="hljs-string">"|"</span>))&gt;<span class="hljs-number">1</span>:<br>            data.append(item3[i].text.split(<span class="hljs-string">"|"</span>)[<span class="hljs-number">1</span>])<br>        <span class="hljs-keyword">else</span>:<br>            data.append(<span class="hljs-string">'未知数据'</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(item3[i].text.split(<span class="hljs-string">"|"</span>))&gt;<span class="hljs-number">2</span>:<br>            data.append(item3[i].text.split(<span class="hljs-string">"|"</span>)[<span class="hljs-number">2</span>])<br>        <span class="hljs-keyword">else</span>:<br>            data.append(<span class="hljs-string">'未知数据'</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(item3[i].text.split(<span class="hljs-string">"|"</span>))&gt;<span class="hljs-number">3</span>:<br>            data.append(item3[i].text.split(<span class="hljs-string">"|"</span>)[<span class="hljs-number">3</span>])<br>        <span class="hljs-keyword">else</span>:<br>            data.append(<span class="hljs-string">'未知数据'</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(item3[i].text.split(<span class="hljs-string">"|"</span>))&gt;<span class="hljs-number">4</span>:<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(item3[i].text.split(<span class="hljs-string">"|"</span>)[<span class="hljs-number">4</span>].split(<span class="hljs-string">"("</span>))&gt;<span class="hljs-number">0</span>:<br>                data.append(item3[i].text.split(<span class="hljs-string">"|"</span>)[<span class="hljs-number">4</span>].split(<span class="hljs-string">"("</span>)[<span class="hljs-number">0</span>])<br>                <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(item3[i].text.split(<span class="hljs-string">"|"</span>)[<span class="hljs-number">4</span>].split(<span class="hljs-string">"("</span>))&gt;<span class="hljs-number">1</span>:<br>                    amount = re.search(<span class="hljs-string">r'共(\d+)层'</span>, item3[i].text.split(<span class="hljs-string">"|"</span>)[<span class="hljs-number">4</span>].split(<span class="hljs-string">"("</span>)[<span class="hljs-number">1</span>])<br>                    <span class="hljs-keyword">if</span> amount:<br>                        <span class="hljs-comment"># 提取第一个捕获组的内容</span><br>                        number = amount.group(<span class="hljs-number">1</span>)<br>                        data.append(number)<br>                    <span class="hljs-keyword">else</span>:<br>                        data.append(<span class="hljs-string">'未知数据'</span>)<br>                <span class="hljs-keyword">else</span>:<br>                    data.append(<span class="hljs-string">'未知数据'</span>)<br>            <span class="hljs-keyword">else</span>:<br>                data.append(<span class="hljs-string">'未知数据'</span>)<br>        <span class="hljs-keyword">else</span>:<br>            data.append(<span class="hljs-string">'未知数据'</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(item3[i].text.split(<span class="hljs-string">"|"</span>))&gt;<span class="hljs-number">5</span>:<br>            data.append(item3[i].text.split(<span class="hljs-string">"|"</span>)[<span class="hljs-number">5</span>])<br>        <span class="hljs-keyword">else</span>:<br>            data.append(<span class="hljs-string">'未知数据'</span>)<br><br>        data.append(item4[i].text.split()[<span class="hljs-number">0</span>]+item4[i].text.split()[<span class="hljs-number">1</span>])  <span class="hljs-comment"># 总价</span><br>        data.append(item5[i].text)  <span class="hljs-comment"># 单价</span><br>        data.append(item6[i].text.split(<span class="hljs-string">"/"</span>)[<span class="hljs-number">0</span>])<br>        data.append(item6[i].text.split(<span class="hljs-string">"/"</span>)[<span class="hljs-number">1</span>])<br>        data.append(item0[i].get_attribute(<span class="hljs-string">"data-original"</span>))  <span class="hljs-comment"># 图片</span><br>        dataList.append(data)<br>        count=count+<span class="hljs-number">1</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">"完成"</span>)<br>driver.quit()<br></code></pre></td></tr></tbody></table></figure><p>倘若遇到人机验证，可<code>time.sleep()</code>给我们手动输入验证码的时间。</p><h2 id="输出">输出</h2><p>利用xlwt库：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">saveData</span>(<span class="hljs-params">dataList,savepath,count</span>):<br>    book = xlwt.Workbook(encoding=<span class="hljs-string">"utf-8"</span>,style_compression=<span class="hljs-number">0</span>)<br>    sheet = book.add_sheet(<span class="hljs-string">'二手房'</span>, cell_overwrite_ok=<span class="hljs-literal">True</span>)<br>    col = (<span class="hljs-string">"概况"</span>,<span class="hljs-string">"小区名"</span>,<span class="hljs-string">"所属地区"</span>,<span class="hljs-string">"户型"</span>,<span class="hljs-string">"面积"</span>,<span class="hljs-string">"朝向"</span>,<span class="hljs-string">"装潢"</span>,<span class="hljs-string">"楼层高低"</span>,<span class="hljs-string">"总楼层数"</span>,<span class="hljs-string">"建筑类型"</span>,<span class="hljs-string">"总价"</span>,<span class="hljs-string">"单价"</span>,<span class="hljs-string">"关注度"</span>,<span class="hljs-string">"发布时间"</span>,<span class="hljs-string">"图片地址"</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">15</span>):<br>        sheet.write(<span class="hljs-number">0</span>,i,col[i])<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,count):<br>        data = dataList[i]<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">15</span>):<br>            sheet.write(i+<span class="hljs-number">1</span>,j,data[j])<br>    book.save(savepath)<br></code></pre></td></tr></tbody></table></figure><h2 id="多线程化">多线程化</h2><p>直接调用库即可，可启动多个浏览器进行爬虫：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>(<span class="hljs-params">page_start,pages_end, savepath</span>):<br>    all_data = []<br><br>    <span class="hljs-keyword">with</span> ThreadPoolExecutor(max_workers=(pages_end-page_start+<span class="hljs-number">1</span>)) <span class="hljs-keyword">as</span> executor:<br>        futures = [executor.submit(scrape_page, i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(page_start, pages_end + <span class="hljs-number">1</span>)]<br><br>        <span class="hljs-keyword">for</span> future <span class="hljs-keyword">in</span> futures:<br>            page_data = future.result()<br>            all_data.extend(page_data)<br><br>    saveData(all_data, savepath)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f"成功抓取 <span class="hljs-subst">{pages_end-page_start+<span class="hljs-number">1</span>}</span> 页数据并保存到 <span class="hljs-subst">{savepath}</span>"</span>)<br></code></pre></td></tr></tbody></table></figure><h1>数据清洗</h1><p>主要调用Pandas和Numpy：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python">column_names = [<span class="hljs-string">'概况'</span>,<span class="hljs-string">'小区名'</span>,<span class="hljs-string">'所属地区'</span>,<span class="hljs-string">'户型'</span>,<span class="hljs-string">'面积'</span>,<span class="hljs-string">'朝向'</span>,<span class="hljs-string">'装潢'</span>,<span class="hljs-string">'楼层高低'</span>,<span class="hljs-string">'总楼层数'</span>,<span class="hljs-string">'建筑类型'</span>,<span class="hljs-string">'总价'</span>,<span class="hljs-string">'单价'</span>,<span class="hljs-string">'关注度'</span>,<span class="hljs-string">'发布时间'</span>,<span class="hljs-string">'图片地址'</span>]<br>data = pd.read_excel(<span class="hljs-string">'二手房.xls'</span>, usecols=column_names, engine=<span class="hljs-string">'xlrd'</span>)<br>data.head()<br>df=pd.DataFrame(data)<br>df[<span class="hljs-string">'概况'</span>]=df[<span class="hljs-string">'概况'</span>].<span class="hljs-built_in">str</span>.replace(<span class="hljs-string">'\n'</span>,<span class="hljs-string">' '</span>)<br>df[<span class="hljs-string">'小区名'</span>]=df[<span class="hljs-string">'小区名'</span>].<span class="hljs-built_in">str</span>.replace(<span class="hljs-string">' '</span>,<span class="hljs-string">''</span>)<br>df[<span class="hljs-string">'所属地区'</span>]=df[<span class="hljs-string">'所属地区'</span>].<span class="hljs-built_in">str</span>.replace(<span class="hljs-string">' '</span>,<span class="hljs-string">''</span>)<br>df[<span class="hljs-string">'户型'</span>]=df[<span class="hljs-string">'户型'</span>].<span class="hljs-built_in">str</span>.replace(<span class="hljs-string">' '</span>,<span class="hljs-string">''</span>)<br>df[<span class="hljs-string">'面积'</span>]=df[<span class="hljs-string">'面积'</span>].<span class="hljs-built_in">str</span>.replace(<span class="hljs-string">' '</span>,<span class="hljs-string">''</span>)<br>df[<span class="hljs-string">'面积'</span>]=df[<span class="hljs-string">'面积'</span>].<span class="hljs-built_in">str</span>.replace(<span class="hljs-string">'平米'</span>,<span class="hljs-string">''</span>)<br>df[<span class="hljs-string">'朝向'</span>]=df[<span class="hljs-string">'朝向'</span>].<span class="hljs-built_in">map</span>(<span class="hljs-built_in">str</span>.strip)<br>df[<span class="hljs-string">'装潢'</span>]=df[<span class="hljs-string">'装潢'</span>].<span class="hljs-built_in">str</span>.replace(<span class="hljs-string">' '</span>,<span class="hljs-string">''</span>)<br>df[<span class="hljs-string">'楼层高低'</span>]=df[<span class="hljs-string">'楼层高低'</span>].<span class="hljs-built_in">str</span>.replace(<span class="hljs-string">' '</span>,<span class="hljs-string">''</span>)<br>df[<span class="hljs-string">'建筑类型'</span>]=df[<span class="hljs-string">'建筑类型'</span>].<span class="hljs-built_in">str</span>.replace(<span class="hljs-string">' '</span>,<span class="hljs-string">''</span>)<br>df[<span class="hljs-string">'总价'</span>]=df[<span class="hljs-string">'总价'</span>].<span class="hljs-built_in">str</span>.replace(<span class="hljs-string">'万'</span>,<span class="hljs-string">''</span>)<br>df[<span class="hljs-string">'单价'</span>]=df[<span class="hljs-string">'单价'</span>].<span class="hljs-built_in">str</span>.replace(<span class="hljs-string">','</span>,<span class="hljs-string">''</span>)<br>df[<span class="hljs-string">'单价'</span>]=df[<span class="hljs-string">'单价'</span>].<span class="hljs-built_in">str</span>.replace(<span class="hljs-string">'元/平'</span>,<span class="hljs-string">''</span>)<br>df[<span class="hljs-string">'关注度'</span>]=df[<span class="hljs-string">'关注度'</span>].<span class="hljs-built_in">str</span>.replace(<span class="hljs-string">'人关注'</span>,<span class="hljs-string">''</span>)<br>df[<span class="hljs-string">'关注度'</span>]=df[<span class="hljs-string">'关注度'</span>].<span class="hljs-built_in">str</span>.replace(<span class="hljs-string">' '</span>,<span class="hljs-string">''</span>)<br>df[<span class="hljs-string">'发布时间'</span>]=df[<span class="hljs-string">'发布时间'</span>].<span class="hljs-built_in">str</span>.replace(<span class="hljs-string">' '</span>,<span class="hljs-string">''</span>)<br>df[<span class="hljs-string">'发布时间'</span>] = df[<span class="hljs-string">'发布时间'</span>].<span class="hljs-built_in">str</span>.replace(<span class="hljs-string">'以前发布'</span>, <span class="hljs-string">'前'</span>)<br>df[<span class="hljs-string">'发布时间'</span>] = df[<span class="hljs-string">'发布时间'</span>].<span class="hljs-built_in">str</span>.replace(<span class="hljs-string">'前发布'</span>, <span class="hljs-string">'前'</span>)<br>df[<span class="hljs-string">'总楼层数'</span>] = df[<span class="hljs-string">'总楼层数'</span>].astype(<span class="hljs-built_in">int</span>, errors=<span class="hljs-string">'ignore'</span>)<br>df = df.astype({<span class="hljs-string">'单价'</span>: <span class="hljs-built_in">float</span>, <span class="hljs-string">'总价'</span>: <span class="hljs-built_in">float</span>, <span class="hljs-string">'面积'</span>: <span class="hljs-built_in">float</span> ,<span class="hljs-string">'关注度'</span>: <span class="hljs-built_in">int</span>})<br>df = df.drop_duplicates(subset=[<span class="hljs-string">'概况'</span>,<span class="hljs-string">'小区名'</span>,<span class="hljs-string">'所属地区'</span>,<span class="hljs-string">'户型'</span>,<span class="hljs-string">'面积'</span>,<span class="hljs-string">'朝向'</span>,<span class="hljs-string">'装潢'</span>,<span class="hljs-string">'楼层高低'</span>,<span class="hljs-string">'总楼层数'</span>,<span class="hljs-string">'建筑类型'</span>,<span class="hljs-string">'总价'</span>,<span class="hljs-string">'单价'</span>,<span class="hljs-string">'关注度'</span>,<span class="hljs-string">'发布时间'</span>,<span class="hljs-string">'图片地址'</span>])<br>df = df[df[<span class="hljs-string">'总楼层数'</span>] != <span class="hljs-string">'未知数据'</span>]<br><span class="hljs-comment"># print(df['总楼层数'].value_counts())</span><br><br>df.to_excel(<span class="hljs-string">"清洗.xlsx"</span>, index=<span class="hljs-literal">False</span>)<br></code></pre></td></tr></tbody></table></figure><p>可以做到简单的去除重复数据、格式标准化、类型转换。</p><h1>数据可视化</h1><p>主要利用Matplotlib，也可使用Pyecharts。</p><h1>数据预测</h1><p>主要使用Scikit-Learn机器学习。</p><h2 id="数据编码">数据编码</h2><p>要将非数值数据进行编码，可采用<strong>标签编码、独热编码、平均值编码</strong>等方式，我们主要采用的是独热编码和平均值编码。</p><h3 id="独热编码">独热编码</h3><p>将数据编码为列向量的形式，即非“本特征”定义为<code>0</code>，否则为<code>1</code>。但是为了拟合的准确性，我们需要丢弃每个元素进行独热编码后的第一列（即<code>drop_first=True</code>语句）。独热编码适合类型少的数据。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">preOneHot</span>(<span class="hljs-params">data</span>):    <span class="hljs-comment"># 使用OneHot预处理数据</span><br>    types = data[[<span class="hljs-string">'楼层高低'</span>, <span class="hljs-string">'建筑类型'</span>]]<br>    types_encoded = pd.get_dummies(types, drop_first=<span class="hljs-literal">True</span>)<br>    <span class="hljs-keyword">return</span> types_encoded<br></code></pre></td></tr></tbody></table></figure><h3 id="平均值编码">平均值编码</h3><p>即编码为该特征目标值的平均值。适合类型多的数据。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">PreAverage</span>(<span class="hljs-params">df, feature, target</span>):    <span class="hljs-comment"># 平均值编码</span><br>    encoding_map = df.groupby(feature)[target].mean()<br>    <span class="hljs-keyword">return</span> df[feature].<span class="hljs-built_in">map</span>(encoding_map)<br></code></pre></td></tr></tbody></table></figure><h2 id="模型训练">模型训练</h2><h3 id="划分">划分</h3><p>在对数据进行编码后，就可以划分为训练集和测试集了。其中还用StandardScaler进行了正态分布化，可以提高训练效率。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">data = inputData()<br>final_data = preData(data)<br>X = final_data.values<br>y = data[targetCols].values.ravel()<br><br><br>X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=<span class="hljs-number">0.6</span>, random_state=<span class="hljs-number">400</span>)<br><br>scaler = StandardScaler()   <span class="hljs-comment"># 数据标准化，转化成正态分布</span><br>X_train = scaler.fit_transform(X_train)<br>X_test = scaler.transform(X_test)<br></code></pre></td></tr></tbody></table></figure><h3 id="模型选择">模型选择</h3><p>回归模型有很多种，但我们必须选择性能最好的那个，所以先每一个都试一遍：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python">models = {<br>    <span class="hljs-string">'K-邻近算法'</span>: KNeighborsRegressor(),<br>    <span class="hljs-string">'线性回归'</span>: LinearRegression(),<br>    <span class="hljs-string">'岭回归'</span>: Ridge(),<br>    <span class="hljs-string">'拉索回归'</span>: Lasso(),<br>    <span class="hljs-string">'决策树回归'</span>: DecisionTreeRegressor(),<br>    <span class="hljs-string">'支持向量回归'</span>: SVR()<br>}<br><br><span class="hljs-keyword">for</span> name, model <span class="hljs-keyword">in</span> models.items():              <span class="hljs-comment"># 每个模型都试一遍</span><br>    model.fit(X_train, y_train)<br>    y_pred = model.predict(X_test)<br>    r2 = r2_score(y_test, y_pred)               <span class="hljs-comment"># r2值</span><br>    mse = mean_squared_error(y_test, y_pred)    <span class="hljs-comment"># 均方根误差</span><br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f"模型 <span class="hljs-subst">{name}</span> 的 r2 值为：<span class="hljs-subst">{r2:<span class="hljs-number">.4</span>f}</span>，RMSE 值为 <span class="hljs-subst">{np.sqrt(mse):<span class="hljs-number">.4</span>f}</span>"</span>)<br><br>    R = random.randrange(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(X_test))  <span class="hljs-comment"># 取随机数</span><br>    y_true = y_test[R]<br>    X_sample = X_test[R].reshape(<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>)         <span class="hljs-comment"># 转置向量</span><br><br>    y_pred_sample = model.predict(X_sample)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f'房价真实值为：<span class="hljs-subst">{y_true:<span class="hljs-number">.2</span>f}</span>，房价推测值为：<span class="hljs-subst">{y_pred_sample[<span class="hljs-number">0</span>]:<span class="hljs-number">.2</span>f}</span>，差值为：<span class="hljs-subst">{<span class="hljs-built_in">abs</span>(y_pred_sample[<span class="hljs-number">0</span>] - y_true):<span class="hljs-number">.2</span>f}</span>\n'</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">"综合以上，可以看到线性回归、岭回归、拉索回归的效果是最好的"</span>)<br></code></pre></td></tr></tbody></table></figure><p>接下来，就可以用线性回归模型进行拟合预测了。结合可交互界面就可以完成本项目。</p>]]></content>
    
    
    <categories>
      
      <category>CS 杂谈</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>机器学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>面向对象程序设计课程笔记</title>
    <link href="/2024/oop/"/>
    <url>/2024/oop/</url>
    
    <content type="html"><![CDATA[<p>这是本人为了应付学校oop考试（结果还是喜提3.7），以课程ppt为基础整合出来给自己复习的文章。</p><h1>面向对象编程</h1><h2 id="面向对象的三要素">面向对象的三要素</h2><ul><li><p>封装与数据屏蔽</p></li><li><p>继承与重用</p></li><li><p>多态</p></li></ul><h2 id="面向对象编程的过程">面向对象编程的过程</h2><ul><li><p>OOA：面向对象分析（干什么）</p></li><li><p>OOD：面向对象设计（怎样干）</p></li><li><p>OOP：面向对象编程（实现）</p></li></ul><h2 id="面向对象的原则">面向对象的原则</h2><table><thead><tr><th style="text-align:center">原则</th><th style="text-align:center">解释</th></tr></thead><tbody><tr><td style="text-align:center">单一职责</td><td style="text-align:center">一个大类不如多个小类灵活</td></tr><tr><td style="text-align:center">接口隔离</td><td style="text-align:center">依赖关系建立在最少的接口上</td></tr><tr><td style="text-align:center">开放封闭</td><td style="text-align:center">对扩展开放、对修改关闭</td></tr><tr><td style="text-align:center">依赖倒转</td><td style="text-align:center">最好关联抽象类，越抽象越底层</td></tr><tr><td style="text-align:center">里氏替换</td><td style="text-align:center">子类对象可以完全顶替父类，而程序的行为没有变</td></tr><tr><td style="text-align:center">迪米特</td><td style="text-align:center">一个对象应该对其他对象有最少的了解</td></tr><tr><td style="text-align:center">合成聚合复用</td><td style="text-align:center">尽量使用合成（成员与对象存活时间相同，例如有成员<code>Engine _engine</code>）/聚合（成员与对象存活时间不同，例如有成员<code>Engine* _engine</code>），尽量不使用继承</td></tr></tbody></table><h1>指针</h1><h2 id="数组">数组</h2><p><code>a[b]</code>等效于<code>*(a+b)</code>，数组名就是指针。</p><p>类似于<code>int (*p)[4]</code>这样的写法中，<code>p</code>指的是一个指向元素数量为<code>4</code>的<code>int</code>型数组的指针。</p><h2 id="指针函数">指针函数</h2><p>指针函数用来申请空间或者查找数据，函数指针用来动态指定参与运算的函数。</p><ul><li>定义指针函数：<code>int* f(int x)</code><br><br><code>int*</code>是返回类型，<code>f</code>是函数的名字。</li><li>定义函数指针：<code>int (*g)(int)</code><br><br><code>int</code>是返回类型，<code>g</code>是函数指针的名字。<br><strong>函数指针的使用更像是一个变量</strong>，保存着函数，定义在<code>main()</code>或者其他的函数里面。</li></ul><p>如果要用<code>typedef</code>来给函数指针起别名，可以参考：</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">int</span> <span class="hljs-params">(*the_func_pointer_name)</span><span class="hljs-params">(<span class="hljs-type">int</span>,<span class="hljs-type">int</span>)</span></span>;<br></code></pre></td></tr></tbody></table></figure><p>调用<code>the_func_pointer_name</code>关键字就可以定义一个参数为两个<code>int</code>，返回值为<code>int</code>的函数指针。</p><p>给函数指针赋值可以用<code>函数名</code>或<code>&amp;函数名</code>：</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">f</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">g</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">int</span> <span class="hljs-params">(*the_func_pointer_name)</span><span class="hljs-params">(<span class="hljs-type">int</span>,<span class="hljs-type">int</span>)</span></span>;<br>the_func_pointer_name a,b;<br>a=f;<br>b=&amp;g;<br></code></pre></td></tr></tbody></table></figure><p>特别地，<code>int (*F(int x))(int,int)</code>是一个函数，其返回值是一个函数指针<code>int (*F)(int,int)</code>，这个函数指针对应的函数有两个<code>int</code>类型的参数，调用形参<code>int x</code>之后返回。可以参考<code>typedef</code>在函数指针中的用法。</p><h2 id="常量">常量</h2><ul><li>指针常量<code>int* const p</code>：<code>p</code>指向的地址不可以被改变，数组头就是类似的。</li><li>常量指针<code>const int* p</code>或<code>int const *p</code>：<code>p</code>指向的地址可以改变，但是<code>*p</code>是一个常量。<br><br>常量<code>const int</code>类型的变量，其地址不能被赋给<code>int*</code>类型的指针，而必须是赋给常量指针<code>const int*</code>，否则会使权限被外界扩大。</li><li>指向常量的常量指针<code>const int *const p</code>：既不能修改地址，也不能修改指向的量。</li></ul><table><thead><tr><th style="text-align:center">定义</th><th style="text-align:center">意义</th></tr></thead><tbody><tr><td style="text-align:center"><code>const int *const p</code></td><td style="text-align:center">指向常量的指针常量</td></tr><tr><td style="text-align:center"><code>int const * const p</code></td><td style="text-align:center">指向常量的指针常量</td></tr><tr><td style="text-align:center"><code>int * const p</code></td><td style="text-align:center">指针常量</td></tr><tr><td style="text-align:center"><code>int const * p</code></td><td style="text-align:center">常量指针</td></tr></tbody></table><p>定义<code>const</code>指针的意义：</p><ul><li><strong>内部需要</strong>：<code>this</code>和常成员函数的<code>this</code></li><li><strong>参数传递</strong>：传递过程中权限被缩小的机制，使数据得到保护，责任划分清楚</li></ul><p>例如：</p><table><thead><tr><th style="text-align:center">定义</th><th style="text-align:center">意义</th><th style="text-align:center">备注</th></tr></thead><tbody><tr><td style="text-align:center"><code>void A(int const *const p);</code></td><td style="text-align:center">指向常量的指针常量</td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><code>void B(int *const p);</code></td><td style="text-align:center">指针常量</td><td style="text-align:center">数组内容可能被修改</td></tr><tr><td style="text-align:center"><code>void C(int const *p);</code></td><td style="text-align:center">常量指针</td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><code>void D(int *p);</code></td><td style="text-align:center">普通指针</td><td style="text-align:center">数组内容可能被修改</td></tr></tbody></table><p><code>const</code>还有一个重要用法：用于<strong>常成员函数</strong>。</p><h1>引用</h1><p>普通的函数传参存在形式歧义。</p><p>如果有一个函数，它的参数是一个类<code>A</code>，那么参数传递相当于：<code>class A swap.a = main.a</code>，就是在这个函数的作用域里面重新创建了一个这样的对象，并将其赋值为传入的参数，会引起拷贝构造函数或赋值运算的调用，如果这个过程很复杂，代价就会非常大。如果<code>Class A</code>继承或者组合了其他类。则要引起拷贝构造函数的层层调用，代价更大。使用引用则可以改善。</p><p><strong>引用就是别名</strong>。定义必须初始化：<code>int&amp; i=j;</code>。因为如果<code>int&amp; i=j;</code>，那么<code>i==j</code>且<code>&amp;i==&amp;j</code>。引用一旦被定义了，就不能再被修改，它和指针的意义是等价的，只不过更直白,所以是使用<code>&amp;</code>运算符定义。</p><h2 id="与指针的关系">与指针的关系</h2><ul><li>引用可以代替指针常量：<ul><li><code>int i;int *const p＝&amp;i;</code><br><br>等效于：</li><li><code>int  &amp;p=i;</code></li></ul></li><li>引用数组<code>int a[10]</code>时，可以采用：<ul><li><code>int (&amp;f)[10]=a;</code></li></ul></li><li>没有引用的引用。</li><li>不存在<code>void</code>类型的引用。</li><li>引用与<code>const</code>：<ul><li>引用一般不能强制类型转换，例如<code>int a=1;</code>时，<code>float &amp;b=a;</code>和<code>float &amp;c=float(a);</code>、<code>float &amp;d=(float)a;</code>是不被允许的，但是如果将它定义为<code>float const &amp;e=a;</code>则是可以的。</li><li><code>int &amp;i=1;</code>是错误的，但是<code>int const &amp;i=1;</code>正确</li></ul></li></ul><h2 id="函数返回引用和返回变量">函数返回引用和返回变量</h2><h3 id="返回变量">返回变量</h3><p>返回变量的优点包括：</p><ul><li><p>安全性：</p><p>返回一个值的副本可以保证调用者无法直接修改原始对象，因为它们操作的是不同的副本。</p></li><li><p>简单性：</p><p>对于小型对象或内置类型（如整数、浮点数等），返回值副本通常更加简单和高效。</p></li><li><p>线程安全性：</p><p>在多线程环境下，每个线程可以安全地操作自己的返回值副本，避免了竞态条件的问题。</p></li></ul><p>一些缺点：</p><ul><li><p>性能开销：</p><p>返回大型对象时，需要进行复制操作，可能会带来较大的性能开销，尤其是在频繁调用和处理大对象时。</p></li></ul><h3 id="返回引用">返回引用</h3><p>返回引用意味着函数返回的是原始对象的引用，调用者可以直接访问和修改原始对象。</p><p>优点包括：</p><ul><li><p>性能效率：</p><p>避免了返回值时的对象复制，节省了时间和空间开销，特别是对于大型对象而言。</p></li><li><p>直接操作对象：</p><p>允许调用者直接修改原始对象的状态，适用于需要在函数内部修改对象状态并且这些修改需要在函数外部保持的情况。</p></li></ul><p>潜在的问题和注意事项：</p><ul><li><p>潜在的安全性问题：</p><p>调用者可以通过返回的引用直接修改对象，这可能导致意外的副作用或错误状态，尤其是在多线程或复杂逻辑下。</p></li><li><p>生命周期管理：</p><p>返回引用时需要确保引用的对象在函数返回后仍然有效，避免返回了一个<strong>垂悬引用</strong>。</p></li></ul><h3 id="选择">选择</h3><p>通常情况下，可以遵循以下原则来选择返回变量或返回引用：</p><ul><li><p><strong>小型对象或内置类型</strong>：优先考虑返回变量，因为复制开销较小，而且不会涉及引用悬挂的问题。</p></li><li><p><strong>大型对象</strong>：考虑返回引用，以避免复制开销，但需注意引用的有效性和可能的副作用。</p></li><li><p><strong>需要修改原始对象状态</strong>：只能返回引用，因为返回值的复制将不会影响原始对象。</p></li></ul><h1>类</h1><p>定义一个类就是定义一个类型。</p><p>基本形式，<strong>注意分号</strong>：</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Class</span><br>{<br>    <span class="hljs-type">int</span> a;<br>    <span class="hljs-type">char</span> b;<br>    <span class="hljs-type">float</span> c;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">d</span><span class="hljs-params">()</span></span>;<br>};<br></code></pre></td></tr></tbody></table></figure><p>从结构到类：</p><table><thead><tr><th style="text-align:center">概念</th><th style="text-align:center">解释</th></tr></thead><tbody><tr><td style="text-align:center">结构</td><td style="text-align:center">单纯堆积数据空间构造的类型。</td></tr><tr><td style="text-align:center">类</td><td style="text-align:center">不但描述数据空间，还描述其操作的自定义类型。</td></tr><tr><td style="text-align:center">变量</td><td style="text-align:center">由内部数据类型或衍生的结构类型所产生的实体。</td></tr><tr><td style="text-align:center">对象</td><td style="text-align:center">由类产生的实体。<br>本质上，变量也是对象，只不过简单一点罢了。</td></tr></tbody></table><p>类的作用：</p><ul><li>外壳保护作用</li><li>外壳内外分明</li><li>接口标准清晰</li><li>责任方便维护</li></ul><h2 id="成员">成员</h2><p>成员的权限是对外的直接权限，对内没有权限限制。外部包括：非成员函数和其它类的成员函数。</p><p><code>private</code>与<code>protected</code>只有在继承时有区别。</p><p>成员函数之间相当于同作用域互相可见，非成员函数不在相同作用域：</p><ul><li>作用域<ul><li>成员函数属于类, 成员函数定义是类设计的一部分, 其作用域是类作用域。</li><li>普通函数一般是全局函数。</li></ul></li><li>操作主体<ul><li>成员函数的操作主体是对象,使用时通过捆绑对象来行使其职责。</li><li>普通函数被调用时没有操作主体。</li></ul></li></ul><h2 id="占有的内存">占有的内存</h2><p>实例化的类占有的内存与非静态数据成员和虚函数（因为要构造虚函数表）有关。</p><p>静态数据成员和成员函数不占用实例化的类的空间。</p><p>需要注意的是，即便一个类只有静态数据成员和成员函数，它实例化后占有的空间也不会是<code>0</code>，而至少是<code>1</code>个字节，因为需要给它分配地址，则至少要有<code>1</code>字节。</p><h2 id="作用域">作用域</h2><p>变量的作用域是<code>{}</code>内或其后的全部内容，例如：</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> a=<span class="hljs-number">1</span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>{<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span>;<br>    cout&lt;&lt;a&lt;&lt;endl;<br>    <span class="hljs-comment">//输出全局变量a</span><br>    <span class="hljs-type">int</span> a=<span class="hljs-number">2</span>;<br>    cout&lt;&lt;a&lt;&lt;endl;<br>    <span class="hljs-comment">//输出main中定义的a</span><br><br>    cout&lt;&lt;::a&lt;&lt;endl;<br>    <span class="hljs-comment">//全局对象被屏蔽后的强行访问</span><br>    {<br>        <span class="hljs-type">int</span> a=<span class="hljs-number">3</span>;<br>        cout&lt;&lt;a&lt;&lt;endl;<br>        <span class="hljs-comment">//输出新域中的a</span><br>    }<br>    cout&lt;&lt;a&lt;&lt;endl;<br>    <span class="hljs-comment">//输出main中定义的a</span><br>    <span class="hljs-built_in">f</span>();<br>    cout&lt;&lt;a&lt;&lt;endl;<br>    <span class="hljs-comment">//输出main中定义的a</span><br>}<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>{<br>    cout&lt;&lt;a&lt;&lt;endl;<br>    <span class="hljs-comment">//输出全局变量a</span><br>    <span class="hljs-type">int</span> a=<span class="hljs-number">4</span>;<br>    cout&lt;&lt;a&lt;&lt;endl;<br>    <span class="hljs-comment">//输出新域中的a</span><br>}<br></code></pre></td></tr></tbody></table></figure><p>类定义的作用域也等同于变量：</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span><br>{<br>    <span class="hljs-type">int</span> a;<br>};<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>{<br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span><br>    {<br>        <span class="hljs-type">int</span> b;<br>    };<br>    A s;    <span class="hljs-comment">//正常</span><br>    B t;    <span class="hljs-comment">//正常</span><br>    {<br>        <span class="hljs-keyword">class</span> <span class="hljs-title class_">C</span><br>        {<br>            <span class="hljs-type">int</span> c;<br>        };<br>        A s;    <span class="hljs-comment">//正常</span><br>        B t;    <span class="hljs-comment">//正常</span><br>        C u;    <span class="hljs-comment">//正常</span><br>    }<br>    A s;    <span class="hljs-comment">//正常</span><br>    B t;    <span class="hljs-comment">//正常</span><br>    C u;    <span class="hljs-comment">//报错</span><br>}<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>{  <br>    A s;    <span class="hljs-comment">//正常</span><br>    B t;    <span class="hljs-comment">//报错</span><br>    C u;    <span class="hljs-comment">//报错</span><br>}<br></code></pre></td></tr></tbody></table></figure><p>区分类定义作用域和类作用域：</p><ul><li><strong>类定义作用域</strong>:<ul><li>从类定义结束开始，到从外面包围类定义的块结束（若类定义外无包围块，则结束于文件）。</li><li>在类定义作用域中，可以定义这个类的变量。</li><li>使用类的程序员在类定义作用域下编程。</li></ul></li><li><strong>类作用域</strong>:<ul><li>类定义内部及成员函数定义内部。</li><li>实现类的程序员在类作用域下编程。</li></ul></li></ul><p>如果需要在类作用域外进行定义，需要使用运算符<code>::</code>。</p><h2 id="内联函数">内联函数</h2><p>可以在函数声明前加上<code>inline</code>语句，进行显性定义或者声明。复杂语句（循环、多分支）不适合内联。小的成员函数如果在类内定义，一般编译器会默认为内联函数。内联函数可以提高代码效率。</p><p>内联函数的定义和声明不能分开。</p><p>对于<code>inline</code>限定的函数，具体是不是采取内联方式编译是取决于编译器的。对于较大较复杂的函数，编译器不会内联编译，所以只能说<code>inline</code>是给编译器的一个“建议”。</p><h2 id="成员函数">成员函数</h2><p>成员函数不属于对象，通过内部隐含<code>*this</code>的定义<code>A *const this=&amp;对象X</code>来知道调用者是谁。</p><h3 id="成员函数的作用域">成员函数的作用域</h3><p>可以参考：</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//Student.h中：</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span><br>{<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">p</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-type">float</span> score;<br><span class="hljs-keyword">protected</span>:<br>    <span class="hljs-type">char</span> name;<br>    <span class="hljs-type">int</span> age;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">x</span><span class="hljs-params">()</span></span>{<span class="hljs-comment">/*成员函数x()*/</span>}<br>};<br><span class="hljs-comment">//Student.cpp中：</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">x</span><span class="hljs-params">()</span></span>{<span class="hljs-comment">/*新的x()*/</span>}<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Student::p</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>{   <span class="hljs-type">int</span> age = <span class="hljs-number">1</span>;  <br>    age=<span class="hljs-number">5</span>;<br>    <span class="hljs-keyword">this</span>-&gt;age=<span class="hljs-number">5</span>;<br>    Student::age = <span class="hljs-number">5</span>;<br>    <span class="hljs-comment">//必须要有this-&gt;或::用来区分p()中新定义的age和类中的</span><br>    <span class="hljs-built_in">x</span>();    <span class="hljs-comment">//成员函数x()</span><br>    ::<span class="hljs-built_in">x</span>();  <span class="hljs-comment">//新的x()</span><br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="常成员函数">常成员函数</h3><p>常成员函数不允许出现改变对象状态的行为，此时<code>this</code>是一个指向常量的指针。例如：</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Student::p</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">int</span> a)</span> <span class="hljs-type">const</span></span><br><span class="hljs-function"></span>{<br>    cout&lt;&lt;age&lt;&lt;a;<br>}<br></code></pre></td></tr></tbody></table></figure><p>除此之外，还有一些例如常量对象（已经被<code>const</code>处理了）调用成员函数的问题。常量对象不能调用改变对象状态的成员函数。</p><h1>函数重载</h1><p>重载以以下的因素为依据：</p><ul><li>参数类型</li><li>参数个数</li><li>参数顺序</li><li>参数是否是<strong>常量指针或常引用</strong></li><li>常成员函数</li></ul><p>但是要注意的是：</p><ul><li>返回类型不能够作为重载的依据。</li><li>所有的重载函数需要在同一个定义域中。</li><li>如果普通函数不存在，那么都调用常成员函数。<br>关于常成员函数的重载，也可以参考：</li></ul><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span><br>{<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">int</span> a;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">p</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>{<br>        cout&lt;&lt;<span class="hljs-string">"not const"</span>&lt;&lt;endl;<br>    }<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">p</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span><br><span class="hljs-function">    </span>{<br>        cout&lt;&lt;<span class="hljs-string">"const"</span>&lt;&lt;endl;<br>    }<br>};<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>{<br>    A a;<br>    <span class="hljs-type">const</span> A b=a;<br>    a.<span class="hljs-built_in">p</span>();  <span class="hljs-comment">//调用非常成员函数</span><br>    b.<span class="hljs-built_in">p</span>();  <span class="hljs-comment">//调用常成员函数</span><br>}<br></code></pre></td></tr></tbody></table></figure><ul><li>只有常引用或常量指针才能重载，如果是下面这种情况，那么不会构成重载，因为不是空间权限的传递，而是值的传递：</li></ul><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">p</span><span class="hljs-params">(A <span class="hljs-type">const</span> s)</span></span><br><span class="hljs-function"></span>{<br>    cout&lt;&lt;<span class="hljs-number">2</span>;<br>}<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">p</span><span class="hljs-params">(A s)</span></span><br><span class="hljs-function"></span>{<br>    cout&lt;&lt;<span class="hljs-number">1</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><ul><li><p>对于可以类型转换的参数，按照下面的顺序进行重载：</p><ol><li>严格匹配</li><li>其次相容类型匹配</li><li>最后用户定义类型转换</li></ol><p>这样来尽量避免类型相容二义性，用“名称压轧技术”实现。</p></li><li><p>默认从左端开始匹配重载。</p></li></ul><h2 id="默认参数">默认参数</h2><p>重载是从左端开始匹配的，但是默认参数从右端开始设置，例如：</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">x</span><span class="hljs-params">(<span class="hljs-type">int</span> i,<span class="hljs-type">int</span> j=<span class="hljs-number">11</span>,<span class="hljs-type">int</span> k=<span class="hljs-number">12</span>)</span></span><br><span class="hljs-function"></span>{<br>     cout&lt;&lt;i&lt;&lt;j&lt;&lt;k;<br>}<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>{<br>    <span class="hljs-built_in">x</span>();        <span class="hljs-comment">//错误</span><br>    <span class="hljs-built_in">x</span>(<span class="hljs-number">1</span>);       <span class="hljs-comment">//输出结果：    1 11 12</span><br>    <span class="hljs-built_in">x</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);     <span class="hljs-comment">//输出结果：    1 2 12</span><br>    <span class="hljs-built_in">x</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>);   <span class="hljs-comment">//输出结果：    1 2 3</span><br>}<br></code></pre></td></tr></tbody></table></figure><p>默认参数会对依靠参数进行重载的函数产生影响，因为会改变参数的数量，可能造成二义性。</p><h2 id="模版">模版</h2><h3 id="模板与函数">模板与函数</h3><p>使用泛类型。例如定义：</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(T &amp;a,T &amp;b)</span></span>;<br></code></pre></td></tr></tbody></table></figure><p>函数在得到参数以后，按照类型反向推演出实例化的函数，下一次再使用时，就不再进行推演实例化。其参数类型必须严格匹配，否则会导致推演错误：</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">float</span> a;<br><span class="hljs-type">int</span> b;<br><span class="hljs-built_in">swap</span>(a,b);<br></code></pre></td></tr></tbody></table></figure><p>但是如果指定了类型，就会强制类型转换：</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">float</span> a;<br><span class="hljs-type">int</span> b;<br><span class="hljs-built_in">swap</span>&lt;<span class="hljs-type">int</span>&gt;(a,b); <span class="hljs-comment">//显式</span><br></code></pre></td></tr></tbody></table></figure><p>和函数默认参数一样，模板也可以有默认参数，例如：</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> S,<span class="hljs-keyword">typename</span> T=<span class="hljs-type">int</span>&gt;<br></code></pre></td></tr></tbody></table></figure><p>需要注意的是，模板类型声明不能共享，typename不能节省。例如：</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T,<span class="hljs-keyword">typename</span> U&gt;</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(T&amp; a,U&amp; b)</span></span><br><span class="hljs-function"></span>{<br>    <span class="hljs-comment">/**/</span><br>}<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(T&amp; a,T&amp; b)</span>        <span class="hljs-comment">//错误</span></span><br><span class="hljs-function"></span>{<br>    <span class="hljs-comment">/**/</span><br>}<br></code></pre></td></tr></tbody></table></figure><p>如果同时有非模板函数和模板函数，则优先调用非重载函数：</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(T&amp; a,T&amp; b)</span></span><br><span class="hljs-function"></span>{<br>    <span class="hljs-comment">/**/</span><br>}<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-type">int</span>* &amp;a,<span class="hljs-type">int</span>* &amp;b)</span>  <span class="hljs-comment">//优先调用</span></span><br><span class="hljs-function"></span>{<br>    <span class="hljs-comment">/**/</span><br>}<br></code></pre></td></tr></tbody></table></figure><p>也可以有模板重载，但VC++不支持：</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">x</span><span class="hljs-params">(T x)</span></span><br><span class="hljs-function"></span>{<br>    <span class="hljs-comment">/**/</span><br>}<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">x</span><span class="hljs-params">(T *x)</span></span><br><span class="hljs-function"></span>{<br>    <span class="hljs-comment">/**/</span><br>}<br></code></pre></td></tr></tbody></table></figure><p>与函数类似，类也可以进行模板操作。</p><p>模板函数可以使用<code>export</code>关键字进行多文件编程，不过代价太大，主流编译器均不支持。</p><h1>名字空间和嵌套类</h1><p>名字空间是一个作用域，用于解决名字冲突的风险，可以包含变量、对象，函数和类型的定义。可以开放定义或在<code>{}</code>外定义。一个类本身就是一个特殊的名字空间。<code>using namespace</code>语句类似于友元。<code>namespace</code>语句可以为名字空间起一个别名。</p><p>一个类可以嵌套另一个类。嵌套类基本是类内和类外的关系，对象空间不包含。外界访问被嵌套类受权限制约，而被嵌套类可以无条件访问外围类的静态成员、类型名称。嵌套类的意义在于隐藏代码和避免头文件包含。</p><h1>构造函数和析构函数</h1><p>构造函数就是在构造一个类时，将该类的所有成员初始化的函数；析构函数则是在一个类结束生命时（函数结束或者被<code>delete</code>），将所有的类成员消灭，回收它们占有的空间的函数。</p><p>构造函数与类同名，没有返回类型，构造时自动调用，可以重载。可以用于初始化，不能直接调用。</p><p>析构函数也没有返回类型，析构时自动调用，没有参数，不能重载。不提倡主动调用析构函数。</p><h2 id="成员初始化列表">成员初始化列表</h2><p>在构造函数函数体前面可以采用类似于<code>A():a(b),c(d)</code>的操作，称为成员初始化列表。</p><p>成员初始化列表不同于赋值。赋值是在对象存在以后再进行操作，而初始化则是直接在对象构造完成前进行操作。</p><p>对于引用和<code>const</code>成员的初始化，只能在成员初始化列表中实现。</p><h2 id="执行顺序">执行顺序</h2><p>构造函数在构造时执行，全局变量的构造函数在<code>main()</code>函数之前执行，若全局对象分散在不同的源文件中，那么构造顺序时随机的。静态对象的构造函数在首次被调用时执行一次，在程序结束时析构。</p><p>从复用的结构而言，对于有继承和组合的类，先执行包含的类或继承的父类的构造函数，以文本上的定义顺序执行构造，而与构造函数初始化列表中<code>ClassA():ClassB(x),ClassC(y){}</code>的执行顺序无关。</p><p>对象析构时，按构造函数执行的逆序进行。</p><p>对于对象数组，在用<code>delete[]</code>进行析构时，先析构靠后的，之后一个一个向前析构。</p><h2 id="构造函数的调用">构造函数的调用</h2><p>成员类不允许在定义时初始化，因为它仅仅是一个类型，而没有空间分配。例如：</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span><br>{<br>    string name;<br>    StudentID id;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Student</span>(string pName,<span class="hljs-type">int</span> ssID=<span class="hljs-number">0</span>)<br>    {<br>        name=pName;<br>        <span class="hljs-function">StudentID <span class="hljs-title">id</span><span class="hljs-params">(ssID)</span></span>; <span class="hljs-comment">//错误</span><br>    }<br>};<br></code></pre></td></tr></tbody></table></figure><h2 id="关于动态内存">关于动态内存</h2><p><code>malloc()</code>和对应的<code>free()</code>函数不属于语言本身，于malloc.h中声明，因此在用它们执行申请动态内存时不能自动调用构造函数和析构函数。所以引入了<code>new</code>和<code>delete</code>关键字。</p><p>通过<code>new</code>关键字申请的动态空间位于堆区，不会主动释放，因此使用<code>new</code>创建的新对象不会自动在程序结束时调用析构函数释放它自己，需要主动管理。因此，对于含有指针和动态内存的类，也需要在析构函数中执行<code>delete[]</code>语句释放空间。</p><p>需要注意的一点是，用<code>malloc()</code>和<code>free()</code>构造和消灭的对象是不会主动调用构造函数和析构函数的。</p><h2 id="拷贝">拷贝</h2><p>如果让一个<code>A</code>类型的类进行<code>A b=a;</code>这样的操作，则会调用（默认的）拷贝构造函数<code>A(const A&amp;)</code>，为<code>b</code>初始化。</p><p>调用拷贝构造函数产生的效果分为浅拷贝和深拷贝。浅拷贝指的是只拷贝地址，深拷贝则是拷贝了地址上的内容。</p><h2 id="类型转换">类型转换</h2><p>在将一个输入进行类型转换，转换成一个类时，通常会调用对应的构造函数。</p><blockquote><p>如果构造函数用了<code>explicit</code>关键字，那么则不接受隐式的类型转换。例如，如果一个类<code>A</code>只有从<code>int</code>构造的构造函数，那么如果加上了<code>explicit</code>之后，<code>A a=1;</code>这样的操作是不合法的，因为不能够隐式调用它了，去掉了则可以。</p></blockquote><p>类型转换并不是万能的，例如：</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">aa</span> <br>{<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">aa</span>(<span class="hljs-type">int</span> a=<span class="hljs-number">1</span>){id=a;}<br>    <span class="hljs-type">int</span> id;<br>};<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">bb</span> <br>{<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">bb</span>(<span class="hljs-type">int</span> a=<span class="hljs-number">2</span>){id=a;}<br>    <span class="hljs-type">int</span> id;<br>};<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">m</span><span class="hljs-params">(aa a)</span></span><br><span class="hljs-function"></span>{<br>    cout&lt;&lt;a.id&lt;&lt;endl;<br>}<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">m</span><span class="hljs-params">(bb a)</span></span><br><span class="hljs-function"></span>{<br>   cout&lt;&lt;a.id&lt;&lt;endl;<br>}<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>{<br>   <span class="hljs-built_in">m</span>(<span class="hljs-number">9</span>);    <span class="hljs-comment">//存在二义性</span><br>}           <span class="hljs-comment">//转换不能太复杂，不允许多参数，不允许间接转换</span><br></code></pre></td></tr></tbody></table></figure><h2 id="默认的构造函数与析构函数">默认的构造函数与析构函数</h2><p>默认构造函数就是不带任何参数的构造函数，如果没有给一个类定义构造函数，编译器就会自己给它加上一个默认的，把类里面的所有参数都初始化为<code>0</code>。默认析构函数同理。</p><p>如果把一个构造函数定义为<code>Myclass()=default;</code>也可以显式将其声明为默认的构造函数。</p><p>同样，对于拷贝构造函数，如果没有给一个类显式定义，那么编译器也会默认生成一个。</p><h1>友元</h1><p>将一个函数或类设置友元可以让其获得访问此类的<code>protected</code>和<code>private</code>成员。可以解决一些效率问题和格式问题。友元是单向的，且不具备传递性。它一定程度上破坏了类的封装性，扩大了自由函数与类对类的访问权限，谨慎使用。</p><h1>运算符重载</h1><p>利用函数机制重载运算符，不过其成员不能全是基本类型，其内部的同名运算符保持原来的含义，优先级也不会改变。重载的运算符可以是成员函数也可以是非成员函数。</p><p>赋值运算符、自增自减运算符应当返回引用。</p><h2 id="成员或非成员">成员或非成员</h2><table><thead><tr><th style="text-align:center">权限</th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th></tr></thead><tbody><tr><td style="text-align:center">只能是成员的运算符</td><td style="text-align:center"><code>=</code></td><td style="text-align:center"><code>()</code></td><td style="text-align:center"><code>[]</code></td><td style="text-align:center"><code>-&gt;</code></td></tr><tr><td style="text-align:center"><s>只能是友元的运算符</s></td><td style="text-align:center"><s><code>&lt;&lt;</code></s></td><td style="text-align:center"><s><code>&gt;&gt;</code></s></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">既可以友元也可以成员的</td><td style="text-align:center"><code>+</code></td><td style="text-align:center"><code>-</code></td><td style="text-align:center">etc.</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">不能被重载的运算符</td><td style="text-align:center"><code>::</code></td><td style="text-align:center"><code>.</code></td><td style="text-align:center"></td><td style="text-align:center"></td></tr></tbody></table><p>但是，如果一个运算符是成员，那么它的左边必须是一个类类型。所以对于混合使用的运算符，例如<code>+</code>：</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">string s=<span class="hljs-string">"hello"</span>;<br>string t=<span class="hljs-string">"hello"</span>+s; <span class="hljs-comment">//错误："hello"不是一个类</span><br></code></pre></td></tr></tbody></table></figure><h2 id="一般的算术运算符">一般的算术运算符</h2><p>如果是在类外定义运算符重载，则和一般写函数差不多，参数是两个。</p><p>如果是在类内定义算术运算符，参数只有一个，而且需要注意返回的应当是<code>*this</code>的引用：</p><ul><li><p>支持链式操作符：</p><ul><li>返回 <code>*this</code> 允许类实例在操作符链中进行修改和连续调用。例如，如果一个类重载了 <code>+</code> 运算符返回 <code>*this</code>，那么可以连续对该对象进行操作，而不需要每次都创建新的对象。</li></ul></li><li><p>原地修改对象：</p><ul><li>返回 <code>*this</code> 允许在不创建新对象的情况下，直接在当前对象上进行修改。这在某些情况下可以提高性能和效率，特别是对于一些复杂的数据结构或者需要频繁修改的对象。</li></ul></li><li><p>一致性和约定：</p><ul><li>返回 <code>*this</code> 是一种约定和惯例，它告诉用户重载的 <code>+</code> 运算符确实是在修改当前对象而非创建新对象。这样的约定对于代码的可读性和理解是有益的。</li></ul></li></ul><h2 id="I-O运算符">I/O运算符</h2><p>重载输入、输出运算符的第一个形参是对非常量的<code>ostream</code>或<code>istream</code>对象的引用，因为我们不能直接复制一个<code>ostream</code>对象，而之所以是非常量对象，是因为向其中写入内容会改变其状态；第二个形参是对于类的引用，引用是为了避免复制实参，而它可以是常量是因为我们的操作不会改变它的状态。</p><p>重载输入、输出运算符的函数既可以是成员函数也可以是友元函数。</p><p>友元函数形同：</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">friend</span> std::ostream &amp;<span class="hljs-keyword">operator</span>&lt;&lt;(ostream&amp; os,<span class="hljs-type">const</span> data&amp; item)<br>{<br>    os&lt;&lt;item.<span class="hljs-built_in">name</span>()&lt;&lt;flush;<br>    <span class="hljs-keyword">return</span> os;  <span class="hljs-comment">//返回os形参</span><br>}<br></code></pre></td></tr></tbody></table></figure><p>成员函数形同：</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::ostream &amp;<span class="hljs-keyword">operator</span>&lt;&lt;(ostream&amp; os) <span class="hljs-type">const</span><br>{<br>    os&lt;&lt;<span class="hljs-built_in">name</span>()&lt;&lt;flush;<br>    <span class="hljs-keyword">return</span> os;  <span class="hljs-comment">//返回os形参</span><br>}<br></code></pre></td></tr></tbody></table></figure><p>它们必须是一个非成员函数。如果它们是成员函数，那么它们的左侧是我们这个类的一个对象，然而左侧应该是<code>istream</code>或<code>ostream</code>对象。</p><h2 id="赋值运算符">赋值运算符</h2><p>赋值运算符的返回值一般是<strong>引用</strong>，否则不能连续赋值，因为每一次赋值都会产生一个临时变量，会影响到连续赋值的结果。</p><p>如果没有给一个类定义赋值运算符的重载，编译器就会生成一个默认的赋值运算符重载，和默认拷贝构造函数差不多。</p><h2 id="自增、自减运算符">自增、自减运算符</h2><p>和赋值运算符一样，<strong>前置自增自减运算符的返回值也是引用</strong>。重载前置自增自减运算符<code>++x</code>的声明应该写成<code>A&amp; operator++();</code>。</p><p>后置的应该声明成<code>A&amp; operator++(int);</code>，它接受一个不被使用的<code>int</code>形参，默认为<code>0</code>。后置版本可以不是引用。一般是生成一个<code>A</code>类型的<code>ret</code>记录<code>*this</code>，然后操作<code>*this</code>，返回<code>ret</code>。</p><p>使用<code>p.operator++()</code>或<code>p.operator++(0)</code>可以显式调用该运算符。</p><h1>静态成员</h1><p>静态成员的空间不包含在对象中，在<code>main()</code>之前构造，生命周期等同于全局对象。多个个体对象共享一个共有数据。</p><p>静态成员函数不再与对象<code>this</code>默认联系，但可以访问非<code>public</code>成员。</p><h2 id="关于static关键字">关于<code>static</code>关键字</h2><p><code>static</code>有三种用法</p><ul><li><p>函数外的静态变量（与 extern 相对）</p><p>内部链接性变量，仅能在一个编译单元中使用，不与其他编译单元共享。</p></li><li><p>函数中的静态变量（与栈空间中的局部变量相对）</p><p>位于变量数据区，因此函数返回时不析构的变量。</p></li><li><p>类中的静态成员变量（与对象成员相对）</p><p>所有实例共享的变量。</p></li></ul><h1>继承</h1><p>继承的本质实际上就是由上到下完全的复制，但是继承方式在对内可见性上做了手脚；对外可见性则没有改变。继承后的对外权限等于或低于继承类型 。继承类型省略默认为<code>private</code>继承。<code>private</code>成员继承后只对原来兄弟方法可见。子类不能访问父类中的<code>private</code>成员，父类不能也做不到访问子类的所有内容。</p><p><img src="https://images.kisechan.space/202406021046984.png" alt=""></p><p>派生的内容则等同于原始类的定义。派生类对象包含父类对象全部内容，<strong>凡是父类对象可以出现的地方都可以用子类对象代替</strong>，反之不可。例如：</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span>: <span class="hljs-keyword">public</span> A<br>{<br>    <span class="hljs-comment">/**/</span><br>};<br>A* p=<span class="hljs-keyword">new</span> B;   <span class="hljs-comment">//这是允许的</span><br></code></pre></td></tr></tbody></table></figure><p><code>public</code>继承使用的最多，是最重要的，产生的后代称为“子类”，<code>protected</code>继承和<code>private</code>继承得到的类<strong>都不是子类</strong>。<strong>“凡是父类对象可以出现的地方可以用子类对象代替”不再适用</strong>。</p><p><img src="https://images.kisechan.space/202406021048565.png" alt=""></p><p>如果子类与父类中的成员（函数或对象）重名，则子类覆盖父类的成员。需要使用<code>::</code>强行访问。</p><p><strong>构造函数、拷贝构造函数、析构函数和赋值函数不能被继承。</strong></p><h2 id="组合与继承">组合与继承</h2><p>组合指的是一个类中有另一个类为其成员，继承则是完全的另一种复用方式，因此，不能用组合类代替被组合类实现类似于子类代替父类的用法。因为没有继承关系，所以组合中，<code>protected</code>也等效于<code>private</code>。</p><p>组合和继承都是实现复用的手段，但是尽量使用组合，因为是黑箱复用依赖较少。被组合的成员内部的成员和本级其他成员，相互访问权限相当于类外关系。被组合成员内部的成员的成员的成员，etc，外面对其访问权限属于逐级类外叠加的关系。</p><h2 id="继承与构造函数">继承与构造函数</h2><p>子类的构造函数可以在<code>{}</code>中初始化父类的成员，但不提倡。不过，如果<code>id</code>是父类<code>A</code>中的成员<code>B():id(9){}</code>这样的操作是不允许的，只能用<code>B():A(9){}</code>这样的操作调用父类的构造函数。</p><h2 id="隐藏">隐藏</h2><p>如果子类中有一个与父类完全相同的成员函数定义，那么会覆盖掉父类中原本的函数，可以使用<code>::</code>强行访问。但是要注意与重载的区别：</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Automobile</span><br>{<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Run</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>{<br>        cout&lt;&lt;<span class="hljs-string">"机械变速"</span>&lt;&lt;endl;<br>    }<br>};<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Car</span>:<span class="hljs-keyword">public</span> Automobile<br>{<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Run</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span></span><br><span class="hljs-function">    </span>{  <br>        cout&lt;&lt;<span class="hljs-string">"自动变速"</span>&lt;&lt;endl;<br>    }<br>};<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>{ <br>    Automobile ObjA;<br>    Car ObjB;<br>    ObjA.<span class="hljs-built_in">Run</span>();<br>    ObjB.<span class="hljs-built_in">Run</span>();   <span class="hljs-comment">//编译错误，不是重载</span><br>    ObjB.Automobile::<span class="hljs-built_in">Run</span>();<br>}<br></code></pre></td></tr></tbody></table></figure><p>以及：</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Automobile</span><br>{<br><span class="hljs-keyword">public</span>:<br>   <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Run</span><span class="hljs-params">()</span></span><br><span class="hljs-function">   </span>{<br>      cout&lt;&lt;<span class="hljs-string">"“机械变速”"</span>&lt;&lt;endl;<br>   }<br>   <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Run</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span></span><br><span class="hljs-function">   </span>{<br>      cout&lt;&lt;<span class="hljs-string">"“机械变速1.0”"</span>&lt;&lt;endl;<br>   }<br>};<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Car</span>:<span class="hljs-keyword">public</span> Automobile<br>{<br><span class="hljs-keyword">public</span>:<br>   <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Run</span><span class="hljs-params">()</span></span><br><span class="hljs-function">   </span>{  <br>      cout&lt;&lt;<span class="hljs-string">"“自动变速“"</span>&lt;&lt;endl;<br>   }<br>};<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>{<br>   Automobile ObjA;<br>   Car ObjB;<br>   ObjA.<span class="hljs-built_in">Run</span>();<br>   ObjA.<span class="hljs-built_in">Run</span>(<span class="hljs-number">1</span>);<br>   ObjB.<span class="hljs-built_in">Run</span>();<br>   ObjB.<span class="hljs-built_in">Run</span>(<span class="hljs-number">2</span>);               <span class="hljs-comment">//出错</span><br>   ObjB.Automobile::<span class="hljs-built_in">Run</span>(<span class="hljs-number">2</span>);   <span class="hljs-comment">//正常</span><br>}<br></code></pre></td></tr></tbody></table></figure><p>有的时候需要注意隐性的类型转换：</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Automobile</span><br>{<br><span class="hljs-keyword">public</span>:<br>   <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Run</span><span class="hljs-params">()</span></span><br><span class="hljs-function">   </span>{<br>      cout&lt;&lt;<span class="hljs-string">"“机械变速”"</span>&lt;&lt;endl;<br>   }<br>};<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Car</span>:<span class="hljs-keyword">public</span> Automobile<br>{<br><span class="hljs-keyword">public</span>:<br>   <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Run</span><span class="hljs-params">()</span></span><br><span class="hljs-function">   </span>{  <br>      cout&lt;&lt;<span class="hljs-string">"“自动变速“"</span>&lt;&lt;endl;<br>   }<br>};<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Fn</span><span class="hljs-params">(Automobile *p)</span>  <span class="hljs-comment">//进行了类型转换</span></span><br><span class="hljs-function"></span>{<br>   p-&gt;<span class="hljs-built_in">Run</span>();<br>   <span class="hljs-keyword">delete</span> p;<br>}<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>{ <br>   <span class="hljs-built_in">Fn</span>(<span class="hljs-keyword">new</span> Automobile);  <span class="hljs-comment">//机械变速</span><br>   <span class="hljs-built_in">Fn</span>(<span class="hljs-keyword">new</span> Car);         <span class="hljs-comment">//机械变速</span><br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="虚函数与多态">虚函数与多态</h2><p>只不过我们希望，<code>Fn(new Car)</code>这个操作能输出<code>自动变速</code>，这就需要多态，所以需要引入虚函数，用<code>virtual</code>关键字定义。派生类中的函数只要原型相同，则自动具有虚函数性质，其<code>virtual</code>关键字可省略。</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Automobile</span><br>{<br><span class="hljs-keyword">public</span>:<br>   <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">Run</span><span class="hljs-params">()</span></span><br><span class="hljs-function">   </span>{<br>      cout&lt;&lt;<span class="hljs-string">"“机械变速”"</span>&lt;&lt;endl;<br>   }<br>};<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Car</span>:<span class="hljs-keyword">public</span> Automobile<br>{<br><span class="hljs-keyword">public</span>:<br>   <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">Run</span><span class="hljs-params">()</span></span><br><span class="hljs-function">   </span>{  <br>      cout&lt;&lt;<span class="hljs-string">"“自动变速“"</span>&lt;&lt;endl;<br>   }<br>};<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Fn</span><span class="hljs-params">(Automobile *p)</span>  <span class="hljs-comment">//进行了类型转换</span></span><br><span class="hljs-function"></span>{<br>   p-&gt;<span class="hljs-built_in">Run</span>();<br>   <span class="hljs-keyword">delete</span> p;<br>}<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>{ <br>   <span class="hljs-built_in">Fn</span>(<span class="hljs-keyword">new</span> Automobile);  <span class="hljs-comment">//机械变速</span><br>   <span class="hljs-built_in">Fn</span>(<span class="hljs-keyword">new</span> Car);         <span class="hljs-comment">//自动变速</span><br>}<br></code></pre></td></tr></tbody></table></figure><p>多态的意义在于：</p><ul><li><p>是追求<strong>用指针管理继承体系对象</strong>的结果。</p></li><li><p>多态性使得应用程序使用类体系中的不同层次对象共存的复杂局面达到了一种可管理的境界；程序员从使用孤立的类，到使用分层的类，让各种对象“同场竞技”，并且能充分展现其个性。</p></li><li><p>不支持多态的语言不能称为面向对象的语言。</p></li></ul><p>编译器通过函数名、参数个数、参数类型、参数顺序相同判断是否覆盖基类虚函数。但是如果两个虚函数的返回值分别是引用和相同类型的变量，那么并不会判定为两个虚函数。</p><p>虚函数的工作原理在于<strong>动态联编</strong>：</p><table><thead><tr><th style="text-align:center">联编</th><th style="text-align:center">编译</th><th style="text-align:center">调用</th></tr></thead><tbody><tr><td style="text-align:center">静态联编<br>（早期联编）</td><td style="text-align:center">编译时完成</td><td style="text-align:center">对象调用函数、非多态调用</td></tr><tr><td style="text-align:center">动态联编<br>（滞后联编）</td><td style="text-align:center">运行时完成</td><td style="text-align:center">多态调用</td></tr></tbody></table><p>静态联编可在编译时确定，是因为可以确定被调用函数所在的类。<strong>动态联编的祖先指针指向了一个后代对象</strong>，但是不容易知道其类型，于是凡有虚函数的类均要维护一个虚表，实例化每个对象时为其增加一个指针，并指向这个虚表（与类型对应），虚函数调用时不需确定对象类型，通过该虚指针即可找到所要链接函数，这样才能确定链接函数是哪个类的。</p><p>虚函数调用的<code>this</code>指针长度也于非虚函数不同。非虚函数<code>this</code>指针自调用者开始，加上调用者类型长度为止（实现者=调用者），虚函数<code>this</code>指针自调用者开始，加上实现者类型长度止（实现者=对象的类型）。虚函数不予编译检查（虚指针的值无法确认而无法检查），因此无错，执行时则实现者类型已知（因为有虚表），才会出错。</p><p>多态的应用场景主要有<strong>指针、引用和成员函数</strong>，例如：</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">X</span><br>{<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">f1</span><span class="hljs-params">()</span></span>{cout&lt;&lt;<span class="hljs-string">"Running X::f1()"</span>&lt;&lt;endl;  <span class="hljs-built_in">f4</span>();}<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">f2</span><span class="hljs-params">()</span></span>{cout&lt;&lt;<span class="hljs-string">"Running X::f2()"</span>&lt;&lt;endl;  <span class="hljs-built_in">f3</span>();}<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">f3</span><span class="hljs-params">()</span></span>{cout&lt;&lt;<span class="hljs-string">"Running X::f3()"</span>&lt;&lt;endl;  <span class="hljs-built_in">f4</span>();}<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">f4</span><span class="hljs-params">()</span></span>{cout&lt;&lt;<span class="hljs-string">"Running X::f4()"</span>&lt;&lt;endl;}<br>};<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Y</span>:<span class="hljs-keyword">public</span> X<br>{<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f1</span><span class="hljs-params">()</span></span>{cout&lt;&lt;<span class="hljs-string">"Running Y::f1()"</span>&lt;&lt;endl;   <span class="hljs-built_in">f2</span>();}<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f3</span><span class="hljs-params">()</span></span>{cout&lt;&lt;<span class="hljs-string">"Running Y::f3()"</span>&lt;&lt;endl;   <span class="hljs-built_in">f4</span>();}<br>};<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>{<br>   X &amp;p =*(<span class="hljs-keyword">new</span> Y);<br>   p.<span class="hljs-built_in">f1</span>();<br>}<br></code></pre></td></tr></tbody></table></figure><p>虚函数使用注意事项：</p><ul><li><p>构造函数和析构函数调用虚函数时，不支持多态。</p></li><li><p><strong>析构函数是推荐作为虚函数的</strong>，例如<code>A *p=new B;delete p;</code>，这样<code>delete</code>掉的地址理论上是只有<code>A</code>的那一部分，调用父类<code>A</code>的构造函数，不会调用子类<code>B</code>的构造函数，容易造成内存泄漏。</p></li><li><p><strong>构造函数不能是虚函数</strong>。</p></li><li><p>非成员函数、静态成员函数和内联函数不能是虚函数。</p></li></ul><h2 id="函数签名">函数签名</h2><p>函数签名指的是函数的声明部分，包括函数的名称、参数类型及其顺序（参数列表），但不包括函数的实现体或函数体：</p><ul><li><p>函数名称</p></li><li><p>参数的数量</p></li><li><p>每个参数的类型（按顺序，<code>const</code>属性也包括在内）</p></li><li><p><strong>返回类型不影响函数签名</strong></p></li></ul><p>函数签名的目的是唯一标识一个函数的调用形式，它在编译和链接过程中用于解析函数调用。编程语言通常要求函数签名在同一作用域中唯一，即不同函数在同一作用域下不能有相同的函数签名，以确保函数调用的准确性和一致性。</p><p>虚函数的覆盖就是根据函数签名是否一致来判断是否要覆盖掉父类同名的这个虚函数。例如：</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Base</span> <br>{<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">()</span></span>;<br>};<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Derived</span>:<span class="hljs-keyword">public</span> Base <br>{<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">int</span> <span class="hljs-title">func</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span></span>;<br>};<br></code></pre></td></tr></tbody></table></figure><p>在这个例子中，<code>Derived</code>类中的<code>func()</code>仍然会覆盖掉基类的同名函数，尽管它们的返回类型不一样。</p><h2 id="抽象类">抽象类</h2><p>如果基类中的一个虚函数不能给出有意义的实现，那么一般就会将它声明为纯虚函数，例如<code>virtual void p()=0;</code>。</p><p>含有纯虚函数的类被称作抽象类。这些类没有独立于具体类存在的意义,纯粹为了抽象而存在，它们不能被实例化为对象，一般用来作为基类继承，但是<strong>可以有指针或引用</strong>。</p><p>如果一个类继承了一个抽象类，但是没有将<strong>所有</strong>的纯虚函数<code>virtual void p()</code>变为一般的虚函数，那这个子类还是一个抽象类。纯虚函数可以有定义代码，供强行访问。析构函数可以是纯虚函数，但是必须要有定义代码。</p><p>抽象类可以使得数据结构更为清晰。</p><h2 id="多重继承">多重继承</h2><p>如果一个类，同时继承自两个父类，两个父类中还分别有一个名字一样的成员，那么在调用它们时必须要用<code>::</code>区分。</p><p>但是如果是产生了“孙继承”，例如两个类<code>Master</code>和<code>PhD</code>分别继承自同一个基类<code>Student</code>，然后一个新类<code>M_P</code>继承自<code>Master</code>和<code>PhD</code>，就会导致混乱，<code>Master</code>和<code>PhD</code>的域下面各有一个<code>Student</code>域，操作起来会很麻烦，也不能使用<code>Student* p=&amp;M_P</code>这样的写法，因为<code>Student</code>是不明确的。</p><p>这样的话，就可以采用<strong>虚继承</strong>，在继承时加上<code>virtual</code>关键字。<code>M_P</code>则是分别继承自<code>Master</code>、<code>PhD</code>（这两个理论上也继承自<code>Student</code>，但是不会实例化）和<code>Student</code>三个基类。但是，这个时候<code>Student* p=&amp;M_P</code>是成立的，因为，<code>Student*</code>指针是明确的，就是<code>M_P</code>继承的那个<code>Student</code>基类。<code>Master</code>、<code>PhD</code>的<code>Student</code>基类会产生一个<strong>虚指针</strong>，供这两个类在访问它们的父类时使用。虚拟继承的基类直接派生类构造函数放弃向上传导。这种情况下，<code>Student</code>只会实例化一次。</p><p><img src="https://cdn.jsdelivr.net/gh/Kisechan/Picture-Bed-Kisechan@master/img/202406021337183.svg" alt=""></p><p>需要注意的是，虚拟继承和虚函数（多态、抽象类）没有关系。实际问题也应尽量避免多重继承。</p><h2 id="终结类">终结类</h2><p>如果给一个类加上<code>final</code>关键字，会让它不能被继承，称为终结类。</p><p>把基类的构造函数设为<code>private</code>也可以让它不能被继承。</p><h1>I/O类</h1><h2 id="I-O流">I/O流</h2><p><code>ostream</code>和<code>istream</code>是类的名称，iostream是该类的头文件</p><blockquote><p><code>ostream &amp;operator&lt;&lt;(ostream out,char *p);</code></p><p><code>ostream &amp;operator&lt;&lt;(ostream out,int p);</code></p><p><code>ostream &amp;operator&lt;&lt;(ostream out,char p);</code></p><p><code>ostream &amp;operator&lt;&lt;(ostream out,float p); </code></p></blockquote><p><code>cout</code>、<code>cin</code>为<code>ostream</code>、<code>istream</code>类的全局对象，不可复制。</p><table><thead><tr><th style="text-align:center">定义</th><th style="text-align:center">流</th><th style="text-align:center">默认输入/输出</th></tr></thead><tbody><tr><td style="text-align:center"><code>ostream cout(stdout);</code></td><td style="text-align:center">标准输出</td><td style="text-align:center">默认为屏幕</td></tr><tr><td style="text-align:center"><code>ostream cin(stdin);</code></td><td style="text-align:center">标准输入</td><td style="text-align:center">默认为键盘</td></tr><tr><td style="text-align:center"><code>ostream cerr(stderr);</code></td><td style="text-align:center">标准出错</td><td style="text-align:center">默认为屏幕</td></tr><tr><td style="text-align:center"><code>ostream clog(stdprn);</code></td><td style="text-align:center">标准打印</td><td style="text-align:center">默认为打印机</td></tr></tbody></table><h2 id="I-O操纵器">I/O操纵器</h2><p>头文件iomanip中包含I/O操纵器（manipulator），一些常用的操纵器有：</p><table><thead><tr><th style="text-align:center">控制器</th><th style="text-align:center">用途</th></tr></thead><tbody><tr><td style="text-align:center"><code>std::setw()</code></td><td style="text-align:center">设置字段宽度</td></tr><tr><td style="text-align:center"><code>std::setprecision()</code></td><td style="text-align:center">设置浮点数的精度</td></tr><tr><td style="text-align:center"><code>std::setfill()</code></td><td style="text-align:center">设置填充字符</td></tr><tr><td style="text-align:center"><code>std::left</code>、<code>std::right</code>、<code>std::internal</code></td><td style="text-align:center">设置对齐方式</td></tr><tr><td style="text-align:center"><code>std::fixed</code>、<code>std::scientific</code></td><td style="text-align:center">设置浮点数的输出格式</td></tr></tbody></table><h2 id="文件流类">文件流类</h2><p><code>ofstream</code>是文件输出类，<code>ifstream</code>是文件输入类，它们在fstream.h里面定义。<code>fstream</code>是多继承子类。文件流类没有<code>cou</code>t和<code>cin</code>这样的标准全局对象：</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">ofstream::<span class="hljs-built_in">ofstream</span>(<span class="hljs-type">char</span> *pFilename,<span class="hljs-type">int</span> mode=ios::out,<span class="hljs-type">int</span> port=filebuf::openprot);<br></code></pre></td></tr></tbody></table></figure><table><thead><tr><th style="text-align:center">打开方式</th><th style="text-align:center">解释</th></tr></thead><tbody><tr><td style="text-align:center"><code>ios::ate</code></td><td style="text-align:center">如果文件存在末尾追加</td></tr><tr><td style="text-align:center"><code>ios::trunc</code></td><td style="text-align:center">如果文件存在清除内容（默认）</td></tr><tr><td style="text-align:center"><code>ios::in</code></td><td style="text-align:center">输入能力（ifstream默认）</td></tr><tr><td style="text-align:center"><code>ios::out</code></td><td style="text-align:center">输出能力（ofstream默认）</td></tr><tr><td style="text-align:center"><code>ios::nocreate</code></td><td style="text-align:center">文件不存在返回错误</td></tr><tr><td style="text-align:center"><code>ios::noreplace</code></td><td style="text-align:center">文件存在返回错误</td></tr><tr><td style="text-align:center"><code>ios::binary</code></td><td style="text-align:center">二进制方式</td></tr></tbody></table><table><thead><tr><th style="text-align:center">保护方式</th><th style="text-align:center">解释</th></tr></thead><tbody><tr><td style="text-align:center"><code>filebuf::openprot</code></td><td style="text-align:center">允许共享</td></tr><tr><td style="text-align:center"><code>filebuf::sh_none</code></td><td style="text-align:center">独占</td></tr><tr><td style="text-align:center"><code>filebuf::sh_read</code></td><td style="text-align:center">读共享</td></tr><tr><td style="text-align:center"><code>filebuf::sh_write</code></td><td style="text-align:center">写共享</td></tr></tbody></table><h2 id="串流类">串流类</h2><p><code>ostrstream</code>是串输出类，<code>istrstream</code>是串输入类，在strstream.h里面定义。<code>strstream</code>是多继承子类。</p><p>也没有<code>cout</code>和<code>cin</code>这样的标准全局对象：</p><blockquote><p><code>ostrstream::ostream(char * ,int size);</code></p><p><code>istrstream::istream(char * ,int size);</code></p></blockquote><h1>异常处理</h1><p>用<code>throw</code>语句抛出异常，<code>try</code>标记一块代码，<code>catch</code>处理异常，可有一个以上，只捕获<code>try</code>标记的代码块中抛出的异常。<code>try</code>只能有一个形参。</p><p>如果发生了异常，则只中断<code>try</code>中的代码块。<code>try</code>和<code>catch</code>必须相邻，顺序不能颠倒；<code>throw</code>和<code>catch</code>可以跨函数放置。对于一般的参数类型，<code>catch</code>的参数是严格匹配的，如果没有<code>catch</code>捕获异常，则会调用<code>abort()</code>函数。</p><p><code>catch(基类类型)</code>能够捕获<code>throw 派生类对象</code>，<code>catch(基类指针)</code>能够捕获<code>throw 派生类指针</code>，反之不可以。所以<code>catch(基类)</code>总放在<code>catch(派生类)</code>后面。</p>]]></content>
    
    
    <categories>
      
      <category>课程笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>OOP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>多态实验</title>
    <link href="/2024/polymorphic/"/>
    <url>/2024/polymorphic/</url>
    
    <content type="html"><![CDATA[<h1>组合模式的应用</h1><p>每个公司都有总部、多个分公司、多个办事处等，为上下级同构实体关系。每个实体均有人力部、财务部、销售部等职能部门，不再有下级部门。分公司下面继续有子公司……总部需要快速了解总公司的：组织结构+实体职责展示。（两个多态函数，输出文字即可）。</p><h1>关于组合模式和程序的分析</h1><p>“组合模式”指的是将对象组合成树形结构以表示“<strong>部分—整体</strong>”的一种层次结构。这就需要实验人将“总公司”、“子公司”、“办事处”及其部门实体等对象抽象成为一个组合模式结构，例如：</p><p><img src="https://cdn.jsdelivr.net/gh/Kisechan/Picture-Bed-Kisechan@master/img/202405252229869.svg" alt="参考结构示意图"></p><p>在我们的模拟程序中就可以用类模拟一个子公司或总公司，其中包含子公司和办事处类的指针。而子公司类和办事处类都拥有人力部、财务部、销售部等基本部门，这就可以通过<strong>继承</strong>一个基本实体类来实现。</p><p>这样我们就可以构造出一个树结构了，类定义的代码<em>class.h</em>如下：</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> once</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Base</span><br>{<br><span class="hljs-keyword">public</span>:<br>std::string Func1;<br>std::string Func2;<br>std::string Func3;<br><span class="hljs-built_in">Base</span>();<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br>};<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Agency</span> :<span class="hljs-keyword">public</span> Base<br>{<br>std::string Func;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-type">int</span> tag;<br><span class="hljs-built_in">Agency</span>();<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span></span>;<br>};<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Company</span> :<span class="hljs-keyword">public</span> Base<br>{<br><span class="hljs-keyword">public</span>:<br><span class="hljs-type">int</span> tag;<br>std::vector &lt;Company*&gt; Branches;<br>std::vector &lt;Agency*&gt; Agencies;<br><span class="hljs-built_in">Company</span>() = <span class="hljs-keyword">default</span>;<br><span class="hljs-built_in">Company</span>(<span class="hljs-type">int</span> branchnum, <span class="hljs-type">int</span> agencynum, <span class="hljs-type">int</span> num);<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span></span>;<br>};<br></code></pre></td></tr></tbody></table></figure><p>其中，类Base有一个纯虚成员函数show()，是一个抽象类，它代表着基本职能实体的信息；类Agency封装着办事处的信息，继承自类Base；类Company代表着子公司或总公司，也是继承自类Base，存储着Company指针和Agency指针，代表其衍生出来的子公司和办事处。</p><p>各个类的构造函数可以参考<em>class.cpp</em>：</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs cpp">Base::<span class="hljs-built_in">Base</span>()<br>{<br>Func1 = <span class="hljs-string">"人力部"</span>;<br>Func2 = <span class="hljs-string">"财务部"</span>;<br>Func3 = <span class="hljs-string">"销售部"</span>;<br>}<br>Agency::<span class="hljs-built_in">Agency</span>()<br>{<br>Func = <span class="hljs-string">"办事处"</span>;<br>tag = <span class="hljs-number">0</span>;<br>}<br>Company::<span class="hljs-built_in">Company</span>() = <span class="hljs-keyword">default</span>;<br>Company::<span class="hljs-built_in">Company</span>(<span class="hljs-type">int</span> branchnum, <span class="hljs-type">int</span> agencynum, <span class="hljs-type">int</span> num)<br>{<br>tag = num;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; branchnum; i++)<br>{<br>Branches.<span class="hljs-built_in">push_back</span>(<span class="hljs-keyword">new</span> Company);<br>Branches[i]-&gt;tag = i + <span class="hljs-number">1</span>;<br>}<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; agencynum; i++)<br>{<br>Agencies.<span class="hljs-built_in">push_back</span>(<span class="hljs-keyword">new</span> Agency);<br>Agencies[i]-&gt;tag = i + <span class="hljs-number">1</span>;<br>}<br>}<br></code></pre></td></tr></tbody></table></figure><p>show()函数是类中的一个<strong>虚函数</strong>，在Company类和Agency类中都对它进行了定义的覆盖，以达到多态的目的，这样，调用不同的类中的show()函数就可以做到不同的效果。例如，调用Agency中的show()，会输出它自己的基本信息和它父类Base的一些信息；调用Company中的show()，会输出它自己以及所有子公司和办事处的信息。具体代码如下：</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Agency::show</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>{<br>std::cout &lt;&lt; <span class="hljs-string">"办事处"</span> &lt;&lt; tag &lt;&lt; <span class="hljs-string">"职能有："</span> &lt;&lt; std::endl;<br>std::cout &lt;&lt; Func &lt;&lt; <span class="hljs-string">' '</span> &lt;&lt; Func1 &lt;&lt; <span class="hljs-string">' '</span> &lt;&lt; Func2 &lt;&lt; <span class="hljs-string">' '</span> &lt;&lt; Func3 &lt;&lt; std::endl;<br>}<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Company::show</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>{<br><span class="hljs-keyword">if</span> (tag != <span class="hljs-number">0</span>)<br>{<br>std::cout &lt;&lt; <span class="hljs-string">"子公司"</span> &lt;&lt; tag &lt;&lt; <span class="hljs-string">"下属有："</span> &lt;&lt; std::endl;<br>}<br><span class="hljs-keyword">else</span><br>{<br>std::cout &lt;&lt; <span class="hljs-string">"总公司下属有："</span> &lt;&lt; std::endl;<br>}<br>std::cout &lt;&lt; Func1 &lt;&lt; <span class="hljs-string">' '</span> &lt;&lt; Func2 &lt;&lt; <span class="hljs-string">' '</span> &lt;&lt; Func3 &lt;&lt; std::endl;<br><span class="hljs-keyword">if</span> (!Agencies.<span class="hljs-built_in">empty</span>())<br>{<br>std::cout &lt;&lt; Agencies.<span class="hljs-built_in">size</span>() &lt;&lt; <span class="hljs-string">"个办事处"</span> &lt;&lt; std::endl;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; Agencies.<span class="hljs-built_in">size</span>(); i++)<br>{<br>Agencies[i]-&gt;<span class="hljs-built_in">show</span>();<br>}<br>}<br><span class="hljs-keyword">if</span> (!Branches.<span class="hljs-built_in">empty</span>())<br>{<br>std::cout &lt;&lt; Branches.<span class="hljs-built_in">size</span>() &lt;&lt; <span class="hljs-string">"个子公司"</span> &lt;&lt; std::endl;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; Branches.<span class="hljs-built_in">size</span>(); i++)<br>{<br>Branches[i]-&gt;<span class="hljs-built_in">show</span>();<br>}<br>}<br>}<br></code></pre></td></tr></tbody></table></figure><p>测试与实现可参考<em>main.cpp</em>：</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">"class.h"</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>{<br><span class="hljs-function">Company <span class="hljs-title">Com</span><span class="hljs-params">(<span class="hljs-number">10</span>, <span class="hljs-number">5</span>, <span class="hljs-number">0</span>)</span></span>;<br>Com.Branches[<span class="hljs-number">2</span>]-&gt;<br>Branches.<span class="hljs-built_in">push_back</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Company</span>(<span class="hljs-number">3</span>, <span class="hljs-number">0</span>, Com.Branches.<span class="hljs-built_in">size</span>() + <span class="hljs-number">1</span>));<br>Com.<span class="hljs-built_in">show</span>();<br>}<br></code></pre></td></tr></tbody></table></figure><p><img src="https://images.kisechan.space/202405252245405.png" alt="调用结果"></p><p>可以看到，我们的操作都是实现了的。</p><h1>注意事项</h1><ul><li>构造函数需要放在public里面</li><li>加一个static变量观感会更好，但是要注意类内声明类外定义</li></ul>]]></content>
    
    
    <categories>
      
      <category>CS 杂谈</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>OOP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows上简单的Socket通信：echo程序</title>
    <link href="/2024/socket/"/>
    <url>/2024/socket/</url>
    
    <content type="html"><![CDATA[<h3 id="关于Socket">关于Socket</h3><p>客户端和服务器通常运行在不同的主机上，而对主机而言，网络也是一种I/O设备。如今，几乎每个计算机系统都支持TCP/IP协议。而与此同时，“套接字（socket）接口”是一组函数，可以与I/O函数结合起来创建网络应用，每当调用套接字函数时，系统都会调用内核模式中的TCP/IP函数。</p><p>对于内核而言，一个socket就是通信的一个端点；而从程序的角度来说，一个socket就是一个有相应的描述符的打开文件。internet的socket地址存放在一个类型为sockaddr_in的结构体中。而socket通信相关的函数都需要一个指向该结构的指针。</p><p>构建socket首先要将其初始化。在Windows平台上，具体代码如下：</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;winsock2.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _WINSOCK_DEPRECATED_NOWARNINGS</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> comment(lib,<span class="hljs-string">"ws2_32.lib"</span>)</span><br>WSADATA wsadata; <br><span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> != <span class="hljs-built_in">WSAStartup</span>(<span class="hljs-built_in">MAKEWORD</span>(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>), &amp;wsadata))<br>{<br>cout &lt;&lt; <span class="hljs-string">"Socket打开失败！"</span> &lt;&lt; endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br><span class="hljs-keyword">else</span><br>{<br>cout &lt;&lt; <span class="hljs-string">"已打开Socket"</span> &lt;&lt; endl;<br>}<br></code></pre></td></tr></tbody></table></figure><p>在初始化之后，服务端和客户端就可以分别利用socket()函数创建一个socket描述符了，使之成为一个通信的端点。例如：</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">SOCKET serSocket = <span class="hljs-built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="hljs-number">0</span>);<br></code></pre></td></tr></tbody></table></figure><p>AF表示我们正在使用IPv4协议，AF_INET表明我们正在使用32位IP地址，SOCK_STREAM表示这个socket是一个端点。而socket()返回的变量只是部分打开的，不能对其进行读写操作。</p><p>之后，我们就要定义一个sockaddr_in类型的结构体，并对其中的参数进行初始化，绑定IP地址与端口，例如：</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp">SOCKADDR_IN addr; <br>addr.sin_addr.S_un.S_addr = <span class="hljs-built_in">htonl</span>(INADDR_ANY); <br>addr.sin_family = AF_INET;<br>addr.sin_port = <span class="hljs-built_in">htons</span>(<span class="hljs-number">6000</span>);<br></code></pre></td></tr></tbody></table></figure><p>客户端可以调用connect()函数建立与服务器的连接，而服务器则利用bind()、listen()、accept()函数与客户端进行连接。在连接成功之后就可以进行通信了。</p><p>服务端主程序代码如下：</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">bind</span>(serSocket, (SOCKADDR*)&amp;addr, <span class="hljs-built_in">sizeof</span>(SOCKADDR)); <br><span class="hljs-built_in">listen</span>(serSocket, <span class="hljs-number">1024</span>); <br>SOCKADDR_IN clientsocket;<br><span class="hljs-type">int</span> len = <span class="hljs-built_in">sizeof</span>(SOCKADDR);<br>SOCKET serConn = <span class="hljs-built_in">accept</span>(serSocket, (SOCKADDR*)&amp;clientsocket, &amp;len); <br><span class="hljs-keyword">if</span> (serConn != <span class="hljs-number">-1</span>)<br>{<br>cout &lt;&lt; <span class="hljs-string">"与客户端链接成功"</span> &lt;&lt; endl;<br>}<br><span class="hljs-keyword">else</span><br>{<br>cout &lt;&lt; <span class="hljs-string">"与客户端链接失败！"</span> &lt;&lt; endl;<br>}<br><span class="hljs-built_in">closesocket</span>(serConn);<span class="hljs-comment">//关闭</span><br><span class="hljs-built_in">WSACleanup</span>();<br></code></pre></td></tr></tbody></table></figure><p>客户端主程序代码如下：</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">if</span> (!<span class="hljs-built_in">connect</span>(clientSocket, (SOCKADDR*)&amp;client_in, <span class="hljs-built_in">sizeof</span>(SOCKADDR)))<br>{<br>cout &lt;&lt; <span class="hljs-string">"与服务器链接成功！"</span> &lt;&lt; endl;<br>}<br><span class="hljs-keyword">else</span><br>{<br>cout &lt;&lt; <span class="hljs-string">"与服务器链接失败！"</span> &lt;&lt; endl;<br>}<br><span class="hljs-built_in">closesocket</span>(clientSocket);<br><span class="hljs-built_in">WSACleanup</span>();<br></code></pre></td></tr></tbody></table></figure><p>构建好了如上socket通信的框架之后，就可以进行功能搭建了。我们可以模拟一个echo程序的功能，客户端输入一个字符串，服务端收到它，再将它原模原样地返回。</p><p>完整的客户端代码<em>client.cpp</em>：</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">define</span> _WINSOCK_DEPRECATED_NO_WARNINGS</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;winsock2.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> comment (lib,<span class="hljs-string">"ws2_32.lib"</span>)</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>{<br><span class="hljs-type">char</span> sendBuf[<span class="hljs-number">1024</span>];<br><span class="hljs-type">char</span> receiveBuf[<span class="hljs-number">1024</span>];<br><span class="hljs-type">char</span> ip[<span class="hljs-number">1024</span>];<br>cout &lt;&lt; <span class="hljs-string">"输入服务器ip"</span> &lt;&lt; endl;<br>cin &gt;&gt; ip;<br><span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>{<br>WSADATA wsadata;<br><span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> == <span class="hljs-built_in">WSAStartup</span>(<span class="hljs-built_in">MAKEWORD</span>(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>), &amp;wsadata))<br>{<br>cout &lt;&lt; <span class="hljs-string">"客户端Socket已打开"</span> &lt;&lt; endl;<br>}<br><span class="hljs-keyword">else</span><br>{<br>cout &lt;&lt; <span class="hljs-string">"客户端Socket打开失败"</span> &lt;&lt; endl;<br>}<br>SOCKET clientSocket = <span class="hljs-built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="hljs-number">0</span>);<br><br>SOCKADDR_IN client_in;<br>client_in.sin_addr.S_un.S_addr = <span class="hljs-built_in">inet_addr</span>(ip);<br>client_in.sin_family = AF_INET;<br>client_in.sin_port = <span class="hljs-built_in">htons</span>(<span class="hljs-number">6000</span>);<br><br><span class="hljs-keyword">if</span> (!<span class="hljs-built_in">connect</span>(clientSocket, (SOCKADDR*)&amp;client_in, <span class="hljs-built_in">sizeof</span>(SOCKADDR)))<br>{<br>cout &lt;&lt; <span class="hljs-string">"与服务器链接成功！"</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">"发出信息:"</span>;<br><span class="hljs-built_in">gets_s</span>(sendBuf, <span class="hljs-number">1024</span>);<br><span class="hljs-built_in">send</span>(clientSocket, sendBuf, <span class="hljs-number">1024</span>, <span class="hljs-number">0</span>);<br><span class="hljs-built_in">recv</span>(clientSocket, receiveBuf, <span class="hljs-number">1024</span>, <span class="hljs-number">0</span>);<br>cout &lt;&lt; <span class="hljs-string">"收到信息："</span> &lt;&lt; receiveBuf &lt;&lt; endl;<br>}<br><span class="hljs-keyword">else</span><br>{<br>cout &lt;&lt; <span class="hljs-string">"与服务器链接失败！"</span> &lt;&lt; endl;<br>}<br><span class="hljs-built_in">closesocket</span>(clientSocket);<br><span class="hljs-built_in">WSACleanup</span>();<br>}<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><p>完整的服务端代码<em>server.cpp</em>：</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;winsock2.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _WINSOCK_DEPRECATED_NOWARNINGS</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> comment(lib,<span class="hljs-string">"ws2_32.lib"</span>)</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>{<br><span class="hljs-type">char</span> Buf[<span class="hljs-number">1024</span>];<br><span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>{<br>WSADATA wsadata;<br><span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> != <span class="hljs-built_in">WSAStartup</span>(<span class="hljs-built_in">MAKEWORD</span>(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>), &amp;wsadata))<br>{<br>cout &lt;&lt; <span class="hljs-string">"Socket打开失败！"</span> &lt;&lt; endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br><span class="hljs-keyword">else</span><br>{<br>cout &lt;&lt; <span class="hljs-string">"已打开Socket"</span> &lt;&lt; endl;<br>}<br>SOCKET serSocket = <span class="hljs-built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="hljs-number">0</span>);<br>SOCKADDR_IN addr;<br>addr.sin_addr.S_un.S_addr = <span class="hljs-built_in">htonl</span>(INADDR_ANY);<br>addr.sin_family = AF_INET;<br>addr.sin_port = <span class="hljs-built_in">htons</span>(<span class="hljs-number">6000</span>);<br><span class="hljs-built_in">bind</span>(serSocket, (SOCKADDR*)&amp;addr, <span class="hljs-built_in">sizeof</span>(SOCKADDR));<br><span class="hljs-built_in">listen</span>(serSocket, <span class="hljs-number">1024</span>);<br>SOCKADDR_IN clientsocket;<br><span class="hljs-type">int</span> len = <span class="hljs-built_in">sizeof</span>(SOCKADDR);<br>SOCKET serConn = <span class="hljs-built_in">accept</span>(serSocket, (SOCKADDR*)&amp;clientsocket, &amp;len);<br><span class="hljs-keyword">if</span> (serConn != <span class="hljs-number">-1</span>)<br>{<br>cout &lt;&lt; <span class="hljs-string">"与客户端链接成功"</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">"服务端收到:"</span> &lt;&lt; Buf &lt;&lt; endl;<br><span class="hljs-built_in">recv</span>(serConn, Buf, <span class="hljs-number">1024</span>, <span class="hljs-number">0</span>);<br>cout &lt;&lt; <span class="hljs-string">"服务端回复："</span> &lt;&lt; Buf &lt;&lt; endl;<br><span class="hljs-built_in">send</span>(serConn, Buf, <span class="hljs-number">1024</span>, <span class="hljs-number">0</span>);<br>}<br><span class="hljs-keyword">else</span><br>{<br>cout &lt;&lt; <span class="hljs-string">"与客户端链接失败！"</span> &lt;&lt; endl;<br>}<br><span class="hljs-built_in">closesocket</span>(serConn);<br><span class="hljs-built_in">WSACleanup</span>();<br>}<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><p>流程图可参考：</p><p><img src="https://cdn.jsdelivr.net/gh/Kisechan/Picture-Bed-Kisechan@master/img/202405191725630.svg" alt=""></p><h3 id="多线程的实现">多线程的实现</h3><p>如果有两个或多个客户端，就需要衍生出子线程分别为他们服务，如图：</p><p><img src="https://images.kisechan.space/202405191703045.png" alt=""><br><img src="https://images.kisechan.space/202405191703385.png" alt=""></p><p>不过，C++提供的thread库能够帮我们简单地实现多线程编程，其中的thread对象可以创建一个新线程执行函数，让其与主线程并行运行（执行detach()函数），再用vector容器存储它就可以很容易地达到多线程编程的效果。</p><p>我们为服务端创建的SOCKET对象serConn承担着accept客户端的任务，如果侦测到有服务端成功连接，就在vector中创建一个新线程并运行它（sockFunc()函数）。</p><p>拥有了多线程运行的<em>server_threads.cpp</em>完整代码如下：</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;winsock2.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;thread&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _WINSOCK_DEPRECATED_NOWARNINGS</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> comment(lib,<span class="hljs-string">"ws2_32.lib"</span>)</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">sockFunc</span><span class="hljs-params">(SOCKET serConn)</span></span><br><span class="hljs-function"></span>{<br><span class="hljs-type">char</span> Buf[<span class="hljs-number">1024</span>];<br>cout &lt;&lt; <span class="hljs-string">"与客户端链接成功"</span> &lt;&lt; endl;<br><span class="hljs-built_in">recv</span>(serConn, Buf, <span class="hljs-number">1024</span>, <span class="hljs-number">0</span>);<br>cout &lt;&lt; <span class="hljs-string">"服务端收到:"</span> &lt;&lt; Buf &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">"服务端回复："</span> &lt;&lt; Buf &lt;&lt; endl;<br><span class="hljs-built_in">send</span>(serConn, Buf, <span class="hljs-number">1024</span>, <span class="hljs-number">0</span>);<br><span class="hljs-built_in">closesocket</span>(serConn);<br>}<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>{<br><span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>{<br>WSADATA wsadata;<br><span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> != <span class="hljs-built_in">WSAStartup</span>(<span class="hljs-built_in">MAKEWORD</span>(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>), &amp;wsadata))<br>{<br>cout &lt;&lt; <span class="hljs-string">"Socket打开失败！"</span> &lt;&lt; endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br><span class="hljs-keyword">else</span><br>{<br>cout &lt;&lt; <span class="hljs-string">"已打开Socket"</span> &lt;&lt; endl;<br>}<br>SOCKET serSocket = <span class="hljs-built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="hljs-number">0</span>);<br>SOCKADDR_IN addr;<br>addr.sin_addr.S_un.S_addr = <span class="hljs-built_in">htonl</span>(INADDR_ANY);<br>addr.sin_family = AF_INET;<br>addr.sin_port = <span class="hljs-built_in">htons</span>(<span class="hljs-number">6000</span>);<br><span class="hljs-built_in">bind</span>(serSocket, (SOCKADDR*)&amp;addr, <span class="hljs-built_in">sizeof</span>(SOCKADDR));<br><span class="hljs-built_in">listen</span>(serSocket, <span class="hljs-number">1024</span>);<br>vector&lt;thread&gt; tcp;<br><span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>{<br>SOCKADDR_IN clientsocket;<br><span class="hljs-type">int</span> len = <span class="hljs-built_in">sizeof</span>(SOCKADDR);<br>SOCKET serConn = <span class="hljs-built_in">accept</span>(serSocket, (SOCKADDR*)&amp;clientsocket, &amp;len);<br><span class="hljs-keyword">if</span> (serConn != <span class="hljs-number">-1</span>)<br>{<br>tcp.<span class="hljs-built_in">emplace_back</span>(sockFunc, serConn);<br><span class="hljs-keyword">if</span> (tcp.<span class="hljs-built_in">back</span>().<span class="hljs-built_in">joinable</span>())<br>{<br><span class="hljs-comment">//cout &lt;&lt; "Thread " &lt;&lt; tcp.back().get_id() &lt;&lt; " is joinable!" &lt;&lt; endl;</span><br>tcp.<span class="hljs-built_in">back</span>().<span class="hljs-built_in">detach</span>();<br>}<br>}<br><span class="hljs-keyword">else</span><br>{<br>cout &lt;&lt; <span class="hljs-string">"与客户端链接失败！"</span> &lt;&lt; endl;<br>}<br>}<br><span class="hljs-built_in">WSACleanup</span>();<br>}<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="参考">参考</h3><ul><li><a href="https://blog.csdn.net/wu2304211/article/details/53819311">https://blog.csdn.net/wu2304211/article/details/53819311</a></li><li><a href="https://www.cnblogs.com/Reyzal/p/6742553.html">https://www.cnblogs.com/Reyzal/p/6742553.html</a></li><li><a href="https://blog.csdn.net/qq_37245700/article/details/134718505">https://blog.csdn.net/qq_37245700/article/details/134718505</a></li><li><a href="https://blog.csdn.net/qq_44101612/article/details/100022786">https://blog.csdn.net/qq_44101612/article/details/100022786</a></li><li><a href="https://www.jb51.net/article/254190.htm#_label1">https://www.jb51.net/article/254190.htm#_label1</a></li><li><a href="https://www.cnblogs.com/DOMLX/p/9613861.html">https://www.cnblogs.com/DOMLX/p/9613861.html</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>CS 杂谈</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>OOP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>可视化Dijkstra算法模拟地图导航</title>
    <link href="/2024/dijkstra/"/>
    <url>/2024/dijkstra/</url>
    
    <content type="html"><![CDATA[<p>用qt写了一个能够实现可视化Dijkstra算法模拟寻路的小程序</p><p>没有写任何关于人性化的功能，只有纯粹的算法，如果输入的时候点了cancel或者输入了错误数据会导致程序直接崩溃）</p><p><img src="https://images.kisechan.space/202404302115952.png" alt="示例"></p><p><a href="https://cdn.jsdelivr.net/gh/Kisechan/Picture-Bed-Kisechan@master/img/202404302105526.7z">下载源码</a></p><p><a href="https://cdn.jsdelivr.net/gh/Kisechan/Picture-Bed-Kisechan@master/img/202404302104761.7z">下载程序</a></p>]]></content>
    
    
    <categories>
      
      <category>CS 杂谈</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Qt</tag>
      
      <tag>算法</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《现代物理有机化学》笔记：有机电子材料</title>
    <link href="/2022/essay1/"/>
    <url>/2022/essay1/</url>
    
    <content type="html"><![CDATA[<h3 id="17-1-1-无限-pi体系：特别的聚乙炔">17.1.1 无限<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>π</mi></mrow><annotation encoding="application/x-tex">\pi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">π</span></span></span></span>体系：特别的聚乙炔</h3><p>首先绘制出“聚乙炔”的能级图：</p><p><img src="https://pic1.zhimg.com/80/v2-206a58e6e7864cfa3c4842feb743e224_1440w.jpg" alt="聚乙炔的能带结构"></p><p>而我们处理的策略就是将线性体系以环多烯的方式处理，因为它们的电子结构差不多，它们的能级满足以下关系：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ϵ</mi><mo>=</mo><mi>α</mi><mo>+</mo><mn>2</mn><mi>cos</mi><mo>⁡</mo><mo stretchy="false">(</mo><mfrac><mrow><mn>2</mn><mi>π</mi><mi>i</mi></mrow><mi>N</mi></mfrac><mo stretchy="false">)</mo><mo>×</mo><mi>β</mi></mrow><annotation encoding="application/x-tex">\epsilon =\alpha +2\cos(\frac{2\pi i}{ N})\times \beta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">ϵ</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.2007em;vertical-align:-0.345em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">cos</span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8557em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathnormal mtight">πi</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.05278em;">β</span></span></span></span>，其中<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6595em;"></span><span class="mord mathnormal">i</span></span></span></span>为轨道节点数目，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span></span></span></span>为原子总数目。例如，我们分析环戊二烯自由基（<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi><mo>=</mo><mn>5</mn></mrow><annotation encoding="application/x-tex">N=5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">5</span></span></span></span>）：</p><p><img src="https://pic3.zhimg.com/v2-4cecf94a5adfc14d5b1a93da13b5cbe6_r.jpg" alt="环戊二烯自由基的能级图"></p><p>其中，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi><mo>=</mo><mo>±</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">i=\pm 2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6595em;"></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">±</span><span class="mord">2</span></span></span></span>时的轨道是反键轨道，其余的是成键轨道。那么，当$N\to +  \infty <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>时，我们就可以作出</mtext></mrow><annotation encoding="application/x-tex">时，我们就可以作出</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord cjk_fallback">时，我们就可以作出</span></span></span></span>\epsilon<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>关于</mtext></mrow><annotation encoding="application/x-tex">关于</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord cjk_fallback">关于</span></span></span></span>i$变化的图像：</p><p><img src="https://pic3.zhimg.com/80/v2-b12e5f350ca8746e3b1e701b7789fbb2_1440w.webp" alt="横轴代表节点数i，纵轴表示各能级能量"></p><p>可以看出，它类似于一个正弦曲线，最小值为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>α</mi><mo>+</mo><mn>2</mn><mi>β</mi></mrow><annotation encoding="application/x-tex">\alpha+2\beta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord">2</span><span class="mord mathnormal" style="margin-right:0.05278em;">β</span></span></span></span>，最大值为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>α</mi><mo>−</mo><mn>2</mn><mi>β</mi></mrow><annotation encoding="application/x-tex">\alpha-2\beta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord">2</span><span class="mord mathnormal" style="margin-right:0.05278em;">β</span></span></span></span>。</p><p>倘若我们将固体化学的概念引入这里，比如“晶胞”，即“重复单元”，然而，无限<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>π</mi></mrow><annotation encoding="application/x-tex">\pi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">π</span></span></span></span>体系中的所有$\mathrm{CH} <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>都是等价的，即聚乙炔的晶胞都是一个</mtext></mrow><annotation encoding="application/x-tex">都是等价的，即聚乙炔的晶胞都是一个</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord cjk_fallback">都是等价的，即聚乙炔的晶胞都是一个</span></span></span></span>\mathrm{CH} <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>，那么我们定义</mtext></mrow><annotation encoding="application/x-tex">，那么我们定义</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord cjk_fallback">，那么我们定义</span></span></span></span>a<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>为一个</mtext></mrow><annotation encoding="application/x-tex">为一个</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord cjk_fallback">为一个</span></span></span></span>\mathrm{CH} <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>的大小，和</mtext></mrow><annotation encoding="application/x-tex">的大小，和</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord cjk_fallback">的大小，和</span></span></span></span>k<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo></mrow><annotation encoding="application/x-tex">(</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span></span></span></span>k=\frac{2\pi i}{Na} <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">)</mo><mtext>由于</mtext></mrow><annotation encoding="application/x-tex">)由于</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mclose">)</span><span class="mord cjk_fallback">由于</span></span></span></span>-\frac{N}{a} \le i\le +\frac{N}{a}<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>，那么</mtext></mrow><annotation encoding="application/x-tex">，那么</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord cjk_fallback">，那么</span></span></span></span>-\frac{\pi}{a} \le k\le +\frac{\pi}{a}<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>，将</mtext></mrow><annotation encoding="application/x-tex">，将</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord cjk_fallback">，将</span></span></span></span>k<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>代入</mtext></mrow><annotation encoding="application/x-tex">代入</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord cjk_fallback">代入</span></span></span></span>\epsilon<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>的定义式中，得到</mtext></mrow><annotation encoding="application/x-tex">的定义式中，得到</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord cjk_fallback">的定义式中，得到</span></span></span></span>\epsilon=\alpha+\cos( ka )\times\beta$，则可以作出相应的图像：</p><p><img src="https://pic3.zhimg.com/80/v2-c33a766665d782c30f0e1314e50e7252_1440w.webp" alt="能级能量和大小的关系，其中时称作“Brillouion区边界”"></p><p>代表着能带内“相”的关系，代表着“相空间”，即<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>π</mi></mrow><annotation encoding="application/x-tex">\pi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">π</span></span></span></span>轨道相位组合的方式。<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">k=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span>时，所有单体的相位相同，$k=\frac{\pi}{a} $时，所有单体的相位相反。</p><p><img src="https://pic3.zhimg.com/80/v2-e2806950cd9a483f4ce94b9c71dc43de_1440w.webp" alt="单体的相位（如果认为单体指的是两个$athrm{CH} $）"></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">k=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span>时，所有相位相同，此时能量应最低，为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>α</mi><mo>+</mo><mn>2</mn><mi>β</mi></mrow><annotation encoding="application/x-tex">\alpha+2\beta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord">2</span><span class="mord mathnormal" style="margin-right:0.05278em;">β</span></span></span></span>； 时，所有单体的相位相反，能量最高，为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>α</mi><mo>−</mo><mn>2</mn><mi>β</mi></mrow><annotation encoding="application/x-tex">\alpha-2\beta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord">2</span><span class="mord mathnormal" style="margin-right:0.05278em;">β</span></span></span></span>；而π轨道（如上图中左下侧）异相组合时，能量应呈现非键轨道特性，为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>α</mi></mrow><annotation encoding="application/x-tex">\alpha</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span></span></span></span>。（注意：这里原书认为单体，即重复单元为两个$\mathrm{CH} $，那么相应地，单体长度也会扩大两倍，变成 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>a</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mrow><annotation encoding="application/x-tex">a'</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7519em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>a</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>=</mo><mn>2</mn><mi>a</mi></mrow><annotation encoding="application/x-tex">a'=2a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7519em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">2</span><span class="mord mathnormal">a</span></span></span></span>）</p><p><img src="https://pic1.zhimg.com/80/v2-111c4155f5a7e56eba8fb6b36348ebf0_1440w.webp" alt=""></p><p>不过，不管怎么取“晶胞”，分子的电子结构都不会改变，那么理论上，聚乙炔的π轨道应当全满，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>π</mi><mo lspace="0em" rspace="0em">⋆</mo></msup></mrow><annotation encoding="application/x-tex">\pi^{\star}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6887em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">π</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6887em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">⋆</span></span></span></span></span></span></span></span></span></span></span></span> 轨道应当全空，其Fermi能级（<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>E</mi><mi>F</mi></msub></mrow><annotation encoding="application/x-tex">E_{F}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">F</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，和HOMO是一个意思）就在中间，能量为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>α</mi></mrow><annotation encoding="application/x-tex">\alpha</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span></span></span></span> 。但在这个模型中，能带（<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>π</mi></mrow><annotation encoding="application/x-tex">\pi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">π</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>π</mi><mo lspace="0em" rspace="0em">⋆</mo></msup></mrow><annotation encoding="application/x-tex">\pi^{\star}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6887em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">π</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6887em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">⋆</span></span></span></span></span></span></span></span></span></span></span></span> 轨道组成的）之间的能级差（<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>E</mi><mi>g</mi></msub></mrow><annotation encoding="application/x-tex">E_{g}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">g</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span>，能隙）应该为 ，所以，聚乙炔就应该是一种有机金属导体了！可惜事实真的如此吗？</p><p>更何况，真实的材料可不会是一维的，所以以上分析还是有点瑕疵。这也是Hückel理论的一个缺陷。</p><hr><h3 id="17-1-2-Peierls形变">17.1.2 Peierls形变</h3><p>我们发现，在Hückel理论中，聚乙炔的能隙等于<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span>，而环丁二烯也是一个类似的体系：</p><p><img src="https://pic3.zhimg.com/v2-f48b12622dcd959b9c0546b8c694758a_r.jpg" alt="正方形和矩形形式的环丁二烯的能级"></p><p>如果不谈反芳香性等等因素的话，那环丁二烯本来应该是正方形的，这没什么问题。但是它实际上处于一个矩形的构型（长键长<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1.54</mn><mover accent="true"><mi mathvariant="normal">A</mi><mo>˚</mo></mover></mrow><annotation encoding="application/x-tex">1.54\mathrm{Å}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9468em;"></span><span class="mord">1.54</span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9468em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathrm">A</span></span><span style="top:-3.2523em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.375em;"><span class="mord mathrm">˚</span></span></span></span></span></span></span></span></span></span>，短键长<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1.37</mn><mover accent="true"><mi mathvariant="normal">A</mi><mo>˚</mo></mover></mrow><annotation encoding="application/x-tex">1.37\mathrm{Å}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9468em;"></span><span class="mord">1.37</span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9468em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathrm">A</span></span><span style="top:-3.2523em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.375em;"><span class="mord mathrm">˚</span></span></span></span></span></span></span></span></span></span>），这就导致HOMO和LUMO裂分，从而变得更稳定——矩形的构型能量比正方形低<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>5</mn><mo>−</mo><mn>10</mn><mrow><mi mathvariant="normal">k</mi><mi mathvariant="normal">c</mi><mi mathvariant="normal">a</mi><mi mathvariant="normal">l</mi><mi mathvariant="normal">/</mi><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">l</mi></mrow></mrow><annotation encoding="application/x-tex">5-10\mathrm{kcal/mol}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">5</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">10</span><span class="mord"><span class="mord mathrm">kcal/mol</span></span></span></span></span>——这也可以被称作是“伪Jahn-Teller效应”。因此，环丁二烯的基态应该是单重态（上图右），而非三重态（上图左），正方形的构型其实算是两种矩形构型交替变化的一个过渡态罢了。</p><p><img src="https://pic1.zhimg.com/80/v2-2f9637e74065a834c237c46f5cdf50a0_1440w.webp" alt="&quot;Jahn-Teller效应&quot;"></p><p>类似的效应在聚乙炔中也出现了，按照我们的预期，聚乙炔的C-C键应该都是等长的——可事实却不是这样，它的键长发生了形变，变成了长短交替的结构。几何形变让它出现了能隙，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>E</mi><mi>g</mi></msub><mo>=</mo><mn>1.5</mn><mrow><mi mathvariant="normal">e</mi><mi mathvariant="normal">V</mi></mrow></mrow><annotation encoding="application/x-tex">E_{g}=1.5\mathrm{eV}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">g</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord">1.5</span><span class="mord"><span class="mord mathrm" style="margin-right:0.01389em;">eV</span></span></span></span></span>，所以实际上，聚乙炔是一种半导体，这种形变叫做Peierls形变。</p><p><img src="https://pic1.zhimg.com/v2-f9e69cc4e90775e82b73494d9f7f800c_r.jpg" alt="形变导致的聚乙炔能量变化"></p><p><img src="https://pic2.zhimg.com/80/v2-b61538d0f411c01d9aa70b4a410458a5_1440w.webp" alt="假想的聚乙炔电子结构，所有的电子都是离域的"></p><p>此时，聚乙炔的HOMO（也就是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>E</mi><mi>F</mi></msub></mrow><annotation encoding="application/x-tex">E_{F}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">F</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>）是低于<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>α</mi></mrow><annotation encoding="application/x-tex">\alpha</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span></span></span></span>的，确实是稳定化了。其实在多数中性、闭壳的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>π</mi></mrow><annotation encoding="application/x-tex">\pi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">π</span></span></span></span>体系中，这种长短键交替的现象是比较常见的。苯算是一个特例，由于强<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>σ</mi></mrow><annotation encoding="application/x-tex">\sigma</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span></span></span></span>键的束缚，它的键长的确是均一的。</p><hr><h3 id="17-1-3-掺杂">17.1.3 掺杂</h3><p>在<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>π</mi></mrow><annotation encoding="application/x-tex">\pi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">π</span></span></span></span>体系共轭聚合物中，聚乙炔等等只能算是半导体，而绝缘体更是普遍的情况。所以，为了改善它们的导电性，掺杂是一个很好的办法。例如把聚合物置于氧化剂（如<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">A</mi><mi mathvariant="normal">s</mi><msub><mi mathvariant="normal">F</mi><mn>5</mn></msub></mrow><annotation encoding="application/x-tex">\mathrm{AsF_{5}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathrm">As</span><span class="mord"><span class="mord mathrm">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathrm mtight">5</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi mathvariant="normal">I</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">\mathrm{I_{2}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathrm">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathrm mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>）氛围中，让其失去电子，引入正电荷，进行p型掺杂；或是用还原剂（如金属钠，萘-钠）处理进行n型掺杂。那么我们先讨论p型掺杂。</p><p><img src="https://pic3.zhimg.com/80/v2-983c851545c6e99b4642fe06b188dc46_1440w.webp" alt="掺杂后的聚乙炔和聚对苯撑（PPP）的结构"></p><p>进行n型掺杂，引入正电荷或自由基后会产生一个部分离域的正离子，为什么是部分离域呢？</p><ul><li><p>我们知道，烯丙基自由基比乙基自由基稳定，是因为它有离域体系，然而随着离域体系越来越大，自由基应该是更稳定的，随着碳原子数的增加，例如戊二烯基自由基，肯定是比烯丙基自由基稳定的，但是它们之间能量的差值会越来越小，到最后，离域提供的稳定化能只能说是微乎其微，不足挂齿了。（可能可以用共轭饱和理论来解释）</p></li><li><p>另外，由于Peierls形变为聚合物提供了稳定化能，但是掺和进来的正离子或自由基打乱了这个节奏，离域的能量不足以补偿打乱Peierls形变抬升的能量。</p></li></ul><p>随着掺杂得越来越多，产生的部分离域的电荷和自由基（称作“极化子”）也会变得越来越多，使得电导率上升。</p><p>这样掺杂的一个结果，就是能够形成“中间能隙束缚态”，代表着电子的缺失，也可以看作空轨道的引入，单占轨道从价带中独立出去。它的另一种解释是极化子的形成消除了Peierls形变。并且，新轨道的产生使得光学跃迁成为了可能，让产生的聚合物带上了颜色。</p><p><img src="https://pic2.zhimg.com/v2-b7004a6baec99318b3f453123953fea5_r.jpg" alt="中间能隙束缚态的形成"></p><p>重度掺杂也会导致“双极化子”的形成，它可能是两个极化子复合而成的。如果极化子是自由基，则它们会复合成新键；若是电荷，库仑斥力不应该会阻碍它们的复合吗？在气相中的确是这样的，但在固相中，材料的介电系数更大，减小了库仑斥力，并且引入的阴离子，如 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">A</mi><msub><mi mathvariant="normal">s</mi><mn>2</mn></msub><msubsup><mi mathvariant="normal">F</mi><mn>11</mn><mo lspace="0em" rspace="0em">−</mo></msubsup></mrow><annotation encoding="application/x-tex">\mathrm{As_{2}F_{11}^{-}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0778em;vertical-align:-0.2663em;"></span><span class="mord"><span class="mord mathrm">A</span><span class="mord"><span class="mord mathrm">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathrm mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathrm">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8115em;"><span style="top:-2.4337em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathrm mtight">11</span></span></span></span><span style="top:-3.1031em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2663em;"><span></span></span></span></span></span></span></span></span></span></span>、<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi mathvariant="normal">I</mi><mn>3</mn><mo lspace="0em" rspace="0em">−</mo></msubsup></mrow><annotation encoding="application/x-tex">\mathrm{I_{3}^{-}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0778em;vertical-align:-0.2663em;"></span><span class="mord"><span class="mord mathrm">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8115em;"><span style="top:-2.4337em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathrm mtight">3</span></span></span></span><span style="top:-3.1031em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2663em;"><span></span></span></span></span></span></span></span></span></span>等，扩散能力较强，屏蔽了其电荷，促使双极化子产生。</p><p><img src="https://pic1.zhimg.com/80/v2-1f81bd10ba97ebeb7c563a7241b2464c_1440w.webp" alt="双极化子的产生，注意：极化子比图示的更加离域"></p><p>与金属导体不同，这些聚合物的电导率（<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>σ</mi></mrow><annotation encoding="application/x-tex">\sigma</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span></span></span></span>，电阻率<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ρ</mi></mrow><annotation encoding="application/x-tex">\rho</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">ρ</span></span></span></span>的倒数）常常与温度反相关，这是因为极化子的移动会导致碳骨架（它们的键长、键角等）轻微地改变，这需要一定的热活化能。金属在低温时，干扰晶格中自由电子运动的振动会减少。综上，电导率与温度的关系也是判定是否为金属导体的一大标准。</p><p>以上是对于p型掺杂半导体的论述，同理，n型掺杂也是差不多的。</p><hr><h3 id="致谢">致谢</h3><p>特别感谢<a href="https://www.zhihu.com/people/lei-si-chen-48">@lesscho</a> 对本文的斧正，感恩捏！</p><hr><p>原文发表在<a href="https://zhuanlan.zhihu.com/p/659350625">知乎</a>。</p>]]></content>
    
    
    <categories>
      
      <category>化学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>有机化学</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
